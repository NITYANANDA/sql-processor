/*
 * File: app/controller/Person.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Simplereg.controller.Person', {
    extend: 'Ext.app.Controller',

    statics: {
        launch: function() {
            //Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));

            // Prepare loading mask
            Ext.LOADING = new Ext.LoadMask(Ext.getBody(), {
                msg: "Loading..."
            });

            Ext.WORKING = new Ext.LoadMask(Ext.getBody(), {
                msg: "Working..."
            });

            // Prepare dialogs
            Ext.create("Simplereg.view.PersonSearch");
            Ext.create("Simplereg.view.PersonCreate");
            Ext.create("Simplereg.view.PersonUpdate");
            Ext.create("Simplereg.view.PersonDelete");
            Ext.create("Simplereg.view.ContactCreate");
            Ext.create("Simplereg.view.ContactUpdate");
            Ext.create("Simplereg.view.ContactDelete");

            // Keyboard control
            new Ext.KeyMap(Ext.get(document), [

            // Find person (Ctrl+F)
            {
                key: "F",
                ctrl: true,
                shift: false,
                alt: false,
                fn: function(keyCode, event) {
                    Ext.getCmp("PersonSearch").show();
                    event.stopEvent();
                }
            },

            // Refresh page (Ctrl+R)
            {
                key: "R",
                ctrl: true,
                shift: true,
                alt: false,
                fn: function(keyCode, event) {
                    Simplereg.controller.Person.refreshPage();
                    event.stopEvent();
                }
            }
            ]);
        },

        markInvalidFields: function(form, errors) {
            var name, field, error;

            if (!form.findField) {
                form = form.getForm();
            }

            for (name in errors) {
                field = form.findField(name);

                if (field) {
                    error = "Invalid field";
                    if (errors[name][0]) {
                        error += ": " + errors[name][0];
                    }

                    field.markInvalid(error);
                }
            }
        },

        refreshPage: function() {
            var panel = Ext.getCmp("PersonRegistry"),
                view = panel.getActiveTab();

            // Person select
            if (view.is("personselect")) {
                Simplereg.controller.Person.refreshPersonSelect();
            }

            // Person view
            else {
                Simplereg.controller.Person.refreshPersonView(view);
            }
        },

        openPersonSelect: function() {
            var panel = Ext.getCmp("PersonRegistry"),
                view = panel.child("personselect");

            panel.setActiveTab(view);
        },

        refreshPersonSelect: function(params) {
            var panel = Ext.getCmp("PersonRegistry"),
                view = panel.child("personselect"),
                grid = view.down("#person_list"),
                store = grid.getStore(),
                toolbar = grid.down("pagingtoolbar");

            // Filter parameters
            if (params) {
                store.proxy.extraParams = params;
            }

            grid.getSelectionModel().deselectAll();

            // Refresh select
            if (toolbar) {
                toolbar.doRefresh();
            }
            else {
                store.reload();
            }

            // Correct page (current over available)
            //TODO
        },

        identifyPersonView: function(id) {
            return "PersonView" + id;
        },

        titlePersonView: function(record) {
            var data = record.data,
                text = [], title;

            // Person name
            text.push(data.firstName + " " + data.lastName);

            // Person identification
            if (data.ssn) {
                text.push(data.ssn);
            }

            title = text.join(" | ");
            return title;
        },

        openPersonView: function(id, refresh) {
            var panel = Ext.getCmp("PersonRegistry"),
                ident = Simplereg.controller.Person.identifyPersonView(id),
                view = panel.child("#" + ident);

            // Create new view
            if (!view) {
                view = Ext.create("Simplereg.view.PersonView", {
                    closable: true,
                    itemId: ident
                });

                panel.add(view);

                // View store
                var store = Ext.create("Simplereg.store.People", {
                    autoDestroy: true,
                    storeId: ident + "Store"
                });

                view.store = store;

                store.proxy.extraParams = {
                    contacts: true,
                    id: id
                };

                refresh = true;
            }

            // Activate view
            panel.setActiveTab(view);

            // Refresh view
            if (refresh) {
                Simplereg.controller.Person.refreshPersonView(view);
            }
        },

        closePersonView: function(id) {
            var panel = Ext.getCmp("PersonRegistry"),
                ident = Simplereg.controller.Person.identifyPersonView(id),
                view = panel.child("#" + ident);

            // Close person view
            if (view && view.closable) {
                view.close();
            }
        },

        refreshPersonView: function(view, record) {
            // Refresh from store
            if (!record) {
                var store = view.store;

                Ext.LOADING.show();

                store.load({
                    callback: function(records, operation, success) {
                        Ext.LOADING.hide();

                        if (success) {
                            Simplereg.controller.Person.refreshPersonView(view, records[0]);
                        }
                        return success;
                    }
                });
            }

            // Refresh from record
            else {
                view.record = record;

                // Set title
                var title = Simplereg.controller.Person.titlePersonView(record);
                view.setTitle(title);

                document.title = title;

                // Fill person detail
                var person = view.down("persondetail form");
                person.loadRecord(record);

                // Fill contacts
                var grid = view.down("contactlist grid"),
                    store = record.contacts();

                grid.bindStore(store);
                grid.getSelectionModel().deselectAll();

                // Paging toolbar
                var toolbar = grid.down("pagingtoolbar");
                if (toolbar) {
                    toolbar.bindStore(store);
                    store.totalCount = store.getCount();
                    toolbar.onLoad();
                }
            }
        },

        searchPersonFromDialog: function() {
            var dialog = Ext.getCmp("PersonSearch"),
                form = dialog.down("form");

            if (!form.isValid()) {
                return false;
            }

            dialog.bussy();

            // Activate person select
            Simplereg.controller.Person.openPersonSelect();

            // Filter parameters
            var params = form.getValues();

            dialog.bussy(false);
            dialog.close();

            // Refresh
            Simplereg.controller.Person.refreshPersonSelect(params);
        },

        createPersonFromDialog: function(source) {
            var dialog = Ext.getCmp("PersonCreate"),
                form = dialog.down("form");

            if (!form.isValid()) {
                return false;
            }

            dialog.bussy();

            // Create new person
            simpleService.createPerson(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    form.getForm().reset();
                    dialog.close();

                    Simplereg.controller.Person.openPersonView(result.id);
                    Simplereg.controller.Person.refreshPersonSelect();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        },

        updatePersonFromDialog: function(source) {
            var dialog = Ext.getCmp("PersonUpdate"),
                form = dialog.down("form");

            if (!form.isValid()) {
                return false;
            }

            dialog.bussy();

            // Update person
            simpleService.updatePerson(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    form.getForm().reset();
                    dialog.close();

                    Simplereg.controller.Person.openPersonView(result.id, true);
                    Simplereg.controller.Person.refreshPersonSelect();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        },

        deletePersonFromDialog: function(source) {
            var dialog = Ext.getCmp("PersonDelete");

            dialog.bussy();

            // Delete person
            simpleService.deletePerson(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    dialog.close();

                    Simplereg.controller.Person.openPersonSelect();
                    Simplereg.controller.Person.closePersonView(result.id);
                    Simplereg.controller.Person.refreshPersonSelect();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        },

        createContactFromDialog: function(source) {
            var dialog = Ext.getCmp("ContactCreate"),
                form = dialog.down("form");

            if (!form.isValid()) {
                return false;
            }

            dialog.bussy();

            // Create new contact
            simpleService.createContact(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    form.getForm().reset();
                    dialog.close();

                    Simplereg.controller.Person.refreshPage();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        },

        updateContactFromDialog: function(source) {
            var dialog = Ext.getCmp("ContactUpdate"),
                form = dialog.down("form");

            if (!form.isValid()) {
                return false;
            }

            dialog.bussy();

            // Update contact
            simpleService.updateContact(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    form.getForm().reset();
                    dialog.close();

                    Simplereg.controller.Person.refreshPage();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        },

        deleteContactFromDialog: function(source) {
            var dialog = Ext.getCmp("ContactDelete");

            dialog.bussy();

            // Delete contact
            simpleService.deleteContact(source, function(result) {
                dialog.bussy(false);

                if (result.success) {
                    dialog.close();

                    Simplereg.controller.Person.refreshPage();
                }
                else {
                    Simplereg.controller.Person.markInvalidFields(form, result.errors);
                }
            });
        }
    },

    onPersonRegistryRender: function(component, eOpts) {
        // Set document title
        var view = component.getActiveTab(),
            title = view.title;

        document.title = title;
    },

    onPersonRegistryTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        // Set document title
        var title = newCard.title;

        document.title = title;
    },

    onRefreshPageClick: function(button, e, eOpts) {
        Simplereg.controller.Person.refreshPage();
    },

    onClosePageClick: function(button, e, eOpts) {
        var panel = Ext.getCmp("PersonRegistry"),
            view = panel.getActiveTab();

        // Close view
        if (view && view.closable) {
            view.close();
        }
    },

    onResetDialogClick: function(button, e, eOpts) {
        var dialog = button.up("window"),
            form = dialog.down("form");

        form.getForm().reset();
    },

    onSubmitDialogClick: function(button, e, eOpts) {
        var dialog = button.up("window"),
            form = dialog.down("form");

        form.submit();
    },

    onCancelDialogClick: function(button, e, eOpts) {
        var dialog = button.up("window");

        dialog.close();
    },

    onPersonSearchClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("PersonSearch");

        dialog.show();
    },

    onPersonCreateClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("PersonCreate");

        dialog.show();
    },

    onPersonUpdateClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("PersonUpdate"),
            form = dialog.down("form"),
            record = button.up("personview").record;

        if (!record) {
            return false;
        }

        // Fill form
        form.loadRecord(record);

        dialog.show();
    },

    onPersonDeleteClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("PersonDelete"),
            form = dialog.down("form"),
            record = button.up("personview").record;

        if (!record) {
            return false;
        }

        // Fill form
        form.loadRecord(record);

        dialog.show();
    },

    onSelectedPersonDeleteClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("PersonDelete"),
            form = dialog.down("form"),
            selection = button.up("personselect").down("#person_list").getSelectionModel().getSelection(),
            record = selection ? selection[0] : null;

        if (!record) {
            return false;
        }

        // Fill form
        form.loadRecord(record);

        dialog.show();
    },

    onPersonOpenClick: function(button, e, eOpts) {
        var selection = button.up("personselect").down("#person_list").getSelectionModel().getSelection(),
            record = selection ? selection[0] : null;

        if (!record) {
            return false;
        }

        // Open selected person
        Simplereg.controller.Person.openPersonView(record.data.id);
    },

    onPersonListDblClick: function(dataview, record, item, index, e, eOpts) {
        Simplereg.controller.Person.openPersonView(record.data.id);
    },

    onPersonListSelectionchange: function(model, selected, eOpts) {
        var panel = Ext.getCmp("PersonSelect"),
            disable = !selected.length;

        // Toggle enable/disable
        panel.down("#selected_person_delete").setDisabled(disable);
        panel.down("#person_open").setDisabled(disable)
    },

    onContactCreateClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("ContactCreate"),
            form = dialog.down("form"),
            record = button.up("personview").record;

        if (!record) {
            return false;
        }

        form.record = record;

        // Fill form
        form.down("#person_id").setValue(record.data.id);

        dialog.show();
    },

    onSelectedContactUpdateClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("ContactUpdate"),
            form = dialog.down("form"),
            selection = button.up("contactlist").down("#contact_list").getSelectionModel().getSelection(),
            record = selection ? selection[0] : null;

        if (!record) {
            return false;
        }

        // Fill form
        form.loadRecord(record);

        dialog.show();
    },

    onSelectedContactDeleteClick: function(button, e, eOpts) {
        var dialog = Ext.getCmp("ContactDelete"),
            form = dialog.down("form"),
            selection = button.up("contactlist").down("#contact_list").getSelectionModel().getSelection(),
            record = selection ? selection[0] : null;

        if (!record) {
            return false;
        }

        // Fill form
        form.loadRecord(record);

        dialog.show();
    },

    onContactListItemDblClick: function(dataview, record, item, index, e, eOpts) {

    },

    onContactListSelectionChange: function(model, selected, eOpts) {
        var panel = Ext.getCmp("PersonRegistry"),
            view = panel.getActiveTab(),
            grid = view.down("contactlist #contact_list"),
            disable = !selected.length;

        if (grid.getSelectionModel() != model) {
            return false;
        }

        // Toggle enable/disable
        view.down("#selected_contact_update").setDisabled(disable);
        view.down("#selected_contact_delete").setDisabled(disable);
    },

    init: function(application) {
        this.control({
            "#PersonRegistry": {
                render: this.onPersonRegistryRender,
                tabchange: this.onPersonRegistryTabChange
            },
            "#refresh_page": {
                click: this.onRefreshPageClick
            },
            "#close_page": {
                click: this.onClosePageClick
            },
            "#reset_dialog": {
                click: this.onResetDialogClick
            },
            "#submit_dialog": {
                click: this.onSubmitDialogClick
            },
            "#cancel_dialog": {
                click: this.onCancelDialogClick
            },
            "#person_search": {
                click: this.onPersonSearchClick
            },
            "#person_create": {
                click: this.onPersonCreateClick
            },
            "#person_update": {
                click: this.onPersonUpdateClick
            },
            "#person_delete": {
                click: this.onPersonDeleteClick
            },
            "#selected_person_delete": {
                click: this.onSelectedPersonDeleteClick
            },
            "#person_open": {
                click: this.onPersonOpenClick
            },
            "#person_list": {
                itemdblclick: this.onPersonListDblClick,
                selectionchange: this.onPersonListSelectionchange
            },
            "#contact_create": {
                click: this.onContactCreateClick
            },
            "#selected_contact_update": {
                click: this.onSelectedContactUpdateClick
            },
            "#selected_contact_delete": {
                click: this.onSelectedContactDeleteClick
            },
            "#contact_list": {
                itemdblclick: this.onContactListItemDblClick,
                selectionchange: this.onContactListSelectionChange
            }
        });
    }

});
