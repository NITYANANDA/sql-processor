/*
 * generated by Xtext
 */
package org.sqlproc.dsl.ui.contentassist;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.sqlproc.dsl.processorDsl.Artifacts;
import org.sqlproc.dsl.processorDsl.ColumnUsage;
import org.sqlproc.dsl.processorDsl.ConstantUsage;
import org.sqlproc.dsl.processorDsl.IdentifierUsage;
import org.sqlproc.dsl.processorDsl.MappingUsage;
import org.sqlproc.dsl.processorDsl.MetaStatement;
import org.sqlproc.dsl.processorDsl.PojoDefinition;
import org.sqlproc.dsl.processorDsl.ProcessorDslPackage;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class ProcessorDslProposalProvider extends AbstractProcessorDslProposalProvider {
    public void completeColumn_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        MetaStatement metaStatement = EcoreUtil2.getContainerOfType(model, MetaStatement.class);
        Artifacts artifacts = EcoreUtil2.getContainerOfType(metaStatement, Artifacts.class);

        IScope scope = getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__USAGES);
        PojoDefinition pojoDefinition = findPojo(artifacts.eResource().getResourceSet(), scope,
                ProcessorDslPackage.Literals.COLUMN_USAGE.getName(), metaStatement.getName());
        System.out.println("pojoDefinition=" + pojoDefinition);
        System.out.println("pojoDefinition=" + pojoDefinition.getClass_());
        // TODO zjistit vsechny atributy tridy pojoDefinition.getClass_() a iterovat neco jako
        String proposal = getValueConverter().toString("xxx", "IDENT"); // xxx je jmeno atributu
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

    protected PojoDefinition findPojo(ResourceSet resourceSet, IScope scope, String typeName, String name) {
        Iterable<IEObjectDescription> iterable = scope.getAllElements();
        for (Iterator<IEObjectDescription> iter = iterable.iterator(); iter.hasNext();) {
            IEObjectDescription description = iter.next();
            if (typeName.equals(description.getEClass().getName())) {
                ColumnUsage usage = (ColumnUsage) resourceSet.getEObject(description.getEObjectURI(), true);
                if (name.equals(getUsageName(usage))) {
                    // return ((PojoUsage) description.getEObjectOrProxy()).getPojo(); // neni inicializovan!
                    return usage.getPojo();
                }
            }
        }
        return null;
    }

    protected String getUsageName(EObject pojoUsage) {
        if (pojoUsage instanceof ColumnUsage)
            return ((ColumnUsage) pojoUsage).getStatement().getName();
        if (pojoUsage instanceof IdentifierUsage)
            return ((IdentifierUsage) pojoUsage).getStatement().getName();
        if (pojoUsage instanceof ConstantUsage)
            return ((ConstantUsage) pojoUsage).getStatement().getName();
        if (pojoUsage instanceof MappingUsage)
            return ((MappingUsage) pojoUsage).getStatement().getName();
        return "";
    }
}
