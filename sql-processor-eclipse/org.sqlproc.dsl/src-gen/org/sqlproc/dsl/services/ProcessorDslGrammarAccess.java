/*
* generated by Xtext
*/

package org.sqlproc.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ProcessorDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArtifactsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifacts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cFeaturesOptionalFeatureParserRuleCall_1_0_0_0 = (RuleCall)cFeaturesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_1_0_0 = (RuleCall)cStatementsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cMappingsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMappingsMappingRuleParserRuleCall_1_2_0_0 = (RuleCall)cMappingsAssignment_1_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cPojosAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cPojosPojoDefinitionParserRuleCall_1_3_0_0 = (RuleCall)cPojosAssignment_1_3_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cUsagesAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cUsagesPojoUsageParserRuleCall_1_4_0_0 = (RuleCall)cUsagesAssignment_1_4_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cPropertiesAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_5_0_0 = (RuleCall)cPropertiesAssignment_1_5_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Assignment cTablesAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final RuleCall cTablesTableDefinitionParserRuleCall_1_6_0_0 = (RuleCall)cTablesAssignment_1_6_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_6_1 = (RuleCall)cGroup_1_6.eContents().get(1);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Assignment cTableUsagesAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cTableUsagesTableUsageParserRuleCall_1_7_0_0 = (RuleCall)cTableUsagesAssignment_1_7_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_7_1 = (RuleCall)cGroup_1_7.eContents().get(1);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Assignment cPojoPackagesAssignment_1_8_0 = (Assignment)cGroup_1_8.eContents().get(0);
		private final RuleCall cPojoPackagesPackageDeclarationParserRuleCall_1_8_0_0 = (RuleCall)cPojoPackagesAssignment_1_8_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_8_1 = (RuleCall)cGroup_1_8.eContents().get(1);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Assignment cUsagesExtAssignment_1_9_0 = (Assignment)cGroup_1_9.eContents().get(0);
		private final RuleCall cUsagesExtPojoUsageExtParserRuleCall_1_9_0_0 = (RuleCall)cUsagesExtAssignment_1_9_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_9_1 = (RuleCall)cGroup_1_9.eContents().get(1);
		
		//Artifacts:
		//	WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS* | pojos+=PojoDefinition
		//	WS* | usages+=PojoUsage WS* | properties+=Property WS* | tables+=TableDefinition WS* | tableUsages+=TableUsage WS* |
		//	pojoPackages+=PackageDeclaration WS* | usagesExt+=PojoUsageExt WS*)+;
		public ParserRule getRule() { return rule; }

		//WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS* | pojos+=PojoDefinition
		//WS* | usages+=PojoUsage WS* | properties+=Property WS* | tables+=TableDefinition WS* | tableUsages+=TableUsage WS* |
		//pojoPackages+=PackageDeclaration WS* | usagesExt+=PojoUsageExt WS*)+
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//(features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS* | pojos+=PojoDefinition WS* |
		//usages+=PojoUsage WS* | properties+=Property WS* | tables+=TableDefinition WS* | tableUsages+=TableUsage WS* |
		//pojoPackages+=PackageDeclaration WS* | usagesExt+=PojoUsageExt WS*)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//features+=OptionalFeature WS*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//features+=OptionalFeature
		public Assignment getFeaturesAssignment_1_0_0() { return cFeaturesAssignment_1_0_0; }

		//OptionalFeature
		public RuleCall getFeaturesOptionalFeatureParserRuleCall_1_0_0_0() { return cFeaturesOptionalFeatureParserRuleCall_1_0_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_0_1() { return cWSTerminalRuleCall_1_0_1; }

		//statements+=MetaStatement WS*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_1_0() { return cStatementsAssignment_1_1_0; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_1_0_0() { return cStatementsMetaStatementParserRuleCall_1_1_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_1_1() { return cWSTerminalRuleCall_1_1_1; }

		//mappings+=MappingRule WS*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//mappings+=MappingRule
		public Assignment getMappingsAssignment_1_2_0() { return cMappingsAssignment_1_2_0; }

		//MappingRule
		public RuleCall getMappingsMappingRuleParserRuleCall_1_2_0_0() { return cMappingsMappingRuleParserRuleCall_1_2_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_2_1() { return cWSTerminalRuleCall_1_2_1; }

		//pojos+=PojoDefinition WS*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//pojos+=PojoDefinition
		public Assignment getPojosAssignment_1_3_0() { return cPojosAssignment_1_3_0; }

		//PojoDefinition
		public RuleCall getPojosPojoDefinitionParserRuleCall_1_3_0_0() { return cPojosPojoDefinitionParserRuleCall_1_3_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_3_1() { return cWSTerminalRuleCall_1_3_1; }

		//usages+=PojoUsage WS*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//usages+=PojoUsage
		public Assignment getUsagesAssignment_1_4_0() { return cUsagesAssignment_1_4_0; }

		//PojoUsage
		public RuleCall getUsagesPojoUsageParserRuleCall_1_4_0_0() { return cUsagesPojoUsageParserRuleCall_1_4_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_4_1() { return cWSTerminalRuleCall_1_4_1; }

		//properties+=Property WS*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//properties+=Property
		public Assignment getPropertiesAssignment_1_5_0() { return cPropertiesAssignment_1_5_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_5_0_0() { return cPropertiesPropertyParserRuleCall_1_5_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_5_1() { return cWSTerminalRuleCall_1_5_1; }

		//tables+=TableDefinition WS*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//tables+=TableDefinition
		public Assignment getTablesAssignment_1_6_0() { return cTablesAssignment_1_6_0; }

		//TableDefinition
		public RuleCall getTablesTableDefinitionParserRuleCall_1_6_0_0() { return cTablesTableDefinitionParserRuleCall_1_6_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_6_1() { return cWSTerminalRuleCall_1_6_1; }

		//tableUsages+=TableUsage WS*
		public Group getGroup_1_7() { return cGroup_1_7; }

		//tableUsages+=TableUsage
		public Assignment getTableUsagesAssignment_1_7_0() { return cTableUsagesAssignment_1_7_0; }

		//TableUsage
		public RuleCall getTableUsagesTableUsageParserRuleCall_1_7_0_0() { return cTableUsagesTableUsageParserRuleCall_1_7_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_7_1() { return cWSTerminalRuleCall_1_7_1; }

		//pojoPackages+=PackageDeclaration WS*
		public Group getGroup_1_8() { return cGroup_1_8; }

		//pojoPackages+=PackageDeclaration
		public Assignment getPojoPackagesAssignment_1_8_0() { return cPojoPackagesAssignment_1_8_0; }

		//PackageDeclaration
		public RuleCall getPojoPackagesPackageDeclarationParserRuleCall_1_8_0_0() { return cPojoPackagesPackageDeclarationParserRuleCall_1_8_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_8_1() { return cWSTerminalRuleCall_1_8_1; }

		//usagesExt+=PojoUsageExt WS*
		public Group getGroup_1_9() { return cGroup_1_9; }

		//usagesExt+=PojoUsageExt
		public Assignment getUsagesExtAssignment_1_9_0() { return cUsagesExtAssignment_1_9_0; }

		//PojoUsageExt
		public RuleCall getUsagesExtPojoUsageExtParserRuleCall_1_9_0_0() { return cUsagesExtPojoUsageExtParserRuleCall_1_9_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_9_1() { return cWSTerminalRuleCall_1_9_1; }
	}

	public class SqlTypeAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlTypeAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNameIDENTTerminalRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeNUMBERTerminalRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePojoTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//SqlTypeAssignement:
		//	typeName=IDENT (LPAREN size=NUMBER RPAREN)? "->" type=PojoType;
		public ParserRule getRule() { return rule; }

		//typeName=IDENT (LPAREN size=NUMBER RPAREN)? "->" type=PojoType
		public Group getGroup() { return cGroup; }

		//typeName=IDENT
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//IDENT
		public RuleCall getTypeNameIDENTTerminalRuleCall_0_0() { return cTypeNameIDENTTerminalRuleCall_0_0; }

		//(LPAREN size=NUMBER RPAREN)?
		public Group getGroup_1() { return cGroup_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }

		//size=NUMBER
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }

		//NUMBER
		public RuleCall getSizeNUMBERTerminalRuleCall_1_1_0() { return cSizeNUMBERTerminalRuleCall_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//type=PojoType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//PojoType
		public RuleCall getTypePojoTypeParserRuleCall_3_0() { return cTypePojoTypeParserRuleCall_3_0; }
	}

	public class ColumnTypeAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnTypeAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cDbColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePojoTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ColumnTypeAssignement:
		//	dbColumn=IDENT "->" type=PojoType;
		public ParserRule getRule() { return rule; }

		//dbColumn=IDENT "->" type=PojoType
		public Group getGroup() { return cGroup; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_0() { return cDbColumnAssignment_0; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_0_0() { return cDbColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//type=PojoType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//PojoType
		public RuleCall getTypePojoTypeParserRuleCall_2_0() { return cTypePojoTypeParserRuleCall_2_0; }
	}

	public class ShowColumnTypeAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowColumnTypeAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cDbColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePropertyValueParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ShowColumnTypeAssignement:
		//	dbColumn=IDENT "->" type=PropertyValue;
		public ParserRule getRule() { return rule; }

		//dbColumn=IDENT "->" type=PropertyValue
		public Group getGroup() { return cGroup; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_0() { return cDbColumnAssignment_0; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_0_0() { return cDbColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//type=PropertyValue
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//PropertyValue
		public RuleCall getTypePropertyValueParserRuleCall_2_0() { return cTypePropertyValueParserRuleCall_2_0; }
	}

	public class TableAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbTableIDENTTerminalRuleCall_0_0 = (RuleCall)cDbTableAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//TableAssignement:
		//	dbTable=IDENT "->" newName=IDENT;
		public ParserRule getRule() { return rule; }

		//dbTable=IDENT "->" newName=IDENT
		public Group getGroup() { return cGroup; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_0() { return cDbTableAssignment_0; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_0_0() { return cDbTableIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//newName=IDENT
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//IDENT
		public RuleCall getNewNameIDENTTerminalRuleCall_2_0() { return cNewNameIDENTTerminalRuleCall_2_0; }
	}

	public class JoinTableAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinTableAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbTableIDENTTerminalRuleCall_0_0 = (RuleCall)cDbTableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDbTablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDbTablesIDENTTerminalRuleCall_1_1_0 = (RuleCall)cDbTablesAssignment_1_1.eContents().get(0);
		
		//JoinTableAssignement:
		//	dbTable=IDENT ("->" dbTables+=IDENT)+;
		public ParserRule getRule() { return rule; }

		//dbTable=IDENT ("->" dbTables+=IDENT)+
		public Group getGroup() { return cGroup; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_0() { return cDbTableAssignment_0; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_0_0() { return cDbTableIDENTTerminalRuleCall_0_0; }

		//("->" dbTables+=IDENT)+
		public Group getGroup_1() { return cGroup_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }

		//dbTables+=IDENT
		public Assignment getDbTablesAssignment_1_1() { return cDbTablesAssignment_1_1; }

		//IDENT
		public RuleCall getDbTablesIDENTTerminalRuleCall_1_1_0() { return cDbTablesIDENTTerminalRuleCall_1_1_0; }
	}

	public class ColumnAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cDbColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//ColumnAssignement:
		//	dbColumn=IDENT "->" newName=IDENT;
		public ParserRule getRule() { return rule; }

		//dbColumn=IDENT "->" newName=IDENT
		public Group getGroup() { return cGroup; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_0() { return cDbColumnAssignment_0; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_0_0() { return cDbColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//newName=IDENT
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//IDENT
		public RuleCall getNewNameIDENTTerminalRuleCall_2_0() { return cNewNameIDENTTerminalRuleCall_2_0; }
	}

	public class ImportAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cDbColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPkTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPkTableIDENTTerminalRuleCall_2_0 = (RuleCall)cPkTableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPkColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPkColumnIDENTTerminalRuleCall_3_1_0 = (RuleCall)cPkColumnAssignment_3_1.eContents().get(0);
		
		//ImportAssignement:
		//	dbColumn=IDENT "->" pkTable=IDENT ("->" pkColumn=IDENT)?;
		public ParserRule getRule() { return rule; }

		//dbColumn=IDENT "->" pkTable=IDENT ("->" pkColumn=IDENT)?
		public Group getGroup() { return cGroup; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_0() { return cDbColumnAssignment_0; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_0_0() { return cDbColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//pkTable=IDENT
		public Assignment getPkTableAssignment_2() { return cPkTableAssignment_2; }

		//IDENT
		public RuleCall getPkTableIDENTTerminalRuleCall_2_0() { return cPkTableIDENTTerminalRuleCall_2_0; }

		//("->" pkColumn=IDENT)?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//pkColumn=IDENT
		public Assignment getPkColumnAssignment_3_1() { return cPkColumnAssignment_3_1; }

		//IDENT
		public RuleCall getPkColumnIDENTTerminalRuleCall_3_1_0() { return cPkColumnIDENTTerminalRuleCall_3_1_0; }
	}

	public class ExportAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExportAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cDbColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFkTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFkTableIDENTTerminalRuleCall_2_0 = (RuleCall)cFkTableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFkColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFkColumnIDENTTerminalRuleCall_3_1_0 = (RuleCall)cFkColumnAssignment_3_1.eContents().get(0);
		
		//ExportAssignement:
		//	dbColumn=IDENT "->" fkTable=IDENT ("->" fkColumn=IDENT)?;
		public ParserRule getRule() { return rule; }

		//dbColumn=IDENT "->" fkTable=IDENT ("->" fkColumn=IDENT)?
		public Group getGroup() { return cGroup; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_0() { return cDbColumnAssignment_0; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_0_0() { return cDbColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//fkTable=IDENT
		public Assignment getFkTableAssignment_2() { return cFkTableAssignment_2; }

		//IDENT
		public RuleCall getFkTableIDENTTerminalRuleCall_2_0() { return cFkTableIDENTTerminalRuleCall_2_0; }

		//("->" fkColumn=IDENT)?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//fkColumn=IDENT
		public Assignment getFkColumnAssignment_3_1() { return cFkColumnAssignment_3_1; }

		//IDENT
		public RuleCall getFkColumnIDENTTerminalRuleCall_3_1_0() { return cFkColumnIDENTTerminalRuleCall_3_1_0; }
	}

	public class InheritanceAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritanceAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiscriminatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiscriminatorIDENTTerminalRuleCall_0_0 = (RuleCall)cDiscriminatorAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDbTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_2_0 = (RuleCall)cDbTableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDbColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDbColumnsIDENTTerminalRuleCall_3_1_0 = (RuleCall)cDbColumnsAssignment_3_1.eContents().get(0);
		
		//InheritanceAssignement:
		//	discriminator=IDENT "->" dbTable=IDENT ("->" dbColumns+=IDENT)+;
		public ParserRule getRule() { return rule; }

		//discriminator=IDENT "->" dbTable=IDENT ("->" dbColumns+=IDENT)+
		public Group getGroup() { return cGroup; }

		//discriminator=IDENT
		public Assignment getDiscriminatorAssignment_0() { return cDiscriminatorAssignment_0; }

		//IDENT
		public RuleCall getDiscriminatorIDENTTerminalRuleCall_0_0() { return cDiscriminatorIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_2() { return cDbTableAssignment_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_2_0() { return cDbTableIDENTTerminalRuleCall_2_0; }

		//("->" dbColumns+=IDENT)+
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//dbColumns+=IDENT
		public Assignment getDbColumnsAssignment_3_1() { return cDbColumnsAssignment_3_1; }

		//IDENT
		public RuleCall getDbColumnsIDENTTerminalRuleCall_3_1_0() { return cDbColumnsIDENTTerminalRuleCall_3_1_0; }
	}

	public class ManyToManyAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyToManyAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPkColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPkColumnIDENTTerminalRuleCall_0_0 = (RuleCall)cPkColumnAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPkTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPkTableIDENTTerminalRuleCall_2_0 = (RuleCall)cPkTableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFkColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFkColumnIDENTTerminalRuleCall_3_1_0 = (RuleCall)cFkColumnAssignment_3_1.eContents().get(0);
		
		//ManyToManyAssignement:
		//	pkColumn=IDENT "->" pkTable=IDENT ("->" fkColumn=IDENT)?;
		public ParserRule getRule() { return rule; }

		//pkColumn=IDENT "->" pkTable=IDENT ("->" fkColumn=IDENT)?
		public Group getGroup() { return cGroup; }

		//pkColumn=IDENT
		public Assignment getPkColumnAssignment_0() { return cPkColumnAssignment_0; }

		//IDENT
		public RuleCall getPkColumnIDENTTerminalRuleCall_0_0() { return cPkColumnIDENTTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//pkTable=IDENT
		public Assignment getPkTableAssignment_2() { return cPkTableAssignment_2; }

		//IDENT
		public RuleCall getPkTableIDENTTerminalRuleCall_2_0() { return cPkTableIDENTTerminalRuleCall_2_0; }

		//("->" fkColumn=IDENT)?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//fkColumn=IDENT
		public Assignment getFkColumnAssignment_3_1() { return cFkColumnAssignment_3_1; }

		//IDENT
		public RuleCall getFkColumnIDENTTerminalRuleCall_3_1_0() { return cFkColumnIDENTTerminalRuleCall_3_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameResolvePojoOnKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNameResolvePojoOffKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cNameDatabaseKeyword_0_2_0_0 = (Keyword)cNameAssignment_0_2_0.eContents().get(0);
		private final Assignment cDatabaseAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDatabaseDatabasePropertyParserRuleCall_0_2_1_0 = (RuleCall)cDatabaseAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Assignment cNameAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final Keyword cNamePojogenKeyword_0_3_0_0 = (Keyword)cNameAssignment_0_3_0.eContents().get(0);
		private final Assignment cPojogenAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cPojogenPojogenPropertyParserRuleCall_0_3_1_0 = (RuleCall)cPojogenAssignment_0_3_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Property:
		//	(name="resolve-pojo-on" | name="resolve-pojo-off" | name="database-" database=DatabaseProperty | name="pojogen-"
		//	pojogen=PojogenProperty) SEMICOLON;
		public ParserRule getRule() { return rule; }

		//(name="resolve-pojo-on" | name="resolve-pojo-off" | name="database-" database=DatabaseProperty | name="pojogen-"
		//pojogen=PojogenProperty) SEMICOLON
		public Group getGroup() { return cGroup; }

		//name="resolve-pojo-on" | name="resolve-pojo-off" | name="database-" database=DatabaseProperty | name="pojogen-"
		//pojogen=PojogenProperty
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="resolve-pojo-on"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"resolve-pojo-on"
		public Keyword getNameResolvePojoOnKeyword_0_0_0() { return cNameResolvePojoOnKeyword_0_0_0; }

		//name="resolve-pojo-off"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"resolve-pojo-off"
		public Keyword getNameResolvePojoOffKeyword_0_1_0() { return cNameResolvePojoOffKeyword_0_1_0; }

		//name="database-" database=DatabaseProperty
		public Group getGroup_0_2() { return cGroup_0_2; }

		//name="database-"
		public Assignment getNameAssignment_0_2_0() { return cNameAssignment_0_2_0; }

		//"database-"
		public Keyword getNameDatabaseKeyword_0_2_0_0() { return cNameDatabaseKeyword_0_2_0_0; }

		//database=DatabaseProperty
		public Assignment getDatabaseAssignment_0_2_1() { return cDatabaseAssignment_0_2_1; }

		//DatabaseProperty
		public RuleCall getDatabaseDatabasePropertyParserRuleCall_0_2_1_0() { return cDatabaseDatabasePropertyParserRuleCall_0_2_1_0; }

		//name="pojogen-" pojogen=PojogenProperty
		public Group getGroup_0_3() { return cGroup_0_3; }

		//name="pojogen-"
		public Assignment getNameAssignment_0_3_0() { return cNameAssignment_0_3_0; }

		//"pojogen-"
		public Keyword getNamePojogenKeyword_0_3_0_0() { return cNamePojogenKeyword_0_3_0_0; }

		//pojogen=PojogenProperty
		public Assignment getPojogenAssignment_0_3_1() { return cPojogenAssignment_0_3_1; }

		//PojogenProperty
		public RuleCall getPojogenPojogenPropertyParserRuleCall_0_3_1_0() { return cPojogenPojogenPropertyParserRuleCall_0_3_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}

	public class DatabasePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameIsOnlineKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameIsOfflineKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameHasUrlKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDbUrlAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDbUrlPropertyValueParserRuleCall_2_2_0 = (RuleCall)cDbUrlAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNameLoginUsernameKeyword_3_0_0 = (Keyword)cNameAssignment_3_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cDbUsernameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDbUsernamePropertyValueParserRuleCall_3_2_0 = (RuleCall)cDbUsernameAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNameLoginPasswordKeyword_4_0_0 = (Keyword)cNameAssignment_4_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cDbPasswordAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDbPasswordPropertyValueParserRuleCall_4_2_0 = (RuleCall)cDbPasswordAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cNameActiveSchemaKeyword_5_0_0 = (Keyword)cNameAssignment_5_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cDbSchemaAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDbSchemaPropertyValueParserRuleCall_5_2_0 = (RuleCall)cDbSchemaAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNameAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cNameJdbcDriverKeyword_6_0_0 = (Keyword)cNameAssignment_6_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cDbDriverAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDbDriverPropertyValueParserRuleCall_6_2_0 = (RuleCall)cDbDriverAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cNameAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cNameDdlCreateKeyword_7_0_0 = (Keyword)cNameAssignment_7_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cDbExecuteBeforeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDbExecuteBeforePropertyValueParserRuleCall_7_2_0 = (RuleCall)cDbExecuteBeforeAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cNameAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cNameDdlDropKeyword_8_0_0 = (Keyword)cNameAssignment_8_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cDbExecuteAfterAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDbExecuteAfterPropertyValueParserRuleCall_8_2_0 = (RuleCall)cDbExecuteAfterAssignment_8_2.eContents().get(0);
		
		//DatabaseProperty:
		//	name="is-online" | name="is-offline" | name="has-url" WS+ dbUrl=PropertyValue | name="login-username" WS+
		//	dbUsername=PropertyValue | name="login-password" WS+ dbPassword=PropertyValue | name="active-schema" WS+
		//	dbSchema=PropertyValue | name="jdbc-driver" WS+ dbDriver=PropertyValue | name="ddl-create" WS+
		//	dbExecuteBefore=PropertyValue | name="ddl-drop" WS+ dbExecuteAfter=PropertyValue;
		public ParserRule getRule() { return rule; }

		//name="is-online" | name="is-offline" | name="has-url" WS+ dbUrl=PropertyValue | name="login-username" WS+
		//dbUsername=PropertyValue | name="login-password" WS+ dbPassword=PropertyValue | name="active-schema" WS+
		//dbSchema=PropertyValue | name="jdbc-driver" WS+ dbDriver=PropertyValue | name="ddl-create" WS+
		//dbExecuteBefore=PropertyValue | name="ddl-drop" WS+ dbExecuteAfter=PropertyValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="is-online"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"is-online"
		public Keyword getNameIsOnlineKeyword_0_0() { return cNameIsOnlineKeyword_0_0; }

		//name="is-offline"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"is-offline"
		public Keyword getNameIsOfflineKeyword_1_0() { return cNameIsOfflineKeyword_1_0; }

		//name="has-url" WS+ dbUrl=PropertyValue
		public Group getGroup_2() { return cGroup_2; }

		//name="has-url"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"has-url"
		public Keyword getNameHasUrlKeyword_2_0_0() { return cNameHasUrlKeyword_2_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_2_1() { return cWSTerminalRuleCall_2_1; }

		//dbUrl=PropertyValue
		public Assignment getDbUrlAssignment_2_2() { return cDbUrlAssignment_2_2; }

		//PropertyValue
		public RuleCall getDbUrlPropertyValueParserRuleCall_2_2_0() { return cDbUrlPropertyValueParserRuleCall_2_2_0; }

		//name="login-username" WS+ dbUsername=PropertyValue
		public Group getGroup_3() { return cGroup_3; }

		//name="login-username"
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//"login-username"
		public Keyword getNameLoginUsernameKeyword_3_0_0() { return cNameLoginUsernameKeyword_3_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }

		//dbUsername=PropertyValue
		public Assignment getDbUsernameAssignment_3_2() { return cDbUsernameAssignment_3_2; }

		//PropertyValue
		public RuleCall getDbUsernamePropertyValueParserRuleCall_3_2_0() { return cDbUsernamePropertyValueParserRuleCall_3_2_0; }

		//name="login-password" WS+ dbPassword=PropertyValue
		public Group getGroup_4() { return cGroup_4; }

		//name="login-password"
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//"login-password"
		public Keyword getNameLoginPasswordKeyword_4_0_0() { return cNameLoginPasswordKeyword_4_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_4_1() { return cWSTerminalRuleCall_4_1; }

		//dbPassword=PropertyValue
		public Assignment getDbPasswordAssignment_4_2() { return cDbPasswordAssignment_4_2; }

		//PropertyValue
		public RuleCall getDbPasswordPropertyValueParserRuleCall_4_2_0() { return cDbPasswordPropertyValueParserRuleCall_4_2_0; }

		//name="active-schema" WS+ dbSchema=PropertyValue
		public Group getGroup_5() { return cGroup_5; }

		//name="active-schema"
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//"active-schema"
		public Keyword getNameActiveSchemaKeyword_5_0_0() { return cNameActiveSchemaKeyword_5_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_5_1() { return cWSTerminalRuleCall_5_1; }

		//dbSchema=PropertyValue
		public Assignment getDbSchemaAssignment_5_2() { return cDbSchemaAssignment_5_2; }

		//PropertyValue
		public RuleCall getDbSchemaPropertyValueParserRuleCall_5_2_0() { return cDbSchemaPropertyValueParserRuleCall_5_2_0; }

		//name="jdbc-driver" WS+ dbDriver=PropertyValue
		public Group getGroup_6() { return cGroup_6; }

		//name="jdbc-driver"
		public Assignment getNameAssignment_6_0() { return cNameAssignment_6_0; }

		//"jdbc-driver"
		public Keyword getNameJdbcDriverKeyword_6_0_0() { return cNameJdbcDriverKeyword_6_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_6_1() { return cWSTerminalRuleCall_6_1; }

		//dbDriver=PropertyValue
		public Assignment getDbDriverAssignment_6_2() { return cDbDriverAssignment_6_2; }

		//PropertyValue
		public RuleCall getDbDriverPropertyValueParserRuleCall_6_2_0() { return cDbDriverPropertyValueParserRuleCall_6_2_0; }

		//name="ddl-create" WS+ dbExecuteBefore=PropertyValue
		public Group getGroup_7() { return cGroup_7; }

		//name="ddl-create"
		public Assignment getNameAssignment_7_0() { return cNameAssignment_7_0; }

		//"ddl-create"
		public Keyword getNameDdlCreateKeyword_7_0_0() { return cNameDdlCreateKeyword_7_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_7_1() { return cWSTerminalRuleCall_7_1; }

		//dbExecuteBefore=PropertyValue
		public Assignment getDbExecuteBeforeAssignment_7_2() { return cDbExecuteBeforeAssignment_7_2; }

		//PropertyValue
		public RuleCall getDbExecuteBeforePropertyValueParserRuleCall_7_2_0() { return cDbExecuteBeforePropertyValueParserRuleCall_7_2_0; }

		//name="ddl-drop" WS+ dbExecuteAfter=PropertyValue
		public Group getGroup_8() { return cGroup_8; }

		//name="ddl-drop"
		public Assignment getNameAssignment_8_0() { return cNameAssignment_8_0; }

		//"ddl-drop"
		public Keyword getNameDdlDropKeyword_8_0_0() { return cNameDdlDropKeyword_8_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_8_1() { return cWSTerminalRuleCall_8_1; }

		//dbExecuteAfter=PropertyValue
		public Assignment getDbExecuteAfterAssignment_8_2() { return cDbExecuteAfterAssignment_8_2; }

		//PropertyValue
		public RuleCall getDbExecuteAfterPropertyValueParserRuleCall_8_2_0() { return cDbExecuteAfterPropertyValueParserRuleCall_8_2_0; }
	}

	public class PojogenPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojogenProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameTypesSqltypesKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cSqlTypesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSqlTypesSqlTypeAssignementParserRuleCall_0_1_1_0 = (RuleCall)cSqlTypesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameTypesInTableKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cDbTableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_1_2_0 = (RuleCall)cDbTableAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cSqlTypesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cSqlTypesSqlTypeAssignementParserRuleCall_1_3_1_0 = (RuleCall)cSqlTypesAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameTypesForColumnsKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDbTableAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_2_2_0 = (RuleCall)cDbTableAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final Assignment cColumnTypesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cColumnTypesColumnTypeAssignementParserRuleCall_2_3_1_0 = (RuleCall)cColumnTypesAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNameShowTypeForColumnKeyword_3_0_0 = (Keyword)cNameAssignment_3_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cDbTableAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_3_2_0 = (RuleCall)cDbTableAssignment_3_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Assignment cColumnTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cColumnTypeShowColumnTypeAssignementParserRuleCall_3_4_0 = (RuleCall)cColumnTypeAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNameIgnoreTablesKeyword_4_0_0 = (Keyword)cNameAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final Assignment cDbTablesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDbTablesIDENTTerminalRuleCall_4_1_1_0 = (RuleCall)cDbTablesAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cNameOnlyTablesKeyword_5_0_0 = (Keyword)cNameAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Assignment cDbTablesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDbTablesIDENTTerminalRuleCall_5_1_1_0 = (RuleCall)cDbTablesAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNameAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cNameJoinTablesKeyword_6_0_0 = (Keyword)cNameAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_6_1_0 = (RuleCall)cGroup_6_1.eContents().get(0);
		private final Assignment cJoinTablesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cJoinTablesJoinTableAssignementParserRuleCall_6_1_1_0 = (RuleCall)cJoinTablesAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cNameAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cNameIgnoreColumnsKeyword_7_0_0 = (Keyword)cNameAssignment_7_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cDbTableAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_7_2_0 = (RuleCall)cDbTableAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_7_3_0 = (RuleCall)cGroup_7_3.eContents().get(0);
		private final Assignment cDbColumnsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cDbColumnsIDENTTerminalRuleCall_7_3_1_0 = (RuleCall)cDbColumnsAssignment_7_3_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cNameAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cNameRequiredColumnsKeyword_8_0_0 = (Keyword)cNameAssignment_8_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cDbTableAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_8_2_0 = (RuleCall)cDbTableAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_8_3_0 = (RuleCall)cGroup_8_3.eContents().get(0);
		private final Assignment cDbColumnsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cDbColumnsIDENTTerminalRuleCall_8_3_1_0 = (RuleCall)cDbColumnsAssignment_8_3_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cNameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cNameNotRequiredColumnsKeyword_9_0_0 = (Keyword)cNameAssignment_9_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Assignment cDbTableAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_9_2_0 = (RuleCall)cDbTableAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_9_3_0 = (RuleCall)cGroup_9_3.eContents().get(0);
		private final Assignment cDbColumnsAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cDbColumnsIDENTTerminalRuleCall_9_3_1_0 = (RuleCall)cDbColumnsAssignment_9_3_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cNameAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cNameCreateColumnsKeyword_10_0_0 = (Keyword)cNameAssignment_10_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cDbTableAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_10_2_0 = (RuleCall)cDbTableAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_10_3_0 = (RuleCall)cGroup_10_3.eContents().get(0);
		private final Assignment cColumnTypesAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cColumnTypesColumnTypeAssignementParserRuleCall_10_3_1_0 = (RuleCall)cColumnTypesAssignment_10_3_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cNameAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cNameRenameTablesKeyword_11_0_0 = (Keyword)cNameAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_11_1_0 = (RuleCall)cGroup_11_1.eContents().get(0);
		private final Assignment cTablesAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cTablesTableAssignementParserRuleCall_11_1_1_0 = (RuleCall)cTablesAssignment_11_1_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNameAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cNameRenameColumnsKeyword_12_0_0 = (Keyword)cNameAssignment_12_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Assignment cDbTableAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_12_2_0 = (RuleCall)cDbTableAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_12_3_0 = (RuleCall)cGroup_12_3.eContents().get(0);
		private final Assignment cColumnsAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cColumnsColumnAssignementParserRuleCall_12_3_1_0 = (RuleCall)cColumnsAssignment_12_3_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cNameAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cNameIgnoreOneToManyKeyword_13_0_0 = (Keyword)cNameAssignment_13_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Assignment cDbTableAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_13_2_0 = (RuleCall)cDbTableAssignment_13_2.eContents().get(0);
		private final Group cGroup_13_3 = (Group)cGroup_13.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_13_3_0 = (RuleCall)cGroup_13_3.eContents().get(0);
		private final Assignment cExportsAssignment_13_3_1 = (Assignment)cGroup_13_3.eContents().get(1);
		private final RuleCall cExportsExportAssignementParserRuleCall_13_3_1_0 = (RuleCall)cExportsAssignment_13_3_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Assignment cNameAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final Keyword cNameIgnoreManyToOneKeyword_14_0_0 = (Keyword)cNameAssignment_14_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_14_1 = (RuleCall)cGroup_14.eContents().get(1);
		private final Assignment cDbTableAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_14_2_0 = (RuleCall)cDbTableAssignment_14_2.eContents().get(0);
		private final Group cGroup_14_3 = (Group)cGroup_14.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_14_3_0 = (RuleCall)cGroup_14_3.eContents().get(0);
		private final Assignment cImportsAssignment_14_3_1 = (Assignment)cGroup_14_3.eContents().get(1);
		private final RuleCall cImportsImportAssignementParserRuleCall_14_3_1_0 = (RuleCall)cImportsAssignment_14_3_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Assignment cNameAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final Keyword cNameInheritManyToOneKeyword_15_0_0 = (Keyword)cNameAssignment_15_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_1 = (RuleCall)cGroup_15.eContents().get(1);
		private final Assignment cDbTableAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_15_2_0 = (RuleCall)cDbTableAssignment_15_2.eContents().get(0);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_15_3_0 = (RuleCall)cGroup_15_3.eContents().get(0);
		private final Assignment cImportsAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cImportsImportAssignementParserRuleCall_15_3_1_0 = (RuleCall)cImportsAssignment_15_3_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Assignment cNameAssignment_16_0 = (Assignment)cGroup_16.eContents().get(0);
		private final Keyword cNameCreateOneToManyKeyword_16_0_0 = (Keyword)cNameAssignment_16_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_16_1 = (RuleCall)cGroup_16.eContents().get(1);
		private final Assignment cDbTableAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_16_2_0 = (RuleCall)cDbTableAssignment_16_2.eContents().get(0);
		private final Group cGroup_16_3 = (Group)cGroup_16.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_16_3_0 = (RuleCall)cGroup_16_3.eContents().get(0);
		private final Assignment cExportsAssignment_16_3_1 = (Assignment)cGroup_16_3.eContents().get(1);
		private final RuleCall cExportsExportAssignementParserRuleCall_16_3_1_0 = (RuleCall)cExportsAssignment_16_3_1.eContents().get(0);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Assignment cNameAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final Keyword cNameCreateManyToOneKeyword_17_0_0 = (Keyword)cNameAssignment_17_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_17_1 = (RuleCall)cGroup_17.eContents().get(1);
		private final Assignment cDbTableAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_17_2_0 = (RuleCall)cDbTableAssignment_17_2.eContents().get(0);
		private final Group cGroup_17_3 = (Group)cGroup_17.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_17_3_0 = (RuleCall)cGroup_17_3.eContents().get(0);
		private final Assignment cImportsAssignment_17_3_1 = (Assignment)cGroup_17_3.eContents().get(1);
		private final RuleCall cImportsImportAssignementParserRuleCall_17_3_1_0 = (RuleCall)cImportsAssignment_17_3_1.eContents().get(0);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Assignment cNameAssignment_18_0 = (Assignment)cGroup_18.eContents().get(0);
		private final Keyword cNameTableManyToManyKeyword_18_0_0 = (Keyword)cNameAssignment_18_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_18_1 = (RuleCall)cGroup_18.eContents().get(1);
		private final Assignment cDbTableAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_18_2_0 = (RuleCall)cDbTableAssignment_18_2.eContents().get(0);
		private final Group cGroup_18_3 = (Group)cGroup_18.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_18_3_0 = (RuleCall)cGroup_18_3.eContents().get(0);
		private final Assignment cMany2sAssignment_18_3_1 = (Assignment)cGroup_18_3.eContents().get(1);
		private final RuleCall cMany2sManyToManyAssignementParserRuleCall_18_3_1_0 = (RuleCall)cMany2sAssignment_18_3_1.eContents().get(0);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Assignment cNameAssignment_19_0 = (Assignment)cGroup_19.eContents().get(0);
		private final Keyword cNameInheritDiscriminatorKeyword_19_0_0 = (Keyword)cNameAssignment_19_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_19_1 = (RuleCall)cGroup_19.eContents().get(1);
		private final Assignment cDbTableAssignment_19_2 = (Assignment)cGroup_19.eContents().get(2);
		private final RuleCall cDbTableIDENTTerminalRuleCall_19_2_0 = (RuleCall)cDbTableAssignment_19_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_19_3 = (RuleCall)cGroup_19.eContents().get(3);
		private final Assignment cDbColumnAssignment_19_4 = (Assignment)cGroup_19.eContents().get(4);
		private final RuleCall cDbColumnIDENTTerminalRuleCall_19_4_0 = (RuleCall)cDbColumnAssignment_19_4.eContents().get(0);
		private final Group cGroup_19_5 = (Group)cGroup_19.eContents().get(5);
		private final RuleCall cWSTerminalRuleCall_19_5_0 = (RuleCall)cGroup_19_5.eContents().get(0);
		private final Assignment cInheritanceAssignment_19_5_1 = (Assignment)cGroup_19_5.eContents().get(1);
		private final RuleCall cInheritanceInheritanceAssignementParserRuleCall_19_5_1_0 = (RuleCall)cInheritanceAssignment_19_5_1.eContents().get(0);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Assignment cNameAssignment_20_0 = (Assignment)cGroup_20.eContents().get(0);
		private final Keyword cNameGenerateMethodsKeyword_20_0_0 = (Keyword)cNameAssignment_20_0.eContents().get(0);
		private final Group cGroup_20_1 = (Group)cGroup_20.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_20_1_0 = (RuleCall)cGroup_20_1.eContents().get(0);
		private final Assignment cMethodsAssignment_20_1_1 = (Assignment)cGroup_20_1.eContents().get(1);
		private final RuleCall cMethodsIDENTTerminalRuleCall_20_1_1_0 = (RuleCall)cMethodsAssignment_20_1_1.eContents().get(0);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Assignment cNameAssignment_21_0 = (Assignment)cGroup_21.eContents().get(0);
		private final Keyword cNameImplementsInterfacesKeyword_21_0_0 = (Keyword)cNameAssignment_21_0.eContents().get(0);
		private final Group cGroup_21_1 = (Group)cGroup_21.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_21_1_0 = (RuleCall)cGroup_21_1.eContents().get(0);
		private final Assignment cToImplementsAssignment_21_1_1 = (Assignment)cGroup_21_1.eContents().get(1);
		private final CrossReference cToImplementsJvmTypeCrossReference_21_1_1_0 = (CrossReference)cToImplementsAssignment_21_1_1.eContents().get(0);
		private final RuleCall cToImplementsJvmTypeQualifiedNameParserRuleCall_21_1_1_0_1 = (RuleCall)cToImplementsJvmTypeCrossReference_21_1_1_0.eContents().get(1);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Assignment cNameAssignment_22_0 = (Assignment)cGroup_22.eContents().get(0);
		private final Keyword cNameExtendsClassKeyword_22_0_0 = (Keyword)cNameAssignment_22_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_22_1 = (RuleCall)cGroup_22.eContents().get(1);
		private final Assignment cToExtendsAssignment_22_2 = (Assignment)cGroup_22.eContents().get(2);
		private final CrossReference cToExtendsJvmTypeCrossReference_22_2_0 = (CrossReference)cToExtendsAssignment_22_2.eContents().get(0);
		private final RuleCall cToExtendsJvmTypeQualifiedNameParserRuleCall_22_2_0_1 = (RuleCall)cToExtendsJvmTypeCrossReference_22_2_0.eContents().get(1);
		private final Assignment cNameAssignment_23 = (Assignment)cAlternatives.eContents().get(23);
		private final Keyword cNameGenerateWrappersKeyword_23_0 = (Keyword)cNameAssignment_23.eContents().get(0);
		
		//PojogenProperty:
		//	name="types-sqltypes" (WS+ sqlTypes+=SqlTypeAssignement)+ | name="types-in-table" WS+ dbTable=IDENT (WS+
		//	sqlTypes+=SqlTypeAssignement)+ | name="types-for-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
		//	| name="show-type-for-column" WS+ dbTable=IDENT WS+ columnType=ShowColumnTypeAssignement | name="ignore-tables" (WS+
		//	dbTables+=IDENT)+ | name="only-tables" (WS+ dbTables+=IDENT)+ | name="join-tables" (WS+
		//	joinTables+=JoinTableAssignement)+ | name="ignore-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ |
		//	name="required-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ | name="not-required-columns" WS+ dbTable=IDENT (WS+
		//	dbColumns+=IDENT)+ | name="create-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+ |
		//	name="rename-tables" (WS+ tables+=TableAssignement)+ | name="rename-columns" WS+ dbTable=IDENT (WS+
		//	columns+=ColumnAssignement)+ | name="ignore-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		//	| name="ignore-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//	| name="inherit-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//	| name="create-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		//	| name="create-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//	| name="table-many-to-many" WS+ dbTable=IDENT (WS+ many2s+=ManyToManyAssignement)+ | name="inherit-discriminator" WS+
		//	dbTable=IDENT WS+ dbColumn=IDENT (WS+ inheritance+=InheritanceAssignement)+ | name="generate-methods" (WS+
		//	methods+=IDENT)+ | name="implements-interfaces" (WS+ toImplements+=[jvmTypes::JvmType|QualifiedName])+ |
		//	name="extends-class" WS+ toExtends=[jvmTypes::JvmType|QualifiedName] | name="generate-wrappers";
		public ParserRule getRule() { return rule; }

		//name="types-sqltypes" (WS+ sqlTypes+=SqlTypeAssignement)+ | name="types-in-table" WS+ dbTable=IDENT (WS+
		//sqlTypes+=SqlTypeAssignement)+ | name="types-for-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+ |
		//name="show-type-for-column" WS+ dbTable=IDENT WS+ columnType=ShowColumnTypeAssignement | name="ignore-tables" (WS+
		//dbTables+=IDENT)+ | name="only-tables" (WS+ dbTables+=IDENT)+ | name="join-tables" (WS+
		//joinTables+=JoinTableAssignement)+ | name="ignore-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ |
		//name="required-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ | name="not-required-columns" WS+ dbTable=IDENT (WS+
		//dbColumns+=IDENT)+ | name="create-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+ |
		//name="rename-tables" (WS+ tables+=TableAssignement)+ | name="rename-columns" WS+ dbTable=IDENT (WS+
		//columns+=ColumnAssignement)+ | name="ignore-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		//| name="ignore-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//| name="inherit-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//| name="create-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		//| name="create-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		//| name="table-many-to-many" WS+ dbTable=IDENT (WS+ many2s+=ManyToManyAssignement)+ | name="inherit-discriminator" WS+
		//dbTable=IDENT WS+ dbColumn=IDENT (WS+ inheritance+=InheritanceAssignement)+ | name="generate-methods" (WS+
		//methods+=IDENT)+ | name="implements-interfaces" (WS+ toImplements+=[jvmTypes::JvmType|QualifiedName])+ |
		//name="extends-class" WS+ toExtends=[jvmTypes::JvmType|QualifiedName] | name="generate-wrappers"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="types-sqltypes" (WS+ sqlTypes+=SqlTypeAssignement)+
		public Group getGroup_0() { return cGroup_0; }

		//name="types-sqltypes"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"types-sqltypes"
		public Keyword getNameTypesSqltypesKeyword_0_0_0() { return cNameTypesSqltypesKeyword_0_0_0; }

		//(WS+ sqlTypes+=SqlTypeAssignement)+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_0_1_0() { return cWSTerminalRuleCall_0_1_0; }

		//sqlTypes+=SqlTypeAssignement
		public Assignment getSqlTypesAssignment_0_1_1() { return cSqlTypesAssignment_0_1_1; }

		//SqlTypeAssignement
		public RuleCall getSqlTypesSqlTypeAssignementParserRuleCall_0_1_1_0() { return cSqlTypesSqlTypeAssignementParserRuleCall_0_1_1_0; }

		//name="types-in-table" WS+ dbTable=IDENT (WS+ sqlTypes+=SqlTypeAssignement)+
		public Group getGroup_1() { return cGroup_1; }

		//name="types-in-table"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"types-in-table"
		public Keyword getNameTypesInTableKeyword_1_0_0() { return cNameTypesInTableKeyword_1_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_1_1() { return cWSTerminalRuleCall_1_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_1_2() { return cDbTableAssignment_1_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_1_2_0() { return cDbTableIDENTTerminalRuleCall_1_2_0; }

		//(WS+ sqlTypes+=SqlTypeAssignement)+
		public Group getGroup_1_3() { return cGroup_1_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_1_3_0() { return cWSTerminalRuleCall_1_3_0; }

		//sqlTypes+=SqlTypeAssignement
		public Assignment getSqlTypesAssignment_1_3_1() { return cSqlTypesAssignment_1_3_1; }

		//SqlTypeAssignement
		public RuleCall getSqlTypesSqlTypeAssignementParserRuleCall_1_3_1_0() { return cSqlTypesSqlTypeAssignementParserRuleCall_1_3_1_0; }

		//name="types-for-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
		public Group getGroup_2() { return cGroup_2; }

		//name="types-for-columns"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"types-for-columns"
		public Keyword getNameTypesForColumnsKeyword_2_0_0() { return cNameTypesForColumnsKeyword_2_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_2_1() { return cWSTerminalRuleCall_2_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_2_2() { return cDbTableAssignment_2_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_2_2_0() { return cDbTableIDENTTerminalRuleCall_2_2_0; }

		//(WS+ columnTypes+=ColumnTypeAssignement)+
		public Group getGroup_2_3() { return cGroup_2_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_2_3_0() { return cWSTerminalRuleCall_2_3_0; }

		//columnTypes+=ColumnTypeAssignement
		public Assignment getColumnTypesAssignment_2_3_1() { return cColumnTypesAssignment_2_3_1; }

		//ColumnTypeAssignement
		public RuleCall getColumnTypesColumnTypeAssignementParserRuleCall_2_3_1_0() { return cColumnTypesColumnTypeAssignementParserRuleCall_2_3_1_0; }

		//name="show-type-for-column" WS+ dbTable=IDENT WS+ columnType=ShowColumnTypeAssignement
		public Group getGroup_3() { return cGroup_3; }

		//name="show-type-for-column"
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//"show-type-for-column"
		public Keyword getNameShowTypeForColumnKeyword_3_0_0() { return cNameShowTypeForColumnKeyword_3_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_3_2() { return cDbTableAssignment_3_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_3_2_0() { return cDbTableIDENTTerminalRuleCall_3_2_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_3_3() { return cWSTerminalRuleCall_3_3; }

		//columnType=ShowColumnTypeAssignement
		public Assignment getColumnTypeAssignment_3_4() { return cColumnTypeAssignment_3_4; }

		//ShowColumnTypeAssignement
		public RuleCall getColumnTypeShowColumnTypeAssignementParserRuleCall_3_4_0() { return cColumnTypeShowColumnTypeAssignementParserRuleCall_3_4_0; }

		//name="ignore-tables" (WS+ dbTables+=IDENT)+
		public Group getGroup_4() { return cGroup_4; }

		//name="ignore-tables"
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//"ignore-tables"
		public Keyword getNameIgnoreTablesKeyword_4_0_0() { return cNameIgnoreTablesKeyword_4_0_0; }

		//(WS+ dbTables+=IDENT)+
		public Group getGroup_4_1() { return cGroup_4_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_4_1_0() { return cWSTerminalRuleCall_4_1_0; }

		//dbTables+=IDENT
		public Assignment getDbTablesAssignment_4_1_1() { return cDbTablesAssignment_4_1_1; }

		//IDENT
		public RuleCall getDbTablesIDENTTerminalRuleCall_4_1_1_0() { return cDbTablesIDENTTerminalRuleCall_4_1_1_0; }

		//name="only-tables" (WS+ dbTables+=IDENT)+
		public Group getGroup_5() { return cGroup_5; }

		//name="only-tables"
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//"only-tables"
		public Keyword getNameOnlyTablesKeyword_5_0_0() { return cNameOnlyTablesKeyword_5_0_0; }

		//(WS+ dbTables+=IDENT)+
		public Group getGroup_5_1() { return cGroup_5_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_5_1_0() { return cWSTerminalRuleCall_5_1_0; }

		//dbTables+=IDENT
		public Assignment getDbTablesAssignment_5_1_1() { return cDbTablesAssignment_5_1_1; }

		//IDENT
		public RuleCall getDbTablesIDENTTerminalRuleCall_5_1_1_0() { return cDbTablesIDENTTerminalRuleCall_5_1_1_0; }

		//name="join-tables" (WS+ joinTables+=JoinTableAssignement)+
		public Group getGroup_6() { return cGroup_6; }

		//name="join-tables"
		public Assignment getNameAssignment_6_0() { return cNameAssignment_6_0; }

		//"join-tables"
		public Keyword getNameJoinTablesKeyword_6_0_0() { return cNameJoinTablesKeyword_6_0_0; }

		//(WS+ joinTables+=JoinTableAssignement)+
		public Group getGroup_6_1() { return cGroup_6_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_6_1_0() { return cWSTerminalRuleCall_6_1_0; }

		//joinTables+=JoinTableAssignement
		public Assignment getJoinTablesAssignment_6_1_1() { return cJoinTablesAssignment_6_1_1; }

		//JoinTableAssignement
		public RuleCall getJoinTablesJoinTableAssignementParserRuleCall_6_1_1_0() { return cJoinTablesJoinTableAssignementParserRuleCall_6_1_1_0; }

		//name="ignore-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
		public Group getGroup_7() { return cGroup_7; }

		//name="ignore-columns"
		public Assignment getNameAssignment_7_0() { return cNameAssignment_7_0; }

		//"ignore-columns"
		public Keyword getNameIgnoreColumnsKeyword_7_0_0() { return cNameIgnoreColumnsKeyword_7_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_7_1() { return cWSTerminalRuleCall_7_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_7_2() { return cDbTableAssignment_7_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_7_2_0() { return cDbTableIDENTTerminalRuleCall_7_2_0; }

		//(WS+ dbColumns+=IDENT)+
		public Group getGroup_7_3() { return cGroup_7_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_7_3_0() { return cWSTerminalRuleCall_7_3_0; }

		//dbColumns+=IDENT
		public Assignment getDbColumnsAssignment_7_3_1() { return cDbColumnsAssignment_7_3_1; }

		//IDENT
		public RuleCall getDbColumnsIDENTTerminalRuleCall_7_3_1_0() { return cDbColumnsIDENTTerminalRuleCall_7_3_1_0; }

		//name="required-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
		public Group getGroup_8() { return cGroup_8; }

		//name="required-columns"
		public Assignment getNameAssignment_8_0() { return cNameAssignment_8_0; }

		//"required-columns"
		public Keyword getNameRequiredColumnsKeyword_8_0_0() { return cNameRequiredColumnsKeyword_8_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_8_1() { return cWSTerminalRuleCall_8_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_8_2() { return cDbTableAssignment_8_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_8_2_0() { return cDbTableIDENTTerminalRuleCall_8_2_0; }

		//(WS+ dbColumns+=IDENT)+
		public Group getGroup_8_3() { return cGroup_8_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_8_3_0() { return cWSTerminalRuleCall_8_3_0; }

		//dbColumns+=IDENT
		public Assignment getDbColumnsAssignment_8_3_1() { return cDbColumnsAssignment_8_3_1; }

		//IDENT
		public RuleCall getDbColumnsIDENTTerminalRuleCall_8_3_1_0() { return cDbColumnsIDENTTerminalRuleCall_8_3_1_0; }

		//name="not-required-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
		public Group getGroup_9() { return cGroup_9; }

		//name="not-required-columns"
		public Assignment getNameAssignment_9_0() { return cNameAssignment_9_0; }

		//"not-required-columns"
		public Keyword getNameNotRequiredColumnsKeyword_9_0_0() { return cNameNotRequiredColumnsKeyword_9_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_9_1() { return cWSTerminalRuleCall_9_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_9_2() { return cDbTableAssignment_9_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_9_2_0() { return cDbTableIDENTTerminalRuleCall_9_2_0; }

		//(WS+ dbColumns+=IDENT)+
		public Group getGroup_9_3() { return cGroup_9_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_9_3_0() { return cWSTerminalRuleCall_9_3_0; }

		//dbColumns+=IDENT
		public Assignment getDbColumnsAssignment_9_3_1() { return cDbColumnsAssignment_9_3_1; }

		//IDENT
		public RuleCall getDbColumnsIDENTTerminalRuleCall_9_3_1_0() { return cDbColumnsIDENTTerminalRuleCall_9_3_1_0; }

		//name="create-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
		public Group getGroup_10() { return cGroup_10; }

		//name="create-columns"
		public Assignment getNameAssignment_10_0() { return cNameAssignment_10_0; }

		//"create-columns"
		public Keyword getNameCreateColumnsKeyword_10_0_0() { return cNameCreateColumnsKeyword_10_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_10_1() { return cWSTerminalRuleCall_10_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_10_2() { return cDbTableAssignment_10_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_10_2_0() { return cDbTableIDENTTerminalRuleCall_10_2_0; }

		//(WS+ columnTypes+=ColumnTypeAssignement)+
		public Group getGroup_10_3() { return cGroup_10_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_10_3_0() { return cWSTerminalRuleCall_10_3_0; }

		//columnTypes+=ColumnTypeAssignement
		public Assignment getColumnTypesAssignment_10_3_1() { return cColumnTypesAssignment_10_3_1; }

		//ColumnTypeAssignement
		public RuleCall getColumnTypesColumnTypeAssignementParserRuleCall_10_3_1_0() { return cColumnTypesColumnTypeAssignementParserRuleCall_10_3_1_0; }

		//name="rename-tables" (WS+ tables+=TableAssignement)+
		public Group getGroup_11() { return cGroup_11; }

		//name="rename-tables"
		public Assignment getNameAssignment_11_0() { return cNameAssignment_11_0; }

		//"rename-tables"
		public Keyword getNameRenameTablesKeyword_11_0_0() { return cNameRenameTablesKeyword_11_0_0; }

		//(WS+ tables+=TableAssignement)+
		public Group getGroup_11_1() { return cGroup_11_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_11_1_0() { return cWSTerminalRuleCall_11_1_0; }

		//tables+=TableAssignement
		public Assignment getTablesAssignment_11_1_1() { return cTablesAssignment_11_1_1; }

		//TableAssignement
		public RuleCall getTablesTableAssignementParserRuleCall_11_1_1_0() { return cTablesTableAssignementParserRuleCall_11_1_1_0; }

		//name="rename-columns" WS+ dbTable=IDENT (WS+ columns+=ColumnAssignement)+
		public Group getGroup_12() { return cGroup_12; }

		//name="rename-columns"
		public Assignment getNameAssignment_12_0() { return cNameAssignment_12_0; }

		//"rename-columns"
		public Keyword getNameRenameColumnsKeyword_12_0_0() { return cNameRenameColumnsKeyword_12_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_12_1() { return cWSTerminalRuleCall_12_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_12_2() { return cDbTableAssignment_12_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_12_2_0() { return cDbTableIDENTTerminalRuleCall_12_2_0; }

		//(WS+ columns+=ColumnAssignement)+
		public Group getGroup_12_3() { return cGroup_12_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_12_3_0() { return cWSTerminalRuleCall_12_3_0; }

		//columns+=ColumnAssignement
		public Assignment getColumnsAssignment_12_3_1() { return cColumnsAssignment_12_3_1; }

		//ColumnAssignement
		public RuleCall getColumnsColumnAssignementParserRuleCall_12_3_1_0() { return cColumnsColumnAssignementParserRuleCall_12_3_1_0; }

		//name="ignore-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		public Group getGroup_13() { return cGroup_13; }

		//name="ignore-one-to-many"
		public Assignment getNameAssignment_13_0() { return cNameAssignment_13_0; }

		//"ignore-one-to-many"
		public Keyword getNameIgnoreOneToManyKeyword_13_0_0() { return cNameIgnoreOneToManyKeyword_13_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_13_1() { return cWSTerminalRuleCall_13_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_13_2() { return cDbTableAssignment_13_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_13_2_0() { return cDbTableIDENTTerminalRuleCall_13_2_0; }

		//(WS+ exports+=ExportAssignement)+
		public Group getGroup_13_3() { return cGroup_13_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_13_3_0() { return cWSTerminalRuleCall_13_3_0; }

		//exports+=ExportAssignement
		public Assignment getExportsAssignment_13_3_1() { return cExportsAssignment_13_3_1; }

		//ExportAssignement
		public RuleCall getExportsExportAssignementParserRuleCall_13_3_1_0() { return cExportsExportAssignementParserRuleCall_13_3_1_0; }

		//name="ignore-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		public Group getGroup_14() { return cGroup_14; }

		//name="ignore-many-to-one"
		public Assignment getNameAssignment_14_0() { return cNameAssignment_14_0; }

		//"ignore-many-to-one"
		public Keyword getNameIgnoreManyToOneKeyword_14_0_0() { return cNameIgnoreManyToOneKeyword_14_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_14_1() { return cWSTerminalRuleCall_14_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_14_2() { return cDbTableAssignment_14_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_14_2_0() { return cDbTableIDENTTerminalRuleCall_14_2_0; }

		//(WS+ imports+=ImportAssignement)+
		public Group getGroup_14_3() { return cGroup_14_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_14_3_0() { return cWSTerminalRuleCall_14_3_0; }

		//imports+=ImportAssignement
		public Assignment getImportsAssignment_14_3_1() { return cImportsAssignment_14_3_1; }

		//ImportAssignement
		public RuleCall getImportsImportAssignementParserRuleCall_14_3_1_0() { return cImportsImportAssignementParserRuleCall_14_3_1_0; }

		//name="inherit-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		public Group getGroup_15() { return cGroup_15; }

		//name="inherit-many-to-one"
		public Assignment getNameAssignment_15_0() { return cNameAssignment_15_0; }

		//"inherit-many-to-one"
		public Keyword getNameInheritManyToOneKeyword_15_0_0() { return cNameInheritManyToOneKeyword_15_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_15_1() { return cWSTerminalRuleCall_15_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_15_2() { return cDbTableAssignment_15_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_15_2_0() { return cDbTableIDENTTerminalRuleCall_15_2_0; }

		//(WS+ imports+=ImportAssignement)+
		public Group getGroup_15_3() { return cGroup_15_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_15_3_0() { return cWSTerminalRuleCall_15_3_0; }

		//imports+=ImportAssignement
		public Assignment getImportsAssignment_15_3_1() { return cImportsAssignment_15_3_1; }

		//ImportAssignement
		public RuleCall getImportsImportAssignementParserRuleCall_15_3_1_0() { return cImportsImportAssignementParserRuleCall_15_3_1_0; }

		//name="create-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
		public Group getGroup_16() { return cGroup_16; }

		//name="create-one-to-many"
		public Assignment getNameAssignment_16_0() { return cNameAssignment_16_0; }

		//"create-one-to-many"
		public Keyword getNameCreateOneToManyKeyword_16_0_0() { return cNameCreateOneToManyKeyword_16_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_16_1() { return cWSTerminalRuleCall_16_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_16_2() { return cDbTableAssignment_16_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_16_2_0() { return cDbTableIDENTTerminalRuleCall_16_2_0; }

		//(WS+ exports+=ExportAssignement)+
		public Group getGroup_16_3() { return cGroup_16_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_16_3_0() { return cWSTerminalRuleCall_16_3_0; }

		//exports+=ExportAssignement
		public Assignment getExportsAssignment_16_3_1() { return cExportsAssignment_16_3_1; }

		//ExportAssignement
		public RuleCall getExportsExportAssignementParserRuleCall_16_3_1_0() { return cExportsExportAssignementParserRuleCall_16_3_1_0; }

		//name="create-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
		public Group getGroup_17() { return cGroup_17; }

		//name="create-many-to-one"
		public Assignment getNameAssignment_17_0() { return cNameAssignment_17_0; }

		//"create-many-to-one"
		public Keyword getNameCreateManyToOneKeyword_17_0_0() { return cNameCreateManyToOneKeyword_17_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_17_1() { return cWSTerminalRuleCall_17_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_17_2() { return cDbTableAssignment_17_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_17_2_0() { return cDbTableIDENTTerminalRuleCall_17_2_0; }

		//(WS+ imports+=ImportAssignement)+
		public Group getGroup_17_3() { return cGroup_17_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_17_3_0() { return cWSTerminalRuleCall_17_3_0; }

		//imports+=ImportAssignement
		public Assignment getImportsAssignment_17_3_1() { return cImportsAssignment_17_3_1; }

		//ImportAssignement
		public RuleCall getImportsImportAssignementParserRuleCall_17_3_1_0() { return cImportsImportAssignementParserRuleCall_17_3_1_0; }

		//name="table-many-to-many" WS+ dbTable=IDENT (WS+ many2s+=ManyToManyAssignement)+
		public Group getGroup_18() { return cGroup_18; }

		//name="table-many-to-many"
		public Assignment getNameAssignment_18_0() { return cNameAssignment_18_0; }

		//"table-many-to-many"
		public Keyword getNameTableManyToManyKeyword_18_0_0() { return cNameTableManyToManyKeyword_18_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_18_1() { return cWSTerminalRuleCall_18_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_18_2() { return cDbTableAssignment_18_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_18_2_0() { return cDbTableIDENTTerminalRuleCall_18_2_0; }

		//(WS+ many2s+=ManyToManyAssignement)+
		public Group getGroup_18_3() { return cGroup_18_3; }

		//WS+
		public RuleCall getWSTerminalRuleCall_18_3_0() { return cWSTerminalRuleCall_18_3_0; }

		//many2s+=ManyToManyAssignement
		public Assignment getMany2sAssignment_18_3_1() { return cMany2sAssignment_18_3_1; }

		//ManyToManyAssignement
		public RuleCall getMany2sManyToManyAssignementParserRuleCall_18_3_1_0() { return cMany2sManyToManyAssignementParserRuleCall_18_3_1_0; }

		//name="inherit-discriminator" WS+ dbTable=IDENT WS+ dbColumn=IDENT (WS+ inheritance+=InheritanceAssignement)+
		public Group getGroup_19() { return cGroup_19; }

		//name="inherit-discriminator"
		public Assignment getNameAssignment_19_0() { return cNameAssignment_19_0; }

		//"inherit-discriminator"
		public Keyword getNameInheritDiscriminatorKeyword_19_0_0() { return cNameInheritDiscriminatorKeyword_19_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_19_1() { return cWSTerminalRuleCall_19_1; }

		//dbTable=IDENT
		public Assignment getDbTableAssignment_19_2() { return cDbTableAssignment_19_2; }

		//IDENT
		public RuleCall getDbTableIDENTTerminalRuleCall_19_2_0() { return cDbTableIDENTTerminalRuleCall_19_2_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_19_3() { return cWSTerminalRuleCall_19_3; }

		//dbColumn=IDENT
		public Assignment getDbColumnAssignment_19_4() { return cDbColumnAssignment_19_4; }

		//IDENT
		public RuleCall getDbColumnIDENTTerminalRuleCall_19_4_0() { return cDbColumnIDENTTerminalRuleCall_19_4_0; }

		//(WS+ inheritance+=InheritanceAssignement)+
		public Group getGroup_19_5() { return cGroup_19_5; }

		//WS+
		public RuleCall getWSTerminalRuleCall_19_5_0() { return cWSTerminalRuleCall_19_5_0; }

		//inheritance+=InheritanceAssignement
		public Assignment getInheritanceAssignment_19_5_1() { return cInheritanceAssignment_19_5_1; }

		//InheritanceAssignement
		public RuleCall getInheritanceInheritanceAssignementParserRuleCall_19_5_1_0() { return cInheritanceInheritanceAssignementParserRuleCall_19_5_1_0; }

		//name="generate-methods" (WS+ methods+=IDENT)+
		public Group getGroup_20() { return cGroup_20; }

		//name="generate-methods"
		public Assignment getNameAssignment_20_0() { return cNameAssignment_20_0; }

		//"generate-methods"
		public Keyword getNameGenerateMethodsKeyword_20_0_0() { return cNameGenerateMethodsKeyword_20_0_0; }

		//(WS+ methods+=IDENT)+
		public Group getGroup_20_1() { return cGroup_20_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_20_1_0() { return cWSTerminalRuleCall_20_1_0; }

		//methods+=IDENT
		public Assignment getMethodsAssignment_20_1_1() { return cMethodsAssignment_20_1_1; }

		//IDENT
		public RuleCall getMethodsIDENTTerminalRuleCall_20_1_1_0() { return cMethodsIDENTTerminalRuleCall_20_1_1_0; }

		//name="implements-interfaces" (WS+ toImplements+=[jvmTypes::JvmType|QualifiedName])+
		public Group getGroup_21() { return cGroup_21; }

		//name="implements-interfaces"
		public Assignment getNameAssignment_21_0() { return cNameAssignment_21_0; }

		//"implements-interfaces"
		public Keyword getNameImplementsInterfacesKeyword_21_0_0() { return cNameImplementsInterfacesKeyword_21_0_0; }

		//(WS+ toImplements+=[jvmTypes::JvmType|QualifiedName])+
		public Group getGroup_21_1() { return cGroup_21_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_21_1_0() { return cWSTerminalRuleCall_21_1_0; }

		//toImplements+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getToImplementsAssignment_21_1_1() { return cToImplementsAssignment_21_1_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getToImplementsJvmTypeCrossReference_21_1_1_0() { return cToImplementsJvmTypeCrossReference_21_1_1_0; }

		//QualifiedName
		public RuleCall getToImplementsJvmTypeQualifiedNameParserRuleCall_21_1_1_0_1() { return cToImplementsJvmTypeQualifiedNameParserRuleCall_21_1_1_0_1; }

		//name="extends-class" WS+ toExtends=[jvmTypes::JvmType|QualifiedName]
		public Group getGroup_22() { return cGroup_22; }

		//name="extends-class"
		public Assignment getNameAssignment_22_0() { return cNameAssignment_22_0; }

		//"extends-class"
		public Keyword getNameExtendsClassKeyword_22_0_0() { return cNameExtendsClassKeyword_22_0_0; }

		//WS+
		public RuleCall getWSTerminalRuleCall_22_1() { return cWSTerminalRuleCall_22_1; }

		//toExtends=[jvmTypes::JvmType|QualifiedName]
		public Assignment getToExtendsAssignment_22_2() { return cToExtendsAssignment_22_2; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getToExtendsJvmTypeCrossReference_22_2_0() { return cToExtendsJvmTypeCrossReference_22_2_0; }

		//QualifiedName
		public RuleCall getToExtendsJvmTypeQualifiedNameParserRuleCall_22_2_0_1() { return cToExtendsJvmTypeQualifiedNameParserRuleCall_22_2_0_1; }

		//name="generate-wrappers"
		public Assignment getNameAssignment_23() { return cNameAssignment_23; }

		//"generate-wrappers"
		public Keyword getNameGenerateWrappersKeyword_23_0() { return cNameGenerateWrappersKeyword_23_0; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSTRINGTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cLBRACETerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cRBRACETerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cQUESTITerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cNOTTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cBANDTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cBORTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cHASHTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cATTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cCARETTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cEQUALSTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cLESS_THANTerminalRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cMORE_THANTerminalRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final RuleCall cPERCENTTerminalRuleCall_0_23 = (RuleCall)cAlternatives_0.eContents().get(23);
		private final RuleCall cANDTerminalRuleCall_0_24 = (RuleCall)cAlternatives_0.eContents().get(24);
		private final RuleCall cORTerminalRuleCall_0_25 = (RuleCall)cAlternatives_0.eContents().get(25);
		private final RuleCall cESC_CHARTerminalRuleCall_0_26 = (RuleCall)cAlternatives_0.eContents().get(26);
		private final RuleCall cON_OFFTerminalRuleCall_0_27 = (RuleCall)cAlternatives_0.eContents().get(27);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_0_28 = (RuleCall)cAlternatives_0.eContents().get(28);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_0_29 = (RuleCall)cAlternatives_0.eContents().get(29);
		private final RuleCall cOPTION_TYPETerminalRuleCall_0_30 = (RuleCall)cAlternatives_0.eContents().get(30);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cCOLONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cMINUSTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cPLUSTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cLPARENTerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cRPARENTerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cLBRACETerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cRBRACETerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cQUESTITerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cNOTTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cBANDTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cBORTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cHASHTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cATTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cCARETTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_21 = (RuleCall)cAlternatives_1_0.eContents().get(21);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_22 = (RuleCall)cAlternatives_1_0.eContents().get(22);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_23 = (RuleCall)cAlternatives_1_0.eContents().get(23);
		private final RuleCall cPERCENTTerminalRuleCall_1_0_24 = (RuleCall)cAlternatives_1_0.eContents().get(24);
		private final RuleCall cANDTerminalRuleCall_1_0_25 = (RuleCall)cAlternatives_1_0.eContents().get(25);
		private final RuleCall cORTerminalRuleCall_1_0_26 = (RuleCall)cAlternatives_1_0.eContents().get(26);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_27 = (RuleCall)cAlternatives_1_0.eContents().get(27);
		private final RuleCall cON_OFFTerminalRuleCall_1_0_28 = (RuleCall)cAlternatives_1_0.eContents().get(28);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_1_0_29 = (RuleCall)cAlternatives_1_0.eContents().get(29);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_1_0_30 = (RuleCall)cAlternatives_1_0.eContents().get(30);
		private final RuleCall cOPTION_TYPETerminalRuleCall_1_0_31 = (RuleCall)cAlternatives_1_0.eContents().get(31);
		
		//PropertyValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR |
		//	ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING |
		//	COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS |
		//	LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE | QUESTI
		//| NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF |
		//STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS
		//| PLUS | LPAREN | RPAREN | LBRACE | RBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN |
		//MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE | QUESTI |
		//NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF |
		//STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_4() { return cCOLONTerminalRuleCall_0_4; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_5() { return cSTRINGTerminalRuleCall_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_7() { return cMINUSTerminalRuleCall_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_8() { return cPLUSTerminalRuleCall_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_9() { return cLPARENTerminalRuleCall_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_10() { return cRPARENTerminalRuleCall_0_10; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_0_11() { return cLBRACETerminalRuleCall_0_11; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_0_12() { return cRBRACETerminalRuleCall_0_12; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_13() { return cQUESTITerminalRuleCall_0_13; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_14() { return cNOTTerminalRuleCall_0_14; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_15() { return cBANDTerminalRuleCall_0_15; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_16() { return cBORTerminalRuleCall_0_16; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_17() { return cHASHTerminalRuleCall_0_17; }

		//AT
		public RuleCall getATTerminalRuleCall_0_18() { return cATTerminalRuleCall_0_18; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_19() { return cCARETTerminalRuleCall_0_19; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_20() { return cEQUALSTerminalRuleCall_0_20; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_21() { return cLESS_THANTerminalRuleCall_0_21; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_22() { return cMORE_THANTerminalRuleCall_0_22; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_0_23() { return cPERCENTTerminalRuleCall_0_23; }

		//AND
		public RuleCall getANDTerminalRuleCall_0_24() { return cANDTerminalRuleCall_0_24; }

		//OR
		public RuleCall getORTerminalRuleCall_0_25() { return cORTerminalRuleCall_0_25; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_26() { return cESC_CHARTerminalRuleCall_0_26; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_0_27() { return cON_OFFTerminalRuleCall_0_27; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_0_28() { return cSTATEMEN_TYPETerminalRuleCall_0_28; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_0_29() { return cMAPPING_TYPETerminalRuleCall_0_29; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_0_30() { return cOPTION_TYPETerminalRuleCall_0_30; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF
		//| STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF
		//| STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0_5() { return cCOLONTerminalRuleCall_1_0_5; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0_6() { return cSTRINGTerminalRuleCall_1_0_6; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_7() { return cCOMMATerminalRuleCall_1_0_7; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_8() { return cMINUSTerminalRuleCall_1_0_8; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_9() { return cPLUSTerminalRuleCall_1_0_9; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_10() { return cLPARENTerminalRuleCall_1_0_10; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_11() { return cRPARENTerminalRuleCall_1_0_11; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_1_0_12() { return cLBRACETerminalRuleCall_1_0_12; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_1_0_13() { return cRBRACETerminalRuleCall_1_0_13; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_14() { return cQUESTITerminalRuleCall_1_0_14; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_15() { return cNOTTerminalRuleCall_1_0_15; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_16() { return cBANDTerminalRuleCall_1_0_16; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_0_17() { return cBORTerminalRuleCall_1_0_17; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_18() { return cHASHTerminalRuleCall_1_0_18; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0_19() { return cATTerminalRuleCall_1_0_19; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_20() { return cCARETTerminalRuleCall_1_0_20; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_21() { return cEQUALSTerminalRuleCall_1_0_21; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_22() { return cLESS_THANTerminalRuleCall_1_0_22; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_23() { return cMORE_THANTerminalRuleCall_1_0_23; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_1_0_24() { return cPERCENTTerminalRuleCall_1_0_24; }

		//AND
		public RuleCall getANDTerminalRuleCall_1_0_25() { return cANDTerminalRuleCall_1_0_25; }

		//OR
		public RuleCall getORTerminalRuleCall_1_0_26() { return cORTerminalRuleCall_1_0_26; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_27() { return cESC_CHARTerminalRuleCall_1_0_27; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_1_0_28() { return cON_OFFTerminalRuleCall_1_0_28; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_1_0_29() { return cSTATEMEN_TYPETerminalRuleCall_1_0_29; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_1_0_30() { return cMAPPING_TYPETerminalRuleCall_1_0_30; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_1_0_31() { return cOPTION_TYPETerminalRuleCall_1_0_31; }
	}

	public class PojoDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPojoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cClassAlternatives_2_0 = (Alternatives)cClassAssignment_2.eContents().get(0);
		private final RuleCall cClassIDENTTerminalRuleCall_2_0_0 = (RuleCall)cClassAlternatives_2_0.eContents().get(0);
		private final RuleCall cClassIDENT_DOTTerminalRuleCall_2_0_1 = (RuleCall)cClassAlternatives_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PojoDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"pojo" name=IDENT class=(IDENT | IDENT_DOT) SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"pojo" name=IDENT class=(IDENT | IDENT_DOT) SEMICOLON
		public Group getGroup() { return cGroup; }

		//"pojo"
		public Keyword getPojoKeyword_0() { return cPojoKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//class=(IDENT | IDENT_DOT)
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }

		//IDENT | IDENT_DOT
		public Alternatives getClassAlternatives_2_0() { return cClassAlternatives_2_0; }

		//IDENT
		public RuleCall getClassIDENTTerminalRuleCall_2_0_0() { return cClassIDENTTerminalRuleCall_2_0_0; }

		//IDENT_DOT
		public RuleCall getClassIDENT_DOTTerminalRuleCall_2_0_1() { return cClassIDENT_DOTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class PojoUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMappingUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PojoUsage:
		//	ColumnUsage | IdentifierUsage | ConstantUsage | MappingUsage;
		public ParserRule getRule() { return rule; }

		//ColumnUsage | IdentifierUsage | ConstantUsage | MappingUsage
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColumnUsage
		public RuleCall getColumnUsageParserRuleCall_0() { return cColumnUsageParserRuleCall_0; }

		//IdentifierUsage
		public RuleCall getIdentifierUsageParserRuleCall_1() { return cIdentifierUsageParserRuleCall_1; }

		//ConstantUsage
		public RuleCall getConstantUsageParserRuleCall_2() { return cConstantUsageParserRuleCall_2; }

		//MappingUsage
		public RuleCall getMappingUsageParserRuleCall_3() { return cMappingUsageParserRuleCall_3; }
	}

	public class ColumnUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoDefinitionCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoDefinitionCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ColumnUsage hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"col" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"col" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"col"
		public Keyword getColKeyword_0() { return cColKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoDefinition|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoDefinition|IDENT]
		public CrossReference getPojoPojoDefinitionCrossReference_2_0() { return cPojoPojoDefinitionCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1() { return cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class IdentifierUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoDefinitionCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoDefinitionCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//IdentifierUsage hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"ident" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"ident" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"ident"
		public Keyword getIdentKeyword_0() { return cIdentKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoDefinition|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoDefinition|IDENT]
		public CrossReference getPojoPojoDefinitionCrossReference_2_0() { return cPojoPojoDefinitionCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1() { return cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class ConstantUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoDefinitionCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoDefinitionCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ConstantUsage hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"const" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"const" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoDefinition|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoDefinition|IDENT]
		public CrossReference getPojoPojoDefinitionCrossReference_2_0() { return cPojoPojoDefinitionCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1() { return cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class MappingUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMappingRuleCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMappingRuleIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMappingRuleCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoDefinitionCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoDefinitionCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MappingUsage hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"out" statement=[MappingRule|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"out" statement=[MappingRule|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"out"
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }

		//statement=[MappingRule|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MappingRule|IDENT]
		public CrossReference getStatementMappingRuleCrossReference_1_0() { return cStatementMappingRuleCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMappingRuleIDENTTerminalRuleCall_1_0_1() { return cStatementMappingRuleIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoDefinition|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoDefinition|IDENT]
		public CrossReference getPojoPojoDefinitionCrossReference_2_0() { return cPojoPojoDefinitionCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1() { return cPojoPojoDefinitionIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class PojoUsageExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoUsageExt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnUsageExtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierUsageExtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantUsageExtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMappingUsageExtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PojoUsageExt:
		//	ColumnUsageExt | IdentifierUsageExt | ConstantUsageExt | MappingUsageExt;
		public ParserRule getRule() { return rule; }

		//ColumnUsageExt | IdentifierUsageExt | ConstantUsageExt | MappingUsageExt
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColumnUsageExt
		public RuleCall getColumnUsageExtParserRuleCall_0() { return cColumnUsageExtParserRuleCall_0; }

		//IdentifierUsageExt
		public RuleCall getIdentifierUsageExtParserRuleCall_1() { return cIdentifierUsageExtParserRuleCall_1; }

		//ConstantUsageExt
		public RuleCall getConstantUsageExtParserRuleCall_2() { return cConstantUsageExtParserRuleCall_2; }

		//MappingUsageExt
		public RuleCall getMappingUsageExtParserRuleCall_3() { return cMappingUsageExtParserRuleCall_3; }
	}

	public class ColumnUsageExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnUsageExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoEntityCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoEntityIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoEntityCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ColumnUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"colx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"colx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"colx"
		public Keyword getColxKeyword_0() { return cColxKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoEntity|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoEntity|IDENT]
		public CrossReference getPojoPojoEntityCrossReference_2_0() { return cPojoPojoEntityCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoEntityIDENTTerminalRuleCall_2_0_1() { return cPojoPojoEntityIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class IdentifierUsageExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierUsageExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoEntityCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoEntityIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoEntityCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//IdentifierUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"identx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"identx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"identx"
		public Keyword getIdentxKeyword_0() { return cIdentxKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoEntity|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoEntity|IDENT]
		public CrossReference getPojoPojoEntityCrossReference_2_0() { return cPojoPojoEntityCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoEntityIDENTTerminalRuleCall_2_0_1() { return cPojoPojoEntityIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class ConstantUsageExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantUsageExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoEntityCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoEntityIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoEntityCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ConstantUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"constx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"constx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"constx"
		public Keyword getConstxKeyword_0() { return cConstxKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoEntity|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoEntity|IDENT]
		public CrossReference getPojoPojoEntityCrossReference_2_0() { return cPojoPojoEntityCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoEntityIDENTTerminalRuleCall_2_0_1() { return cPojoPojoEntityIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class MappingUsageExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingUsageExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMappingRuleCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMappingRuleIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMappingRuleCrossReference_1_0.eContents().get(1);
		private final Assignment cPojoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPojoPojoEntityCrossReference_2_0 = (CrossReference)cPojoAssignment_2.eContents().get(0);
		private final RuleCall cPojoPojoEntityIDENTTerminalRuleCall_2_0_1 = (RuleCall)cPojoPojoEntityCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MappingUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"outx" statement=[MappingRule|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"outx" statement=[MappingRule|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON
		public Group getGroup() { return cGroup; }

		//"outx"
		public Keyword getOutxKeyword_0() { return cOutxKeyword_0; }

		//statement=[MappingRule|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MappingRule|IDENT]
		public CrossReference getStatementMappingRuleCrossReference_1_0() { return cStatementMappingRuleCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMappingRuleIDENTTerminalRuleCall_1_0_1() { return cStatementMappingRuleIDENTTerminalRuleCall_1_0_1; }

		//pojo=[PojoEntity|IDENT]
		public Assignment getPojoAssignment_2() { return cPojoAssignment_2; }

		//[PojoEntity|IDENT]
		public CrossReference getPojoPojoEntityCrossReference_2_0() { return cPojoPojoEntityCrossReference_2_0; }

		//IDENT
		public RuleCall getPojoPojoEntityIDENTTerminalRuleCall_2_0_1() { return cPojoPojoEntityIDENTTerminalRuleCall_2_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class TableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableIDENTTerminalRuleCall_2_0 = (RuleCall)cTableAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//TableDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"table" name=IDENT table=IDENT SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"table" name=IDENT table=IDENT SEMICOLON
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//table=IDENT
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }

		//IDENT
		public RuleCall getTableIDENTTerminalRuleCall_2_0() { return cTableIDENTTerminalRuleCall_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class TableUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbcolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatementMetaStatementCrossReference_1_0 = (CrossReference)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementMetaStatementIDENTTerminalRuleCall_1_0_1 = (RuleCall)cStatementMetaStatementCrossReference_1_0.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableTableDefinitionCrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableTableDefinitionIDENTTerminalRuleCall_2_0_1 = (RuleCall)cTableTableDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixIDENTTerminalRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TableUsage hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"dbcol" statement=[MetaStatement|IDENT] table=[TableDefinition|IDENT] ("prefix" prefix=IDENT)? SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"dbcol" statement=[MetaStatement|IDENT] table=[TableDefinition|IDENT] ("prefix" prefix=IDENT)? SEMICOLON
		public Group getGroup() { return cGroup; }

		//"dbcol"
		public Keyword getDbcolKeyword_0() { return cDbcolKeyword_0; }

		//statement=[MetaStatement|IDENT]
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//[MetaStatement|IDENT]
		public CrossReference getStatementMetaStatementCrossReference_1_0() { return cStatementMetaStatementCrossReference_1_0; }

		//IDENT
		public RuleCall getStatementMetaStatementIDENTTerminalRuleCall_1_0_1() { return cStatementMetaStatementIDENTTerminalRuleCall_1_0_1; }

		//table=[TableDefinition|IDENT]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }

		//[TableDefinition|IDENT]
		public CrossReference getTableTableDefinitionCrossReference_2_0() { return cTableTableDefinitionCrossReference_2_0; }

		//IDENT
		public RuleCall getTableTableDefinitionIDENTTerminalRuleCall_2_0_1() { return cTableTableDefinitionIDENTTerminalRuleCall_2_0_1; }

		//("prefix" prefix=IDENT)?
		public Group getGroup_3() { return cGroup_3; }

		//"prefix"
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }

		//prefix=IDENT
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }

		//IDENT
		public RuleCall getPrefixIDENTTerminalRuleCall_3_1_0() { return cPrefixIDENTTerminalRuleCall_3_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class MetaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSTATEMEN_TYPETerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersIDENTTerminalRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementSqlParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//MetaStatement:
		//	name=IDENT LPAREN type=STATEMEN_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS statement=Sql SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=IDENT LPAREN type=STATEMEN_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS statement=Sql SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=STATEMEN_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//STATEMEN_TYPE
		public RuleCall getTypeSTATEMEN_TYPETerminalRuleCall_2_0() { return cTypeSTATEMEN_TYPETerminalRuleCall_2_0; }

		//(COMMA filters+=IDENT)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=IDENT
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//IDENT
		public RuleCall getFiltersIDENTTerminalRuleCall_3_1_0() { return cFiltersIDENTTerminalRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//statement=Sql
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }

		//Sql
		public RuleCall getStatementSqlParserRuleCall_6_0() { return cStatementSqlParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class SqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsSqlFragmentParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//Sql:
		//	sqls+=SqlFragment+;
		public ParserRule getRule() { return rule; }

		//sqls+=SqlFragment+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//SqlFragment
		public RuleCall getSqlsSqlFragmentParserRuleCall_0() { return cSqlsSqlFragmentParserRuleCall_0; }
	}

	public class SqlFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cColAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_1_1_0 = (RuleCall)cColAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCnstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_2_1_0 = (RuleCall)cCnstAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cIdentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_3_1_0 = (RuleCall)cIdentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cMetaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMetaMetaSqlParserRuleCall_4_1_0 = (RuleCall)cMetaAssignment_4_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cPERCENTTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cPERCENTTerminalRuleCall_5_1_0_0 = (RuleCall)cGroup_5_1_0.eContents().get(0);
		private final Assignment cDbtabAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cDbtabDatabaseTableParserRuleCall_5_1_0_1_0 = (RuleCall)cDbtabAssignment_5_1_0_1.eContents().get(0);
		private final Assignment cDbcolAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cDbcolDatabaseColumnParserRuleCall_5_1_1_0 = (RuleCall)cDbcolAssignment_5_1_1.eContents().get(0);
		
		//SqlFragment:
		//	value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE | PERCENT
		//	(PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn);
		public ParserRule getRule() { return rule; }

		//value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE | PERCENT
		//(PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn)
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=SqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SqlValue
		public RuleCall getValueSqlValueParserRuleCall_0_0() { return cValueSqlValueParserRuleCall_0_0; }

		//AT col=Column
		public Group getGroup_1() { return cGroup_1; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0() { return cATTerminalRuleCall_1_0; }

		//col=Column
		public Assignment getColAssignment_1_1() { return cColAssignment_1_1; }

		//Column
		public RuleCall getColColumnParserRuleCall_1_1_0() { return cColColumnParserRuleCall_1_1_0; }

		//STRING cnst=Constant
		public Group getGroup_2() { return cGroup_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_2_1() { return cCnstAssignment_2_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_2_1_0() { return cCnstConstantParserRuleCall_2_1_0; }

		//COLON ident=Identifier
		public Group getGroup_3() { return cGroup_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_0() { return cCOLONTerminalRuleCall_3_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_3_1() { return cIdentAssignment_3_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_3_1_0() { return cIdentIdentifierParserRuleCall_3_1_0; }

		//LBRACE meta=MetaSql RBRACE
		public Group getGroup_4() { return cGroup_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4_0() { return cLBRACETerminalRuleCall_4_0; }

		//meta=MetaSql
		public Assignment getMetaAssignment_4_1() { return cMetaAssignment_4_1; }

		//MetaSql
		public RuleCall getMetaMetaSqlParserRuleCall_4_1_0() { return cMetaMetaSqlParserRuleCall_4_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4_2() { return cRBRACETerminalRuleCall_4_2; }

		//PERCENT (PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn)
		public Group getGroup_5() { return cGroup_5; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_5_0() { return cPERCENTTerminalRuleCall_5_0; }

		//PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//PERCENT dbtab=DatabaseTable
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_5_1_0_0() { return cPERCENTTerminalRuleCall_5_1_0_0; }

		//dbtab=DatabaseTable
		public Assignment getDbtabAssignment_5_1_0_1() { return cDbtabAssignment_5_1_0_1; }

		//DatabaseTable
		public RuleCall getDbtabDatabaseTableParserRuleCall_5_1_0_1_0() { return cDbtabDatabaseTableParserRuleCall_5_1_0_1_0; }

		//dbcol=DatabaseColumn
		public Assignment getDbcolAssignment_5_1_1() { return cDbcolAssignment_5_1_1; }

		//DatabaseColumn
		public RuleCall getDbcolDatabaseColumnParserRuleCall_5_1_1_0() { return cDbcolDatabaseColumnParserRuleCall_5_1_1_0; }
	}

	public class SqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cMINUSTerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cPLUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cLPARENTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cRPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRBRACETerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBORTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cHASHTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cCARETTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cEQUALSTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cLESS_THANTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cMORE_THANTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cANDTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cORTerminalRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cESC_CHARTerminalRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final RuleCall cON_OFFTerminalRuleCall_0_23 = (RuleCall)cAlternatives_0.eContents().get(23);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_0_24 = (RuleCall)cAlternatives_0.eContents().get(24);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_0_25 = (RuleCall)cAlternatives_0.eContents().get(25);
		private final RuleCall cOPTION_TYPETerminalRuleCall_0_26 = (RuleCall)cAlternatives_0.eContents().get(26);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cMINUSTerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cPLUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cLPARENTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cRPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRBRACETerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cBORTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cHASHTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cCARETTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cANDTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		private final RuleCall cORTerminalRuleCall_1_0_21 = (RuleCall)cAlternatives_1_0.eContents().get(21);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_22 = (RuleCall)cAlternatives_1_0.eContents().get(22);
		private final RuleCall cON_OFFTerminalRuleCall_1_0_23 = (RuleCall)cAlternatives_1_0.eContents().get(23);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_1_0_24 = (RuleCall)cAlternatives_1_0.eContents().get(24);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_1_0_25 = (RuleCall)cAlternatives_1_0.eContents().get(25);
		private final RuleCall cOPTION_TYPETerminalRuleCall_1_0_26 = (RuleCall)cAlternatives_1_0.eContents().get(26);
		
		////~(COLON | STRING | AT | LBRACE | SEMICOLON)
		//SqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
		//	| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//	OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI |
		//	NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//	MAPPING_TYPE | OPTION_TYPE)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI |
		//NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_5() { return cCOMMATerminalRuleCall_0_5; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_6() { return cMINUSTerminalRuleCall_0_6; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_7() { return cPLUSTerminalRuleCall_0_7; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_8() { return cLPARENTerminalRuleCall_0_8; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_9() { return cRPARENTerminalRuleCall_0_9; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_0_10() { return cRBRACETerminalRuleCall_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_11() { return cQUESTITerminalRuleCall_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_12() { return cNOTTerminalRuleCall_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_13() { return cBANDTerminalRuleCall_0_13; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_14() { return cBORTerminalRuleCall_0_14; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_15() { return cHASHTerminalRuleCall_0_15; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_16() { return cCARETTerminalRuleCall_0_16; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_17() { return cEQUALSTerminalRuleCall_0_17; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_18() { return cLESS_THANTerminalRuleCall_0_18; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_19() { return cMORE_THANTerminalRuleCall_0_19; }

		//AND
		public RuleCall getANDTerminalRuleCall_0_20() { return cANDTerminalRuleCall_0_20; }

		//OR
		public RuleCall getORTerminalRuleCall_0_21() { return cORTerminalRuleCall_0_21; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_22() { return cESC_CHARTerminalRuleCall_0_22; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_0_23() { return cON_OFFTerminalRuleCall_0_23; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_0_24() { return cSTATEMEN_TYPETerminalRuleCall_0_24; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_0_25() { return cMAPPING_TYPETerminalRuleCall_0_25; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_0_26() { return cOPTION_TYPETerminalRuleCall_0_26; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
		//| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_5() { return cCOMMATerminalRuleCall_1_0_5; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_6() { return cMINUSTerminalRuleCall_1_0_6; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_7() { return cPLUSTerminalRuleCall_1_0_7; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_8() { return cLPARENTerminalRuleCall_1_0_8; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_9() { return cRPARENTerminalRuleCall_1_0_9; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_1_0_10() { return cRBRACETerminalRuleCall_1_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_11() { return cQUESTITerminalRuleCall_1_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_12() { return cNOTTerminalRuleCall_1_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_13() { return cBANDTerminalRuleCall_1_0_13; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_0_14() { return cBORTerminalRuleCall_1_0_14; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_15() { return cHASHTerminalRuleCall_1_0_15; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_16() { return cCARETTerminalRuleCall_1_0_16; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_17() { return cEQUALSTerminalRuleCall_1_0_17; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_18() { return cLESS_THANTerminalRuleCall_1_0_18; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_19() { return cMORE_THANTerminalRuleCall_1_0_19; }

		//AND
		public RuleCall getANDTerminalRuleCall_1_0_20() { return cANDTerminalRuleCall_1_0_20; }

		//OR
		public RuleCall getORTerminalRuleCall_1_0_21() { return cORTerminalRuleCall_1_0_21; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_22() { return cESC_CHARTerminalRuleCall_1_0_22; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_1_0_23() { return cON_OFFTerminalRuleCall_1_0_23; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_1_0_24() { return cSTATEMEN_TYPETerminalRuleCall_1_0_24; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_1_0_25() { return cMAPPING_TYPETerminalRuleCall_1_0_25; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_1_0_26() { return cOPTION_TYPETerminalRuleCall_1_0_26; }
	}

	public class MetaSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaSql");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIfsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_1_0 = (RuleCall)cIfsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Assignment cIfsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_2_1_0 = (RuleCall)cIfsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeQUESTITerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondIfSqlCondParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final RuleCall cBORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cIfsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_1_3_0 = (RuleCall)cIfsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cBORTerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Assignment cIfsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_1_4_1_0 = (RuleCall)cIfsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeBANDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cIfsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_1_0 = (RuleCall)cIfsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cIfsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_2_1_0 = (RuleCall)cIfsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeBORTerminalRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cIfsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_1_0 = (RuleCall)cIfsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cIfsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_2_1_0 = (RuleCall)cIfsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypeEQUALSTerminalRuleCall_4_0_0 = (RuleCall)cTypeAssignment_4_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cFtypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFtypeIDENTTerminalRuleCall_4_2_0 = (RuleCall)cFtypeAssignment_4_2.eContents().get(0);
		private final Assignment cIfsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_4_3_0 = (RuleCall)cIfsAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cTypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTypeHASHTerminalRuleCall_5_0_0 = (RuleCall)cTypeAssignment_5_0.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cOrdAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOrdOrdSqlParserRuleCall_5_2_0 = (RuleCall)cOrdAssignment_5_2.eContents().get(0);
		
		//MetaSql:
		//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
		//	ord=OrdSql;
		public ParserRule getRule() { return rule; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
		//ord=OrdSql
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_0() { return cGroup_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_0() { return cWSTerminalRuleCall_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_1() { return cIfsAssignment_0_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_1_0() { return cIfsIfSqlParserRuleCall_0_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_2_0() { return cBORTerminalRuleCall_0_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_2_1() { return cIfsAssignment_0_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_2_1_0() { return cIfsIfSqlParserRuleCall_0_2_1_0; }

		//type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_1() { return cGroup_1; }

		//type=QUESTI
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//QUESTI
		public RuleCall getTypeQUESTITerminalRuleCall_1_0_0() { return cTypeQUESTITerminalRuleCall_1_0_0; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_1_1_0() { return cCondIfSqlCondParserRuleCall_1_1_0; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_2() { return cBORTerminalRuleCall_1_2; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_3() { return cIfsAssignment_1_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_3_0() { return cIfsIfSqlParserRuleCall_1_3_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_4_0() { return cBORTerminalRuleCall_1_4_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_4_1() { return cIfsAssignment_1_4_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_4_1_0() { return cIfsIfSqlParserRuleCall_1_4_1_0; }

		//type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_2() { return cGroup_2; }

		//type=BAND
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//BAND
		public RuleCall getTypeBANDTerminalRuleCall_2_0_0() { return cTypeBANDTerminalRuleCall_2_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_1() { return cIfsAssignment_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_1_0() { return cIfsIfSqlParserRuleCall_2_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_2_2_0() { return cBORTerminalRuleCall_2_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_2_1() { return cIfsAssignment_2_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_2_1_0() { return cIfsIfSqlParserRuleCall_2_2_1_0; }

		//type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_3() { return cGroup_3; }

		//type=BOR
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//BOR
		public RuleCall getTypeBORTerminalRuleCall_3_0_0() { return cTypeBORTerminalRuleCall_3_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_1() { return cIfsAssignment_3_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_1_0() { return cIfsIfSqlParserRuleCall_3_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_3_2_0() { return cBORTerminalRuleCall_3_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_2_1() { return cIfsAssignment_3_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_2_1_0() { return cIfsIfSqlParserRuleCall_3_2_1_0; }

		//type=EQUALS WS* ftype=IDENT ifs+=IfSql
		public Group getGroup_4() { return cGroup_4; }

		//type=EQUALS
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }

		//EQUALS
		public RuleCall getTypeEQUALSTerminalRuleCall_4_0_0() { return cTypeEQUALSTerminalRuleCall_4_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_4_1() { return cWSTerminalRuleCall_4_1; }

		//ftype=IDENT
		public Assignment getFtypeAssignment_4_2() { return cFtypeAssignment_4_2; }

		//IDENT
		public RuleCall getFtypeIDENTTerminalRuleCall_4_2_0() { return cFtypeIDENTTerminalRuleCall_4_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_4_3() { return cIfsAssignment_4_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_4_3_0() { return cIfsIfSqlParserRuleCall_4_3_0; }

		//type=HASH NUMBER ord=OrdSql
		public Group getGroup_5() { return cGroup_5; }

		//type=HASH
		public Assignment getTypeAssignment_5_0() { return cTypeAssignment_5_0; }

		//HASH
		public RuleCall getTypeHASHTerminalRuleCall_5_0_0() { return cTypeHASHTerminalRuleCall_5_0_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_5_1() { return cNUMBERTerminalRuleCall_5_1; }

		//ord=OrdSql
		public Assignment getOrdAssignment_5_2() { return cOrdAssignment_5_2; }

		//OrdSql
		public RuleCall getOrdOrdSqlParserRuleCall_5_2_0() { return cOrdOrdSqlParserRuleCall_5_2_0; }
	}

	public class IfSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsIfSqlFragmentParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//IfSql:
		//	sqls+=IfSqlFragment+;
		public ParserRule getRule() { return rule; }

		//sqls+=IfSqlFragment+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//IfSqlFragment
		public RuleCall getSqlsIfSqlFragmentParserRuleCall_0() { return cSqlsIfSqlFragmentParserRuleCall_0; }
	}

	public class IfSqlFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIfSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cColAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_1_1_0 = (RuleCall)cColAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCnstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_2_1_0 = (RuleCall)cCnstAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cIdentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_3_1_0 = (RuleCall)cIdentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPERCENTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cPERCENTTerminalRuleCall_4_1_0_0 = (RuleCall)cGroup_4_1_0.eContents().get(0);
		private final Assignment cDbtabAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cDbtabDatabaseTableParserRuleCall_4_1_0_1_0 = (RuleCall)cDbtabAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cDbcolAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cDbcolDatabaseColumnParserRuleCall_4_1_1_0 = (RuleCall)cDbcolAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cLBRACETerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cMetaAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMetaIfMetaSqlParserRuleCall_5_1_0 = (RuleCall)cMetaAssignment_5_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		
		//IfSqlFragment:
		//	value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | PERCENT (PERCENT
		//	dbtab=DatabaseTable | dbcol=DatabaseColumn) | LBRACE meta=IfMetaSql RBRACE;
		public ParserRule getRule() { return rule; }

		//value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | PERCENT (PERCENT dbtab=DatabaseTable
		//| dbcol=DatabaseColumn) | LBRACE meta=IfMetaSql RBRACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=IfSqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//IfSqlValue
		public RuleCall getValueIfSqlValueParserRuleCall_0_0() { return cValueIfSqlValueParserRuleCall_0_0; }

		//AT col=Column
		public Group getGroup_1() { return cGroup_1; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0() { return cATTerminalRuleCall_1_0; }

		//col=Column
		public Assignment getColAssignment_1_1() { return cColAssignment_1_1; }

		//Column
		public RuleCall getColColumnParserRuleCall_1_1_0() { return cColColumnParserRuleCall_1_1_0; }

		//STRING cnst=Constant
		public Group getGroup_2() { return cGroup_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_2_1() { return cCnstAssignment_2_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_2_1_0() { return cCnstConstantParserRuleCall_2_1_0; }

		//COLON ident=Identifier
		public Group getGroup_3() { return cGroup_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_0() { return cCOLONTerminalRuleCall_3_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_3_1() { return cIdentAssignment_3_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_3_1_0() { return cIdentIdentifierParserRuleCall_3_1_0; }

		//PERCENT (PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn)
		public Group getGroup_4() { return cGroup_4; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_4_0() { return cPERCENTTerminalRuleCall_4_0; }

		//PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//PERCENT dbtab=DatabaseTable
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_4_1_0_0() { return cPERCENTTerminalRuleCall_4_1_0_0; }

		//dbtab=DatabaseTable
		public Assignment getDbtabAssignment_4_1_0_1() { return cDbtabAssignment_4_1_0_1; }

		//DatabaseTable
		public RuleCall getDbtabDatabaseTableParserRuleCall_4_1_0_1_0() { return cDbtabDatabaseTableParserRuleCall_4_1_0_1_0; }

		//dbcol=DatabaseColumn
		public Assignment getDbcolAssignment_4_1_1() { return cDbcolAssignment_4_1_1; }

		//DatabaseColumn
		public RuleCall getDbcolDatabaseColumnParserRuleCall_4_1_1_0() { return cDbcolDatabaseColumnParserRuleCall_4_1_1_0; }

		//LBRACE meta=IfMetaSql RBRACE
		public Group getGroup_5() { return cGroup_5; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_5_0() { return cLBRACETerminalRuleCall_5_0; }

		//meta=IfMetaSql
		public Assignment getMetaAssignment_5_1() { return cMetaAssignment_5_1; }

		//IfMetaSql
		public RuleCall getMetaIfMetaSqlParserRuleCall_5_1_0() { return cMetaIfMetaSqlParserRuleCall_5_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_5_2() { return cRBRACETerminalRuleCall_5_2; }
	}

	public class IfSqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cHASHTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cCARETTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cEQUALSTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cLESS_THANTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cMORE_THANTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cANDTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cORTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cESC_CHARTerminalRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cON_OFFTerminalRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_0_23 = (RuleCall)cAlternatives_0.eContents().get(23);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_0_24 = (RuleCall)cAlternatives_0.eContents().get(24);
		private final RuleCall cOPTION_TYPETerminalRuleCall_0_25 = (RuleCall)cAlternatives_0.eContents().get(25);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cHASHTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cCARETTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cANDTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cORTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_21 = (RuleCall)cAlternatives_1_0.eContents().get(21);
		private final RuleCall cON_OFFTerminalRuleCall_1_0_22 = (RuleCall)cAlternatives_1_0.eContents().get(22);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_1_0_23 = (RuleCall)cAlternatives_1_0.eContents().get(23);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_1_0_24 = (RuleCall)cAlternatives_1_0.eContents().get(24);
		private final RuleCall cOPTION_TYPETerminalRuleCall_1_0_25 = (RuleCall)cAlternatives_1_0.eContents().get(25);
		
		////~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
		//IfSqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//	HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//	OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI
		//	| NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//	MAPPING_TYPE | OPTION_TYPE)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI |
		//NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH
		//| CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_5() { return cSEMICOLONTerminalRuleCall_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_7() { return cMINUSTerminalRuleCall_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_8() { return cPLUSTerminalRuleCall_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_9() { return cLPARENTerminalRuleCall_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_10() { return cRPARENTerminalRuleCall_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_11() { return cQUESTITerminalRuleCall_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_12() { return cNOTTerminalRuleCall_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_13() { return cBANDTerminalRuleCall_0_13; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_14() { return cHASHTerminalRuleCall_0_14; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_15() { return cCARETTerminalRuleCall_0_15; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_16() { return cEQUALSTerminalRuleCall_0_16; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_17() { return cLESS_THANTerminalRuleCall_0_17; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_18() { return cMORE_THANTerminalRuleCall_0_18; }

		//AND
		public RuleCall getANDTerminalRuleCall_0_19() { return cANDTerminalRuleCall_0_19; }

		//OR
		public RuleCall getORTerminalRuleCall_0_20() { return cORTerminalRuleCall_0_20; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_21() { return cESC_CHARTerminalRuleCall_0_21; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_0_22() { return cON_OFFTerminalRuleCall_0_22; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_0_23() { return cSTATEMEN_TYPETerminalRuleCall_0_23; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_0_24() { return cMAPPING_TYPETerminalRuleCall_0_24; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_0_25() { return cOPTION_TYPETerminalRuleCall_0_25; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
		//OPTION_TYPE)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH
		//| CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_5() { return cSEMICOLONTerminalRuleCall_1_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_6() { return cCOMMATerminalRuleCall_1_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_7() { return cMINUSTerminalRuleCall_1_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_8() { return cPLUSTerminalRuleCall_1_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_9() { return cLPARENTerminalRuleCall_1_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_10() { return cRPARENTerminalRuleCall_1_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_11() { return cQUESTITerminalRuleCall_1_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_12() { return cNOTTerminalRuleCall_1_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_13() { return cBANDTerminalRuleCall_1_0_13; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_14() { return cHASHTerminalRuleCall_1_0_14; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_15() { return cCARETTerminalRuleCall_1_0_15; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_16() { return cEQUALSTerminalRuleCall_1_0_16; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_17() { return cLESS_THANTerminalRuleCall_1_0_17; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_18() { return cMORE_THANTerminalRuleCall_1_0_18; }

		//AND
		public RuleCall getANDTerminalRuleCall_1_0_19() { return cANDTerminalRuleCall_1_0_19; }

		//OR
		public RuleCall getORTerminalRuleCall_1_0_20() { return cORTerminalRuleCall_1_0_20; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_21() { return cESC_CHARTerminalRuleCall_1_0_21; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_1_0_22() { return cON_OFFTerminalRuleCall_1_0_22; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_1_0_23() { return cSTATEMEN_TYPETerminalRuleCall_1_0_23; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_1_0_24() { return cMAPPING_TYPETerminalRuleCall_1_0_24; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_1_0_25() { return cOPTION_TYPETerminalRuleCall_1_0_25; }
	}

	public class IfMetaSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfMetaSql");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIfsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_1_0 = (RuleCall)cIfsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Assignment cIfsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_2_1_0 = (RuleCall)cIfsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeQUESTITerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondIfSqlCondParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final RuleCall cBORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cIfsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_1_3_0 = (RuleCall)cIfsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cBORTerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Assignment cIfsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_1_4_1_0 = (RuleCall)cIfsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeBANDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cIfsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_1_0 = (RuleCall)cIfsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cIfsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_2_1_0 = (RuleCall)cIfsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeBORTerminalRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cIfsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_1_0 = (RuleCall)cIfsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cIfsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_2_1_0 = (RuleCall)cIfsAssignment_3_2_1.eContents().get(0);
		
		//IfMetaSql:
		//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*;
		public ParserRule getRule() { return rule; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_0() { return cGroup_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_0() { return cWSTerminalRuleCall_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_1() { return cIfsAssignment_0_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_1_0() { return cIfsIfSqlParserRuleCall_0_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_2_0() { return cBORTerminalRuleCall_0_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_2_1() { return cIfsAssignment_0_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_2_1_0() { return cIfsIfSqlParserRuleCall_0_2_1_0; }

		//type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_1() { return cGroup_1; }

		//type=QUESTI
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//QUESTI
		public RuleCall getTypeQUESTITerminalRuleCall_1_0_0() { return cTypeQUESTITerminalRuleCall_1_0_0; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_1_1_0() { return cCondIfSqlCondParserRuleCall_1_1_0; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_2() { return cBORTerminalRuleCall_1_2; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_3() { return cIfsAssignment_1_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_3_0() { return cIfsIfSqlParserRuleCall_1_3_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_4_0() { return cBORTerminalRuleCall_1_4_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_4_1() { return cIfsAssignment_1_4_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_4_1_0() { return cIfsIfSqlParserRuleCall_1_4_1_0; }

		//type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_2() { return cGroup_2; }

		//type=BAND
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//BAND
		public RuleCall getTypeBANDTerminalRuleCall_2_0_0() { return cTypeBANDTerminalRuleCall_2_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_1() { return cIfsAssignment_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_1_0() { return cIfsIfSqlParserRuleCall_2_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_2_2_0() { return cBORTerminalRuleCall_2_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_2_1() { return cIfsAssignment_2_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_2_1_0() { return cIfsIfSqlParserRuleCall_2_2_1_0; }

		//type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_3() { return cGroup_3; }

		//type=BOR
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//BOR
		public RuleCall getTypeBORTerminalRuleCall_3_0_0() { return cTypeBORTerminalRuleCall_3_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_1() { return cIfsAssignment_3_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_1_0() { return cIfsIfSqlParserRuleCall_3_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_3_2_0() { return cBORTerminalRuleCall_3_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_2_1() { return cIfsAssignment_3_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_2_1_0() { return cIfsIfSqlParserRuleCall_3_2_1_0; }
	}

	public class IfSqlCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBool1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBool1IfSqlBoolParserRuleCall_1_0 = (RuleCall)cBool1Assignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cOperAlternatives_3_0_0 = (Alternatives)cOperAssignment_3_0.eContents().get(0);
		private final RuleCall cOperANDTerminalRuleCall_3_0_0_0 = (RuleCall)cOperAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cOperORTerminalRuleCall_3_0_0_1 = (RuleCall)cOperAlternatives_3_0_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cBool2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBool2IfSqlBoolParserRuleCall_3_2_0 = (RuleCall)cBool2Assignment_3_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//IfSqlCond:
		//	WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*;
		public ParserRule getRule() { return rule; }

		//WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//bool1=IfSqlBool
		public Assignment getBool1Assignment_1() { return cBool1Assignment_1; }

		//IfSqlBool
		public RuleCall getBool1IfSqlBoolParserRuleCall_1_0() { return cBool1IfSqlBoolParserRuleCall_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//(oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*
		public Group getGroup_3() { return cGroup_3; }

		//oper+=(AND | OR)
		public Assignment getOperAssignment_3_0() { return cOperAssignment_3_0; }

		//AND | OR
		public Alternatives getOperAlternatives_3_0_0() { return cOperAlternatives_3_0_0; }

		//AND
		public RuleCall getOperANDTerminalRuleCall_3_0_0_0() { return cOperANDTerminalRuleCall_3_0_0_0; }

		//OR
		public RuleCall getOperORTerminalRuleCall_3_0_0_1() { return cOperORTerminalRuleCall_3_0_0_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }

		//bool2+=IfSqlBool
		public Assignment getBool2Assignment_3_2() { return cBool2Assignment_3_2; }

		//IfSqlBool
		public RuleCall getBool2IfSqlBoolParserRuleCall_3_2_0() { return cBool2IfSqlBoolParserRuleCall_3_2_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_3() { return cWSTerminalRuleCall_3_3; }
	}

	public class IfSqlBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cCnstAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCnstConstantParserRuleCall_0_2_0 = (RuleCall)cCnstAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_1_0_0 = (RuleCall)cNotAssignment_1_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cIdentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentIdentifierParserRuleCall_1_2_0 = (RuleCall)cIdentAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNotAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_2_0_0 = (RuleCall)cNotAssignment_2_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cCondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCondIfSqlCondParserRuleCall_2_2_0 = (RuleCall)cCondAssignment_2_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//IfSqlBool:
		//	not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN;
		public ParserRule getRule() { return rule; }

		//not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//not?=NOT? STRING cnst=Constant
		public Group getGroup_0() { return cGroup_0; }

		//not?=NOT?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_0_0_0() { return cNotNOTTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//cnst=Constant
		public Assignment getCnstAssignment_0_2() { return cCnstAssignment_0_2; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_0_2_0() { return cCnstConstantParserRuleCall_0_2_0; }

		//not?=NOT? COLON ident=Identifier
		public Group getGroup_1() { return cGroup_1; }

		//not?=NOT?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_1_0_0() { return cNotNOTTerminalRuleCall_1_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1() { return cCOLONTerminalRuleCall_1_1; }

		//ident=Identifier
		public Assignment getIdentAssignment_1_2() { return cIdentAssignment_1_2; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_1_2_0() { return cIdentIdentifierParserRuleCall_1_2_0; }

		//not?=NOT? LPAREN cond=IfSqlCond RPAREN
		public Group getGroup_2() { return cGroup_2; }

		//not?=NOT?
		public Assignment getNotAssignment_2_0() { return cNotAssignment_2_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_2_0_0() { return cNotNOTTerminalRuleCall_2_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_1() { return cLPARENTerminalRuleCall_2_1; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_2_2() { return cCondAssignment_2_2; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_2_2_0() { return cCondIfSqlCondParserRuleCall_2_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_3() { return cRPARENTerminalRuleCall_2_3; }
	}

	public class OrdSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsOrdSql2ParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//OrdSql:
		//	sqls+=OrdSql2+;
		public ParserRule getRule() { return rule; }

		//sqls+=OrdSql2+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//OrdSql2
		public RuleCall getSqlsOrdSql2ParserRuleCall_0() { return cSqlsOrdSql2ParserRuleCall_0; }
	}

	public class OrdSql2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSql2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueOrdSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCnstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_1_1_0 = (RuleCall)cCnstAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIdentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_2_1_0 = (RuleCall)cIdentAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cPERCENTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cDbcolAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDbcolDatabaseColumnParserRuleCall_3_1_0 = (RuleCall)cDbcolAssignment_3_1.eContents().get(0);
		
		//OrdSql2:
		//	value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier | PERCENT dbcol=DatabaseColumn;
		public ParserRule getRule() { return rule; }

		//value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier | PERCENT dbcol=DatabaseColumn
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=OrdSqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//OrdSqlValue
		public RuleCall getValueOrdSqlValueParserRuleCall_0_0() { return cValueOrdSqlValueParserRuleCall_0_0; }

		//STRING cnst=Constant
		public Group getGroup_1() { return cGroup_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_1_1() { return cCnstAssignment_1_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_1_1_0() { return cCnstConstantParserRuleCall_1_1_0; }

		//COLON ident=Identifier
		public Group getGroup_2() { return cGroup_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_0() { return cCOLONTerminalRuleCall_2_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_2_1() { return cIdentAssignment_2_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_2_1_0() { return cIdentIdentifierParserRuleCall_2_1_0; }

		//PERCENT dbcol=DatabaseColumn
		public Group getGroup_3() { return cGroup_3; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_3_0() { return cPERCENTTerminalRuleCall_3_0; }

		//dbcol=DatabaseColumn
		public Assignment getDbcolAssignment_3_1() { return cDbcolAssignment_3_1; }

		//DatabaseColumn
		public RuleCall getDbcolDatabaseColumnParserRuleCall_3_1_0() { return cDbcolDatabaseColumnParserRuleCall_3_1_0; }
	}

	public class OrdSqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cLBRACETerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cQUESTITerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cNOTTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBANDTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cBORTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cHASHTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cATTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cCARETTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cEQUALSTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cLESS_THANTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cMORE_THANTerminalRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cANDTerminalRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final RuleCall cORTerminalRuleCall_0_23 = (RuleCall)cAlternatives_0.eContents().get(23);
		private final RuleCall cESC_CHARTerminalRuleCall_0_24 = (RuleCall)cAlternatives_0.eContents().get(24);
		private final RuleCall cON_OFFTerminalRuleCall_0_25 = (RuleCall)cAlternatives_0.eContents().get(25);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_0_26 = (RuleCall)cAlternatives_0.eContents().get(26);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_0_27 = (RuleCall)cAlternatives_0.eContents().get(27);
		private final RuleCall cOPTION_TYPETerminalRuleCall_0_28 = (RuleCall)cAlternatives_0.eContents().get(28);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cLBRACETerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cQUESTITerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cNOTTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cBANDTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cBORTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cHASHTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cATTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cCARETTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_21 = (RuleCall)cAlternatives_1_0.eContents().get(21);
		private final RuleCall cANDTerminalRuleCall_1_0_22 = (RuleCall)cAlternatives_1_0.eContents().get(22);
		private final RuleCall cORTerminalRuleCall_1_0_23 = (RuleCall)cAlternatives_1_0.eContents().get(23);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_24 = (RuleCall)cAlternatives_1_0.eContents().get(24);
		private final RuleCall cON_OFFTerminalRuleCall_1_0_25 = (RuleCall)cAlternatives_1_0.eContents().get(25);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_1_0_26 = (RuleCall)cAlternatives_1_0.eContents().get(26);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_1_0_27 = (RuleCall)cAlternatives_1_0.eContents().get(27);
		private final RuleCall cOPTION_TYPETerminalRuleCall_1_0_28 = (RuleCall)cAlternatives_1_0.eContents().get(28);
		
		////~(COLON | STRING | PERCENT | RBRACE)
		//OrdSqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//	BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//	MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN |
		//	RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR
		//	| ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN |
		//RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR
		//| ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_5() { return cSEMICOLONTerminalRuleCall_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_7() { return cMINUSTerminalRuleCall_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_8() { return cPLUSTerminalRuleCall_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_9() { return cLPARENTerminalRuleCall_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_10() { return cRPARENTerminalRuleCall_0_10; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_0_11() { return cLBRACETerminalRuleCall_0_11; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_12() { return cQUESTITerminalRuleCall_0_12; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_13() { return cNOTTerminalRuleCall_0_13; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_14() { return cBANDTerminalRuleCall_0_14; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_15() { return cBORTerminalRuleCall_0_15; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_16() { return cHASHTerminalRuleCall_0_16; }

		//AT
		public RuleCall getATTerminalRuleCall_0_17() { return cATTerminalRuleCall_0_17; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_18() { return cCARETTerminalRuleCall_0_18; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_19() { return cEQUALSTerminalRuleCall_0_19; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_20() { return cLESS_THANTerminalRuleCall_0_20; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_21() { return cMORE_THANTerminalRuleCall_0_21; }

		//AND
		public RuleCall getANDTerminalRuleCall_0_22() { return cANDTerminalRuleCall_0_22; }

		//OR
		public RuleCall getORTerminalRuleCall_0_23() { return cORTerminalRuleCall_0_23; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_24() { return cESC_CHARTerminalRuleCall_0_24; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_0_25() { return cON_OFFTerminalRuleCall_0_25; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_0_26() { return cSTATEMEN_TYPETerminalRuleCall_0_26; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_0_27() { return cMAPPING_TYPETerminalRuleCall_0_27; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_0_28() { return cOPTION_TYPETerminalRuleCall_0_28; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT
		//| BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
		//MAPPING_TYPE | OPTION_TYPE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_5() { return cSEMICOLONTerminalRuleCall_1_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_6() { return cCOMMATerminalRuleCall_1_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_7() { return cMINUSTerminalRuleCall_1_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_8() { return cPLUSTerminalRuleCall_1_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_9() { return cLPARENTerminalRuleCall_1_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_10() { return cRPARENTerminalRuleCall_1_0_10; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_1_0_11() { return cLBRACETerminalRuleCall_1_0_11; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_12() { return cQUESTITerminalRuleCall_1_0_12; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_13() { return cNOTTerminalRuleCall_1_0_13; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_14() { return cBANDTerminalRuleCall_1_0_14; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_0_15() { return cBORTerminalRuleCall_1_0_15; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_16() { return cHASHTerminalRuleCall_1_0_16; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0_17() { return cATTerminalRuleCall_1_0_17; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_18() { return cCARETTerminalRuleCall_1_0_18; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_19() { return cEQUALSTerminalRuleCall_1_0_19; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_20() { return cLESS_THANTerminalRuleCall_1_0_20; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_21() { return cMORE_THANTerminalRuleCall_1_0_21; }

		//AND
		public RuleCall getANDTerminalRuleCall_1_0_22() { return cANDTerminalRuleCall_1_0_22; }

		//OR
		public RuleCall getORTerminalRuleCall_1_0_23() { return cORTerminalRuleCall_1_0_23; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_24() { return cESC_CHARTerminalRuleCall_1_0_24; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_1_0_25() { return cON_OFFTerminalRuleCall_1_0_25; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_1_0_26() { return cSTATEMEN_TYPETerminalRuleCall_1_0_26; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_1_0_27() { return cMAPPING_TYPETerminalRuleCall_1_0_27; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_1_0_28() { return cOPTION_TYPETerminalRuleCall_1_0_28; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final RuleCall cNameNUMBERTerminalRuleCall_0_0_2 = (RuleCall)cNameAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCARETTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cValsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cValsAlternatives_1_2_1_0 = (Alternatives)cValsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_1_2_1_0_0 = (RuleCall)cValsAlternatives_1_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_1_2_1_0_1 = (RuleCall)cValsAlternatives_1_2_1_0.eContents().get(1);
		
		//Column:
		//	name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//name=(IDENT | IDENT_DOT | NUMBER)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT | IDENT_DOT | NUMBER
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_0_1; }

		//NUMBER
		public RuleCall getNameNUMBERTerminalRuleCall_0_0_2() { return cNameNUMBERTerminalRuleCall_0_0_2; }

		//(=> CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_1() { return cGroup_1; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_1_0() { return cCARETTerminalRuleCall_1_0; }

		//=> type=IDENT?
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_1_1_0() { return cTypeIDENTTerminalRuleCall_1_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_1_2_0() { return cCARETTerminalRuleCall_1_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_1_2_1() { return cValsAssignment_1_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_1_2_1_0() { return cValsAlternatives_1_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_1_2_1_0_0() { return cValsIDENTTerminalRuleCall_1_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_1_2_1_0_1() { return cValsNUMBERTerminalRuleCall_1_2_1_0_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCaseAlternatives_0_0 = (Alternatives)cCaseAssignment_0.eContents().get(0);
		private final RuleCall cCasePLUSTerminalRuleCall_0_0_0 = (RuleCall)cCaseAlternatives_0_0.eContents().get(0);
		private final RuleCall cCaseMINUSTerminalRuleCall_0_0_1 = (RuleCall)cCaseAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cValsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cValsAlternatives_2_2_1_0 = (Alternatives)cValsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_2_2_1_0_0 = (RuleCall)cValsAlternatives_2_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_2_2_1_0_1 = (RuleCall)cValsAlternatives_2_2_1_0.eContents().get(1);
		
		//Constant:
		//	case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//case=(PLUS | MINUS)?
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }

		//PLUS | MINUS
		public Alternatives getCaseAlternatives_0_0() { return cCaseAlternatives_0_0; }

		//PLUS
		public RuleCall getCasePLUSTerminalRuleCall_0_0_0() { return cCasePLUSTerminalRuleCall_0_0_0; }

		//MINUS
		public RuleCall getCaseMINUSTerminalRuleCall_0_0_1() { return cCaseMINUSTerminalRuleCall_0_0_1; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0_0() { return cNameIDENTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_1_0_1() { return cNameIDENT_DOTTerminalRuleCall_1_0_1; }

		//(=> CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_2() { return cGroup_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_2_0() { return cCARETTerminalRuleCall_2_0; }

		//=> type=IDENT?
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_2_1_0() { return cTypeIDENTTerminalRuleCall_2_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_2_2_0() { return cCARETTerminalRuleCall_2_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_2_2_1() { return cValsAssignment_2_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_2_2_1_0() { return cValsAlternatives_2_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_2_2_1_0_0() { return cValsIDENTTerminalRuleCall_2_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_2_2_1_0_1() { return cValsNUMBERTerminalRuleCall_2_2_1_0_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModeAlternatives_0_0 = (Alternatives)cModeAssignment_0.eContents().get(0);
		private final RuleCall cModeEQUALSTerminalRuleCall_0_0_0 = (RuleCall)cModeAlternatives_0_0.eContents().get(0);
		private final RuleCall cModeLESS_THANTerminalRuleCall_0_0_1 = (RuleCall)cModeAlternatives_0_0.eContents().get(1);
		private final RuleCall cModeMORE_THANTerminalRuleCall_0_0_2 = (RuleCall)cModeAlternatives_0_0.eContents().get(2);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCaseAlternatives_1_0 = (Alternatives)cCaseAssignment_1.eContents().get(0);
		private final RuleCall cCasePLUSTerminalRuleCall_1_0_0 = (RuleCall)cCaseAlternatives_1_0.eContents().get(0);
		private final RuleCall cCaseMINUSTerminalRuleCall_1_0_1 = (RuleCall)cCaseAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cNameNUMBERTerminalRuleCall_2_0_2 = (RuleCall)cNameAlternatives_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCARETTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cValsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Alternatives cValsAlternatives_3_2_1_0 = (Alternatives)cValsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_3_2_1_0_0 = (RuleCall)cValsAlternatives_3_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_3_2_1_0_1 = (RuleCall)cValsAlternatives_3_2_1_0.eContents().get(1);
		
		//Identifier:
		//	mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT?
		//	(CARET vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT?
		//(CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//mode=(EQUALS | LESS_THAN | MORE_THAN)?
		public Assignment getModeAssignment_0() { return cModeAssignment_0; }

		//EQUALS | LESS_THAN | MORE_THAN
		public Alternatives getModeAlternatives_0_0() { return cModeAlternatives_0_0; }

		//EQUALS
		public RuleCall getModeEQUALSTerminalRuleCall_0_0_0() { return cModeEQUALSTerminalRuleCall_0_0_0; }

		//LESS_THAN
		public RuleCall getModeLESS_THANTerminalRuleCall_0_0_1() { return cModeLESS_THANTerminalRuleCall_0_0_1; }

		//MORE_THAN
		public RuleCall getModeMORE_THANTerminalRuleCall_0_0_2() { return cModeMORE_THANTerminalRuleCall_0_0_2; }

		//case=(PLUS | MINUS)?
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//PLUS | MINUS
		public Alternatives getCaseAlternatives_1_0() { return cCaseAlternatives_1_0; }

		//PLUS
		public RuleCall getCasePLUSTerminalRuleCall_1_0_0() { return cCasePLUSTerminalRuleCall_1_0_0; }

		//MINUS
		public RuleCall getCaseMINUSTerminalRuleCall_1_0_1() { return cCaseMINUSTerminalRuleCall_1_0_1; }

		//name=(IDENT | IDENT_DOT | NUMBER)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT | IDENT_DOT | NUMBER
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0_0() { return cNameIDENTTerminalRuleCall_2_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_2_0_1() { return cNameIDENT_DOTTerminalRuleCall_2_0_1; }

		//NUMBER
		public RuleCall getNameNUMBERTerminalRuleCall_2_0_2() { return cNameNUMBERTerminalRuleCall_2_0_2; }

		//(=> CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_3_0() { return cCARETTerminalRuleCall_3_0; }

		//=> type=IDENT?
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_3_1_0() { return cTypeIDENTTerminalRuleCall_3_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_3_2_0() { return cCARETTerminalRuleCall_3_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_3_2_1() { return cValsAssignment_3_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_3_2_1_0() { return cValsAlternatives_3_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_3_2_1_0_0() { return cValsIDENTTerminalRuleCall_3_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_3_2_1_0_1() { return cValsNUMBERTerminalRuleCall_3_2_1_0_1; }
	}

	public class DatabaseColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseColumn");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//DatabaseColumn:
		//	name=(IDENT | IDENT_DOT);
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_1; }
	}

	public class DatabaseTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseTable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//DatabaseTable:
		//	name=(IDENT | IDENT_DOT);
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_1; }
	}

	public class MappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeMAPPING_TYPETerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersIDENTTerminalRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cMappingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingMappingParserRuleCall_6_0 = (RuleCall)cMappingAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//MappingRule:
		//	name=IDENT LPAREN type=MAPPING_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS mapping=Mapping SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=IDENT LPAREN type=MAPPING_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS mapping=Mapping SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=MAPPING_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//MAPPING_TYPE
		public RuleCall getTypeMAPPING_TYPETerminalRuleCall_2_0() { return cTypeMAPPING_TYPETerminalRuleCall_2_0; }

		//(COMMA filters+=IDENT)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=IDENT
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//IDENT
		public RuleCall getFiltersIDENTTerminalRuleCall_3_1_0() { return cFiltersIDENTTerminalRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//mapping=Mapping
		public Assignment getMappingAssignment_6() { return cMappingAssignment_6; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_6_0() { return cMappingMappingParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cMappingItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingItemsMappingItemParserRuleCall_1_0 = (RuleCall)cMappingItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMappingItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMappingItemsMappingItemParserRuleCall_2_1_0 = (RuleCall)cMappingItemsAssignment_2_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Mapping:
		//	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;
		public ParserRule getRule() { return rule; }

		//WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//mappingItems+=MappingItem
		public Assignment getMappingItemsAssignment_1() { return cMappingItemsAssignment_1; }

		//MappingItem
		public RuleCall getMappingItemsMappingItemParserRuleCall_1_0() { return cMappingItemsMappingItemParserRuleCall_1_0; }

		//(WS+ mappingItems+=MappingItem)*
		public Group getGroup_2() { return cGroup_2; }

		//WS+
		public RuleCall getWSTerminalRuleCall_2_0() { return cWSTerminalRuleCall_2_0; }

		//mappingItems+=MappingItem
		public Assignment getMappingItemsAssignment_2_1() { return cMappingItemsAssignment_2_1; }

		//MappingItem
		public RuleCall getMappingItemsMappingItemParserRuleCall_2_1_0() { return cMappingItemsMappingItemParserRuleCall_2_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
	}

	public class MappingItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cColAlternatives_0_0 = (Alternatives)cColAssignment_0.eContents().get(0);
		private final RuleCall cColIDENTTerminalRuleCall_0_0_0 = (RuleCall)cColAlternatives_0_0.eContents().get(0);
		private final RuleCall cColNUMBERTerminalRuleCall_0_0_1 = (RuleCall)cColAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cAttrAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttrMappingColumnParserRuleCall_1_2_1_0 = (RuleCall)cAttrAssignment_1_2_1.eContents().get(0);
		
		//MappingItem:
		//	col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingColumn)?)?;
		public ParserRule getRule() { return rule; }

		//col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingColumn)?)?
		public Group getGroup() { return cGroup; }

		//col=(IDENT | NUMBER)
		public Assignment getColAssignment_0() { return cColAssignment_0; }

		//IDENT | NUMBER
		public Alternatives getColAlternatives_0_0() { return cColAlternatives_0_0; }

		//IDENT
		public RuleCall getColIDENTTerminalRuleCall_0_0_0() { return cColIDENTTerminalRuleCall_0_0_0; }

		//NUMBER
		public RuleCall getColNUMBERTerminalRuleCall_0_0_1() { return cColNUMBERTerminalRuleCall_0_0_1; }

		//(STRING type=IDENT? (STRING attr=MappingColumn)?)?
		public Group getGroup_1() { return cGroup_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//type=IDENT?
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_1_1_0() { return cTypeIDENTTerminalRuleCall_1_1_0; }

		//(STRING attr=MappingColumn)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2_0() { return cSTRINGTerminalRuleCall_1_2_0; }

		//attr=MappingColumn
		public Assignment getAttrAssignment_1_2_1() { return cAttrAssignment_1_2_1; }

		//MappingColumn
		public RuleCall getAttrMappingColumnParserRuleCall_1_2_1_0() { return cAttrMappingColumnParserRuleCall_1_2_1_0; }
	}

	public class MappingColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCARETTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValsAlternatives_1_1_0 = (Alternatives)cValsAssignment_1_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_1_1_0_0 = (RuleCall)cValsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_1_1_0_1 = (RuleCall)cValsAlternatives_1_1_0.eContents().get(1);
		
		//MappingColumn:
		//	name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*;
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*
		public Group getGroup() { return cGroup; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_0_1; }

		//(CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_1() { return cGroup_1; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0() { return cCARETTerminalRuleCall_1_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_1_1_0() { return cValsAlternatives_1_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_1_1_0_0() { return cValsIDENTTerminalRuleCall_1_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_1_1_0_1() { return cValsNUMBERTerminalRuleCall_1_1_0_1; }
	}

	public class OptionalFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOPTION_TYPETerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersIDENTTerminalRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cOptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionFeatureValueParserRuleCall_6_0 = (RuleCall)cOptionAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//OptionalFeature:
		//	name=IDENT LPAREN type=OPTION_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS option=FeatureValue SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=IDENT LPAREN type=OPTION_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS option=FeatureValue SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=OPTION_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OPTION_TYPE
		public RuleCall getTypeOPTION_TYPETerminalRuleCall_2_0() { return cTypeOPTION_TYPETerminalRuleCall_2_0; }

		//(COMMA filters+=IDENT)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=IDENT
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//IDENT
		public RuleCall getFiltersIDENTTerminalRuleCall_3_1_0() { return cFiltersIDENTTerminalRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//option=FeatureValue
		public Assignment getOptionAssignment_6() { return cOptionAssignment_6; }

		//FeatureValue
		public RuleCall getOptionFeatureValueParserRuleCall_6_0() { return cOptionFeatureValueParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRESTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCOLONTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMINUSTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPLUSTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLPARENTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRPARENTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLBRACETerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRBRACETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cQUESTITerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNOTTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cBANDTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cBORTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cHASHTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cATTerminalRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cCARETTerminalRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cEQUALSTerminalRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLESS_THANTerminalRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cMORE_THANTerminalRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cPERCENTTerminalRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cANDTerminalRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cORTerminalRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cESC_CHARTerminalRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cON_OFFTerminalRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cSTATEMEN_TYPETerminalRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cMAPPING_TYPETerminalRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cOPTION_TYPETerminalRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		
		//FeatureValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR |
		//	ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)+;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF
		//| STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0() { return cRESTTerminalRuleCall_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1() { return cIDENT_DOTTerminalRuleCall_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_3() { return cNUMBERTerminalRuleCall_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_5() { return cCOLONTerminalRuleCall_5; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7() { return cCOMMATerminalRuleCall_7; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_8() { return cMINUSTerminalRuleCall_8; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_9() { return cPLUSTerminalRuleCall_9; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_10() { return cLPARENTerminalRuleCall_10; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_11() { return cRPARENTerminalRuleCall_11; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_12() { return cLBRACETerminalRuleCall_12; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_13() { return cRBRACETerminalRuleCall_13; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_14() { return cQUESTITerminalRuleCall_14; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_15() { return cNOTTerminalRuleCall_15; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_16() { return cBANDTerminalRuleCall_16; }

		//BOR
		public RuleCall getBORTerminalRuleCall_17() { return cBORTerminalRuleCall_17; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_18() { return cHASHTerminalRuleCall_18; }

		//AT
		public RuleCall getATTerminalRuleCall_19() { return cATTerminalRuleCall_19; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_20() { return cCARETTerminalRuleCall_20; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_21() { return cEQUALSTerminalRuleCall_21; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_22() { return cLESS_THANTerminalRuleCall_22; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_23() { return cMORE_THANTerminalRuleCall_23; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_24() { return cPERCENTTerminalRuleCall_24; }

		//AND
		public RuleCall getANDTerminalRuleCall_25() { return cANDTerminalRuleCall_25; }

		//OR
		public RuleCall getORTerminalRuleCall_26() { return cORTerminalRuleCall_26; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_27() { return cESC_CHARTerminalRuleCall_27; }

		//ON_OFF
		public RuleCall getON_OFFTerminalRuleCall_28() { return cON_OFFTerminalRuleCall_28; }

		//STATEMEN_TYPE
		public RuleCall getSTATEMEN_TYPETerminalRuleCall_29() { return cSTATEMEN_TYPETerminalRuleCall_29; }

		//MAPPING_TYPE
		public RuleCall getMAPPING_TYPETerminalRuleCall_30() { return cMAPPING_TYPETerminalRuleCall_30; }

		//OPTION_TYPE
		public RuleCall getOPTION_TYPETerminalRuleCall_31() { return cOPTION_TYPETerminalRuleCall_31; }
	}

	public class PojoTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNativeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Alternatives cNativeAlternatives_0_0_0 = (Alternatives)cNativeAssignment_0_0.eContents().get(0);
		private final Keyword cNative_charKeyword_0_0_0_0 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNative_byteKeyword_0_0_0_1 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(1);
		private final Keyword cNative_shortKeyword_0_0_0_2 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(2);
		private final Keyword cNative_intKeyword_0_0_0_3 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(3);
		private final Keyword cNative_longKeyword_0_0_0_4 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(4);
		private final Keyword cNative_floatKeyword_0_0_0_5 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(5);
		private final Keyword cNative_doubleKeyword_0_0_0_6 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(6);
		private final Keyword cNative_booleanKeyword_0_0_0_7 = (Keyword)cNativeAlternatives_0_0_0.eContents().get(7);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1_0_0 = (RuleCall)cGroup_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_1 = (Alternatives)cGroup_0_1_0.eContents().get(1);
		private final Group cGroup_0_1_0_1_0 = (Group)cAlternatives_0_1_0_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1_0_1_0_0 = (RuleCall)cGroup_0_1_0_1_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1_0_1_0_1 = (Assignment)cGroup_0_1_0_1_0.eContents().get(1);
		private final CrossReference cRefPojoEntityCrossReference_0_1_0_1_0_1_0 = (CrossReference)cRefAssignment_0_1_0_1_0_1.eContents().get(0);
		private final RuleCall cRefPojoEntityIDENTTerminalRuleCall_0_1_0_1_0_1_0_1 = (RuleCall)cRefPojoEntityCrossReference_0_1_0_1_0_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_0_1_1 = (Assignment)cAlternatives_0_1_0_1.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0_1_0_1_1_0 = (CrossReference)cTypeAssignment_0_1_0_1_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_1_0_1_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final RuleCall cLESS_THANTerminalRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1_1 = (Alternatives)cGroup_0_1_1.eContents().get(1);
		private final Group cGroup_0_1_1_1_0 = (Group)cAlternatives_0_1_1_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1_1_1_0_0 = (RuleCall)cGroup_0_1_1_1_0.eContents().get(0);
		private final Assignment cGrefAssignment_0_1_1_1_0_1 = (Assignment)cGroup_0_1_1_1_0.eContents().get(1);
		private final CrossReference cGrefPojoEntityCrossReference_0_1_1_1_0_1_0 = (CrossReference)cGrefAssignment_0_1_1_1_0_1.eContents().get(0);
		private final RuleCall cGrefPojoEntityIDENTTerminalRuleCall_0_1_1_1_0_1_0_1 = (RuleCall)cGrefPojoEntityCrossReference_0_1_1_1_0_1_0.eContents().get(1);
		private final Assignment cGtypeAssignment_0_1_1_1_1 = (Assignment)cAlternatives_0_1_1_1.eContents().get(1);
		private final CrossReference cGtypeJvmTypeCrossReference_0_1_1_1_1_0 = (CrossReference)cGtypeAssignment_0_1_1_1_1.eContents().get(0);
		private final RuleCall cGtypeJvmTypeQualifiedNameParserRuleCall_0_1_1_1_1_0_1 = (RuleCall)cGtypeJvmTypeCrossReference_0_1_1_1_1_0.eContents().get(1);
		private final RuleCall cMORE_THANTerminalRuleCall_0_1_1_2 = (RuleCall)cGroup_0_1_1.eContents().get(2);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cArrayAssignment_1.eContents().get(0);
		
		//PojoType:
		//	(native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON
		//	ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON gref=[PojoEntity|IDENT] |
		//	gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?;
		public ParserRule getRule() { return rule; }

		//(native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON
		//ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON gref=[PojoEntity|IDENT] |
		//gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?
		public Group getGroup() { return cGroup; }

		//native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON
		//ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON gref=[PojoEntity|IDENT] |
		//gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean")
		public Assignment getNativeAssignment_0_0() { return cNativeAssignment_0_0; }

		//"_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean"
		public Alternatives getNativeAlternatives_0_0_0() { return cNativeAlternatives_0_0_0; }

		//"_char"
		public Keyword getNative_charKeyword_0_0_0_0() { return cNative_charKeyword_0_0_0_0; }

		//"_byte"
		public Keyword getNative_byteKeyword_0_0_0_1() { return cNative_byteKeyword_0_0_0_1; }

		//"_short"
		public Keyword getNative_shortKeyword_0_0_0_2() { return cNative_shortKeyword_0_0_0_2; }

		//"_int"
		public Keyword getNative_intKeyword_0_0_0_3() { return cNative_intKeyword_0_0_0_3; }

		//"_long"
		public Keyword getNative_longKeyword_0_0_0_4() { return cNative_longKeyword_0_0_0_4; }

		//"_float"
		public Keyword getNative_floatKeyword_0_0_0_5() { return cNative_floatKeyword_0_0_0_5; }

		//"_double"
		public Keyword getNative_doubleKeyword_0_0_0_6() { return cNative_doubleKeyword_0_0_0_6; }

		//"_boolean"
		public Keyword getNative_booleanKeyword_0_0_0_7() { return cNative_booleanKeyword_0_0_0_7; }

		//(COLON (COLON ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON
		//gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//COLON (COLON ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1_0_0() { return cCOLONTerminalRuleCall_0_1_0_0; }

		//COLON ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName]
		public Alternatives getAlternatives_0_1_0_1() { return cAlternatives_0_1_0_1; }

		//COLON ref=[PojoEntity|IDENT]
		public Group getGroup_0_1_0_1_0() { return cGroup_0_1_0_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1_0_1_0_0() { return cCOLONTerminalRuleCall_0_1_0_1_0_0; }

		//ref=[PojoEntity|IDENT]
		public Assignment getRefAssignment_0_1_0_1_0_1() { return cRefAssignment_0_1_0_1_0_1; }

		//[PojoEntity|IDENT]
		public CrossReference getRefPojoEntityCrossReference_0_1_0_1_0_1_0() { return cRefPojoEntityCrossReference_0_1_0_1_0_1_0; }

		//IDENT
		public RuleCall getRefPojoEntityIDENTTerminalRuleCall_0_1_0_1_0_1_0_1() { return cRefPojoEntityIDENTTerminalRuleCall_0_1_0_1_0_1_0_1; }

		//type=[jvmTypes::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0_1_0_1_1() { return cTypeAssignment_0_1_0_1_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_1_0_1_1_0() { return cTypeJvmTypeCrossReference_0_1_0_1_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_1_0_1_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_1_0_1_1_0_1; }

		//(LESS_THAN (COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_1_1_0() { return cLESS_THANTerminalRuleCall_0_1_1_0; }

		//COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]
		public Alternatives getAlternatives_0_1_1_1() { return cAlternatives_0_1_1_1; }

		//COLON gref=[PojoEntity|IDENT]
		public Group getGroup_0_1_1_1_0() { return cGroup_0_1_1_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1_1_1_0_0() { return cCOLONTerminalRuleCall_0_1_1_1_0_0; }

		//gref=[PojoEntity|IDENT]
		public Assignment getGrefAssignment_0_1_1_1_0_1() { return cGrefAssignment_0_1_1_1_0_1; }

		//[PojoEntity|IDENT]
		public CrossReference getGrefPojoEntityCrossReference_0_1_1_1_0_1_0() { return cGrefPojoEntityCrossReference_0_1_1_1_0_1_0; }

		//IDENT
		public RuleCall getGrefPojoEntityIDENTTerminalRuleCall_0_1_1_1_0_1_0_1() { return cGrefPojoEntityIDENTTerminalRuleCall_0_1_1_1_0_1_0_1; }

		//gtype=[jvmTypes::JvmType|QualifiedName]
		public Assignment getGtypeAssignment_0_1_1_1_1() { return cGtypeAssignment_0_1_1_1_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getGtypeJvmTypeCrossReference_0_1_1_1_1_0() { return cGtypeJvmTypeCrossReference_0_1_1_1_1_0; }

		//QualifiedName
		public RuleCall getGtypeJvmTypeQualifiedNameParserRuleCall_0_1_1_1_1_0_1() { return cGtypeJvmTypeQualifiedNameParserRuleCall_0_1_1_1_1_0_1; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_1_1_2() { return cMORE_THANTerminalRuleCall_0_1_1_2; }

		//array?="[]"?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSuffixKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuffixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cSuffixAlternatives_2_1_0 = (Alternatives)cSuffixAssignment_2_1.eContents().get(0);
		private final RuleCall cSuffixIDENTTerminalRuleCall_2_1_0_0 = (RuleCall)cSuffixAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cSuffixNUMBERTerminalRuleCall_2_1_0_1 = (RuleCall)cSuffixAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cLBRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAbstractPojoEntityParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PackageDeclaration hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"package" name=(IDENT | IDENT_DOT) ("suffix" suffix=(IDENT | NUMBER))? LBRACE elements+=AbstractPojoEntity* RBRACE;
		public ParserRule getRule() { return rule; }

		//"package" name=(IDENT | IDENT_DOT) ("suffix" suffix=(IDENT | NUMBER))? LBRACE elements+=AbstractPojoEntity* RBRACE
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0_0() { return cNameIDENTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_1_0_1() { return cNameIDENT_DOTTerminalRuleCall_1_0_1; }

		//("suffix" suffix=(IDENT | NUMBER))?
		public Group getGroup_2() { return cGroup_2; }

		//"suffix"
		public Keyword getSuffixKeyword_2_0() { return cSuffixKeyword_2_0; }

		//suffix=(IDENT | NUMBER)
		public Assignment getSuffixAssignment_2_1() { return cSuffixAssignment_2_1; }

		//IDENT | NUMBER
		public Alternatives getSuffixAlternatives_2_1_0() { return cSuffixAlternatives_2_1_0; }

		//IDENT
		public RuleCall getSuffixIDENTTerminalRuleCall_2_1_0_0() { return cSuffixIDENTTerminalRuleCall_2_1_0_0; }

		//NUMBER
		public RuleCall getSuffixNUMBERTerminalRuleCall_2_1_0_1() { return cSuffixNUMBERTerminalRuleCall_2_1_0_1; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_3() { return cLBRACETerminalRuleCall_3; }

		//elements+=AbstractPojoEntity*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//AbstractPojoEntity
		public RuleCall getElementsAbstractPojoEntityParserRuleCall_4_0() { return cElementsAbstractPojoEntityParserRuleCall_4_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_5() { return cRBRACETerminalRuleCall_5; }
	}

	public class AbstractPojoEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractPojoEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPojoEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImplementsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtendsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractPojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
		//	PackageDeclaration | PojoEntity | Import | Implements | Extends;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration | PojoEntity | Import | Implements | Extends
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//PojoEntity
		public RuleCall getPojoEntityParserRuleCall_1() { return cPojoEntityParserRuleCall_1; }

		//Import
		public RuleCall getImportParserRuleCall_2() { return cImportParserRuleCall_2; }

		//Implements
		public RuleCall getImplementsParserRuleCall_3() { return cImplementsParserRuleCall_3; }

		//Extends
		public RuleCall getExtendsParserRuleCall_4() { return cExtendsParserRuleCall_4; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplementsJvmTypeCrossReference_1_0 = (CrossReference)cImplementsAssignment_1.eContents().get(0);
		private final RuleCall cImplementsJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cImplementsJvmTypeCrossReference_1_0.eContents().get(1);
		
		//Implements hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"implements" implements=[jvmTypes::JvmType|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"implements" implements=[jvmTypes::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"implements"
		public Keyword getImplementsKeyword_0() { return cImplementsKeyword_0; }

		//implements=[jvmTypes::JvmType|QualifiedName]
		public Assignment getImplementsAssignment_1() { return cImplementsAssignment_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getImplementsJvmTypeCrossReference_1_0() { return cImplementsJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getImplementsJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cImplementsJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtendsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExtendsJvmTypeCrossReference_1_0 = (CrossReference)cExtendsAssignment_1.eContents().get(0);
		private final RuleCall cExtendsJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cExtendsJvmTypeCrossReference_1_0.eContents().get(1);
		
		//Extends hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"extends" extends=[jvmTypes::JvmType|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"extends" extends=[jvmTypes::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//extends=[jvmTypes::JvmType|QualifiedName]
		public Assignment getExtendsAssignment_1() { return cExtendsAssignment_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getExtendsJvmTypeCrossReference_1_0() { return cExtendsJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getExtendsJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cExtendsJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class PojoEntityModifier1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoEntityModifier1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFinalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFinalFinalKeyword_0_0 = (Keyword)cFinalAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		
		//PojoEntityModifier1:
		//	final?="final" | abstract?="abstract";
		public ParserRule getRule() { return rule; }

		//final?="final" | abstract?="abstract"
		public Alternatives getAlternatives() { return cAlternatives; }

		//final?="final"
		public Assignment getFinalAssignment_0() { return cFinalAssignment_0; }

		//"final"
		public Keyword getFinalFinalKeyword_0_0() { return cFinalFinalKeyword_0_0; }

		//abstract?="abstract"
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
	}

	public class PojoEntityModifier2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoEntityModifier2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSuperTypePojoEntityCrossReference_0_1_0 = (CrossReference)cSuperTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cSuperTypePojoEntityIDENTTerminalRuleCall_0_1_0_1 = (RuleCall)cSuperTypePojoEntityCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDiscriminatorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDiscriminatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cDiscriminatorAlternatives_1_1_0 = (Alternatives)cDiscriminatorAssignment_1_1.eContents().get(0);
		private final RuleCall cDiscriminatorIDENTTerminalRuleCall_1_1_0_0 = (RuleCall)cDiscriminatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cDiscriminatorNUMBERTerminalRuleCall_1_1_0_1 = (RuleCall)cDiscriminatorAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSerializableKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSernumAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSernumNUMBERTerminalRuleCall_2_1_0 = (RuleCall)cSernumAssignment_2_1.eContents().get(0);
		
		//PojoEntityModifier2:
		//	"extends" superType=[PojoEntity|IDENT] | "discriminator" discriminator=(IDENT | NUMBER) | "serializable"
		//	sernum=NUMBER;
		public ParserRule getRule() { return rule; }

		//"extends" superType=[PojoEntity|IDENT] | "discriminator" discriminator=(IDENT | NUMBER) | "serializable" sernum=NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extends" superType=[PojoEntity|IDENT]
		public Group getGroup_0() { return cGroup_0; }

		//"extends"
		public Keyword getExtendsKeyword_0_0() { return cExtendsKeyword_0_0; }

		//superType=[PojoEntity|IDENT]
		public Assignment getSuperTypeAssignment_0_1() { return cSuperTypeAssignment_0_1; }

		//[PojoEntity|IDENT]
		public CrossReference getSuperTypePojoEntityCrossReference_0_1_0() { return cSuperTypePojoEntityCrossReference_0_1_0; }

		//IDENT
		public RuleCall getSuperTypePojoEntityIDENTTerminalRuleCall_0_1_0_1() { return cSuperTypePojoEntityIDENTTerminalRuleCall_0_1_0_1; }

		//"discriminator" discriminator=(IDENT | NUMBER)
		public Group getGroup_1() { return cGroup_1; }

		//"discriminator"
		public Keyword getDiscriminatorKeyword_1_0() { return cDiscriminatorKeyword_1_0; }

		//discriminator=(IDENT | NUMBER)
		public Assignment getDiscriminatorAssignment_1_1() { return cDiscriminatorAssignment_1_1; }

		//IDENT | NUMBER
		public Alternatives getDiscriminatorAlternatives_1_1_0() { return cDiscriminatorAlternatives_1_1_0; }

		//IDENT
		public RuleCall getDiscriminatorIDENTTerminalRuleCall_1_1_0_0() { return cDiscriminatorIDENTTerminalRuleCall_1_1_0_0; }

		//NUMBER
		public RuleCall getDiscriminatorNUMBERTerminalRuleCall_1_1_0_1() { return cDiscriminatorNUMBERTerminalRuleCall_1_1_0_1; }

		//"serializable" sernum=NUMBER
		public Group getGroup_2() { return cGroup_2; }

		//"serializable"
		public Keyword getSerializableKeyword_2_0() { return cSerializableKeyword_2_0; }

		//sernum=NUMBER
		public Assignment getSernumAssignment_2_1() { return cSernumAssignment_2_1; }

		//NUMBER
		public RuleCall getSernumNUMBERTerminalRuleCall_2_1_0() { return cSernumNUMBERTerminalRuleCall_2_1_0; }
	}

	public class PojoEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiers1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiers1PojoEntityModifier1ParserRuleCall_0_0 = (RuleCall)cModifiers1Assignment_0.eContents().get(0);
		private final Keyword cPojoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cModifiers2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiers2PojoEntityModifier2ParserRuleCall_3_0 = (RuleCall)cModifiers2Assignment_3.eContents().get(0);
		private final RuleCall cLBRACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesPojoPropertyParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//PojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
		//	modifiers1+=PojoEntityModifier1* "pojo" name=IDENT modifiers2+=PojoEntityModifier2* LBRACE features+=PojoProperty*
		//	RBRACE;
		public ParserRule getRule() { return rule; }

		//modifiers1+=PojoEntityModifier1* "pojo" name=IDENT modifiers2+=PojoEntityModifier2* LBRACE features+=PojoProperty*
		//RBRACE
		public Group getGroup() { return cGroup; }

		//modifiers1+=PojoEntityModifier1*
		public Assignment getModifiers1Assignment_0() { return cModifiers1Assignment_0; }

		//PojoEntityModifier1
		public RuleCall getModifiers1PojoEntityModifier1ParserRuleCall_0_0() { return cModifiers1PojoEntityModifier1ParserRuleCall_0_0; }

		//"pojo"
		public Keyword getPojoKeyword_1() { return cPojoKeyword_1; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }

		//modifiers2+=PojoEntityModifier2*
		public Assignment getModifiers2Assignment_3() { return cModifiers2Assignment_3; }

		//PojoEntityModifier2
		public RuleCall getModifiers2PojoEntityModifier2ParserRuleCall_3_0() { return cModifiers2PojoEntityModifier2ParserRuleCall_3_0; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4() { return cLBRACETerminalRuleCall_4; }

		//features+=PojoProperty*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//PojoProperty
		public RuleCall getFeaturesPojoPropertyParserRuleCall_5_0() { return cFeaturesPojoPropertyParserRuleCall_5_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_6() { return cRBRACETerminalRuleCall_6; }
	}

	public class PojoPropertyModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoPropertyModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_0_0 = (Keyword)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cDiscriminatorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDiscriminatorDiscriminatorKeyword_1_0 = (Keyword)cDiscriminatorAssignment_1.eContents().get(0);
		private final Assignment cPrimaryKeyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrimaryKeyPrimaryKeyKeyword_2_0 = (Keyword)cPrimaryKeyAssignment_2.eContents().get(0);
		
		//PojoPropertyModifier:
		//	required?="required" | discriminator?="discriminator" | primaryKey?="primaryKey";
		public ParserRule getRule() { return rule; }

		//required?="required" | discriminator?="discriminator" | primaryKey?="primaryKey"
		public Alternatives getAlternatives() { return cAlternatives; }

		//required?="required"
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_0_0() { return cRequiredRequiredKeyword_0_0; }

		//discriminator?="discriminator"
		public Assignment getDiscriminatorAssignment_1() { return cDiscriminatorAssignment_1; }

		//"discriminator"
		public Keyword getDiscriminatorDiscriminatorKeyword_1_0() { return cDiscriminatorDiscriminatorKeyword_1_0; }

		//primaryKey?="primaryKey"
		public Assignment getPrimaryKeyAssignment_2() { return cPrimaryKeyAssignment_2; }

		//"primaryKey"
		public Keyword getPrimaryKeyPrimaryKeyKeyword_2_0() { return cPrimaryKeyPrimaryKeyKeyword_2_0; }
	}

	public class PojoPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PojoProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNativeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cNativeAlternatives_1_0_0 = (Alternatives)cNativeAssignment_1_0.eContents().get(0);
		private final Keyword cNative_charKeyword_1_0_0_0 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(0);
		private final Keyword cNative_byteKeyword_1_0_0_1 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(1);
		private final Keyword cNative_shortKeyword_1_0_0_2 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(2);
		private final Keyword cNative_intKeyword_1_0_0_3 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(3);
		private final Keyword cNative_longKeyword_1_0_0_4 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(4);
		private final Keyword cNative_floatKeyword_1_0_0_5 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(5);
		private final Keyword cNative_doubleKeyword_1_0_0_6 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(6);
		private final Keyword cNative_booleanKeyword_1_0_0_7 = (Keyword)cNativeAlternatives_1_0_0.eContents().get(7);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_1_0 = (Group)cAlternatives_1_1_0_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1_0_1_0_0 = (RuleCall)cGroup_1_1_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1_0_1 = (Alternatives)cGroup_1_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_1_0_1_0 = (Group)cAlternatives_1_1_0_1_0_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1_0_1_0_1_0_0 = (RuleCall)cGroup_1_1_0_1_0_1_0.eContents().get(0);
		private final Assignment cAttrsAssignment_1_1_0_1_0_1_0_1 = (Assignment)cGroup_1_1_0_1_0_1_0.eContents().get(1);
		private final CrossReference cAttrsPojoPropertyCrossReference_1_1_0_1_0_1_0_1_0 = (CrossReference)cAttrsAssignment_1_1_0_1_0_1_0_1.eContents().get(0);
		private final RuleCall cAttrsPojoPropertyIDENTTerminalRuleCall_1_1_0_1_0_1_0_1_0_1 = (RuleCall)cAttrsPojoPropertyCrossReference_1_1_0_1_0_1_0_1_0.eContents().get(1);
		private final Assignment cRefAssignment_1_1_0_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1_0_1.eContents().get(1);
		private final CrossReference cRefPojoEntityCrossReference_1_1_0_1_0_1_1_0 = (CrossReference)cRefAssignment_1_1_0_1_0_1_1.eContents().get(0);
		private final RuleCall cRefPojoEntityIDENTTerminalRuleCall_1_1_0_1_0_1_1_0_1 = (RuleCall)cRefPojoEntityCrossReference_1_1_0_1_0_1_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_1_0_1_1_0 = (CrossReference)cTypeAssignment_1_1_0_1_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cLESS_THANTerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_1_0 = (Group)cAlternatives_1_1_1_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1_1_1_0_0 = (RuleCall)cGroup_1_1_1_1_0.eContents().get(0);
		private final Assignment cGrefAssignment_1_1_1_1_0_1 = (Assignment)cGroup_1_1_1_1_0.eContents().get(1);
		private final CrossReference cGrefPojoEntityCrossReference_1_1_1_1_0_1_0 = (CrossReference)cGrefAssignment_1_1_1_1_0_1.eContents().get(0);
		private final RuleCall cGrefPojoEntityIDENTTerminalRuleCall_1_1_1_1_0_1_0_1 = (RuleCall)cGrefPojoEntityCrossReference_1_1_1_1_0_1_0.eContents().get(1);
		private final Assignment cGtypeAssignment_1_1_1_1_1 = (Assignment)cAlternatives_1_1_1_1.eContents().get(1);
		private final CrossReference cGtypeJvmTypeCrossReference_1_1_1_1_1_0 = (CrossReference)cGtypeAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cGtypeJvmTypeQualifiedNameParserRuleCall_1_1_1_1_1_0_1 = (RuleCall)cGtypeJvmTypeCrossReference_1_1_1_1_1_0.eContents().get(1);
		private final RuleCall cMORE_THANTerminalRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cArrayAssignment_2.eContents().get(0);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersPojoPropertyModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		
		//PojoProperty hidden(ML_COMMENT, SL_COMMENT, WS):
		//	name=IDENT (native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON
		//	(COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName]))
		//	(LESS_THAN (COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?
		//	modifiers+=PojoPropertyModifier*;
		public ParserRule getRule() { return rule; }

		//name=IDENT (native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON
		//(COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN
		//(COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?
		//modifiers+=PojoPropertyModifier*
		public Group getGroup() { return cGroup; }

		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }

		//native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON (COLON
		//attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON
		//gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean")
		public Assignment getNativeAssignment_1_0() { return cNativeAssignment_1_0; }

		//"_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean"
		public Alternatives getNativeAlternatives_1_0_0() { return cNativeAlternatives_1_0_0; }

		//"_char"
		public Keyword getNative_charKeyword_1_0_0_0() { return cNative_charKeyword_1_0_0_0; }

		//"_byte"
		public Keyword getNative_byteKeyword_1_0_0_1() { return cNative_byteKeyword_1_0_0_1; }

		//"_short"
		public Keyword getNative_shortKeyword_1_0_0_2() { return cNative_shortKeyword_1_0_0_2; }

		//"_int"
		public Keyword getNative_intKeyword_1_0_0_3() { return cNative_intKeyword_1_0_0_3; }

		//"_long"
		public Keyword getNative_longKeyword_1_0_0_4() { return cNative_longKeyword_1_0_0_4; }

		//"_float"
		public Keyword getNative_floatKeyword_1_0_0_5() { return cNative_floatKeyword_1_0_0_5; }

		//"_double"
		public Keyword getNative_doubleKeyword_1_0_0_6() { return cNative_doubleKeyword_1_0_0_6; }

		//"_boolean"
		public Keyword getNative_booleanKeyword_1_0_0_7() { return cNative_booleanKeyword_1_0_0_7; }

		//(COLON (COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName]))
		//(LESS_THAN (COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//COLON (COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName])
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_0_0() { return cCOLONTerminalRuleCall_1_1_0_0; }

		//COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName]
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }

		//COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT])
		public Group getGroup_1_1_0_1_0() { return cGroup_1_1_0_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_0_1_0_0() { return cCOLONTerminalRuleCall_1_1_0_1_0_0; }

		//COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]
		public Alternatives getAlternatives_1_1_0_1_0_1() { return cAlternatives_1_1_0_1_0_1; }

		//COLON attrs+=[PojoProperty|IDENT]*
		public Group getGroup_1_1_0_1_0_1_0() { return cGroup_1_1_0_1_0_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_0_1_0_1_0_0() { return cCOLONTerminalRuleCall_1_1_0_1_0_1_0_0; }

		//attrs+=[PojoProperty|IDENT]*
		public Assignment getAttrsAssignment_1_1_0_1_0_1_0_1() { return cAttrsAssignment_1_1_0_1_0_1_0_1; }

		//[PojoProperty|IDENT]
		public CrossReference getAttrsPojoPropertyCrossReference_1_1_0_1_0_1_0_1_0() { return cAttrsPojoPropertyCrossReference_1_1_0_1_0_1_0_1_0; }

		//IDENT
		public RuleCall getAttrsPojoPropertyIDENTTerminalRuleCall_1_1_0_1_0_1_0_1_0_1() { return cAttrsPojoPropertyIDENTTerminalRuleCall_1_1_0_1_0_1_0_1_0_1; }

		//ref=[PojoEntity|IDENT]
		public Assignment getRefAssignment_1_1_0_1_0_1_1() { return cRefAssignment_1_1_0_1_0_1_1; }

		//[PojoEntity|IDENT]
		public CrossReference getRefPojoEntityCrossReference_1_1_0_1_0_1_1_0() { return cRefPojoEntityCrossReference_1_1_0_1_0_1_1_0; }

		//IDENT
		public RuleCall getRefPojoEntityIDENTTerminalRuleCall_1_1_0_1_0_1_1_0_1() { return cRefPojoEntityIDENTTerminalRuleCall_1_1_0_1_0_1_1_0_1; }

		//type=[jvmTypes::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1_1_0_1_1() { return cTypeAssignment_1_1_0_1_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_1_0_1_1_0() { return cTypeJvmTypeCrossReference_1_1_0_1_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1_1_0_1; }

		//(LESS_THAN (COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_1_1_0() { return cLESS_THANTerminalRuleCall_1_1_1_0; }

		//COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }

		//COLON gref=[PojoEntity|IDENT]
		public Group getGroup_1_1_1_1_0() { return cGroup_1_1_1_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_1_1_0_0() { return cCOLONTerminalRuleCall_1_1_1_1_0_0; }

		//gref=[PojoEntity|IDENT]
		public Assignment getGrefAssignment_1_1_1_1_0_1() { return cGrefAssignment_1_1_1_1_0_1; }

		//[PojoEntity|IDENT]
		public CrossReference getGrefPojoEntityCrossReference_1_1_1_1_0_1_0() { return cGrefPojoEntityCrossReference_1_1_1_1_0_1_0; }

		//IDENT
		public RuleCall getGrefPojoEntityIDENTTerminalRuleCall_1_1_1_1_0_1_0_1() { return cGrefPojoEntityIDENTTerminalRuleCall_1_1_1_1_0_1_0_1; }

		//gtype=[jvmTypes::JvmType|QualifiedName]
		public Assignment getGtypeAssignment_1_1_1_1_1() { return cGtypeAssignment_1_1_1_1_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getGtypeJvmTypeCrossReference_1_1_1_1_1_0() { return cGtypeJvmTypeCrossReference_1_1_1_1_1_0; }

		//QualifiedName
		public RuleCall getGtypeJvmTypeQualifiedNameParserRuleCall_1_1_1_1_1_0_1() { return cGtypeJvmTypeQualifiedNameParserRuleCall_1_1_1_1_1_0_1; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_1_1_2() { return cMORE_THANTerminalRuleCall_1_1_1_2; }

		//array?="[]"?
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }

		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_2_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_2_0; }

		//modifiers+=PojoPropertyModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//PojoPropertyModifier
		public RuleCall getModifiersPojoPropertyModifierParserRuleCall_3_0() { return cModifiersPojoPropertyModifierParserRuleCall_3_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|AND|OR|ESC_CHAR)
		//QualifiedName:
		//	IDENT | IDENT_DOT;
		public ParserRule getRule() { return rule; }

		//IDENT //     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|AND|OR|ESC_CHAR)
		//| IDENT_DOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1() { return cIDENT_DOTTerminalRuleCall_1; }
	}
	
	
	private ArtifactsElements pArtifacts;
	private SqlTypeAssignementElements pSqlTypeAssignement;
	private ColumnTypeAssignementElements pColumnTypeAssignement;
	private ShowColumnTypeAssignementElements pShowColumnTypeAssignement;
	private TableAssignementElements pTableAssignement;
	private JoinTableAssignementElements pJoinTableAssignement;
	private ColumnAssignementElements pColumnAssignement;
	private ImportAssignementElements pImportAssignement;
	private ExportAssignementElements pExportAssignement;
	private InheritanceAssignementElements pInheritanceAssignement;
	private ManyToManyAssignementElements pManyToManyAssignement;
	private PropertyElements pProperty;
	private DatabasePropertyElements pDatabaseProperty;
	private PojogenPropertyElements pPojogenProperty;
	private PropertyValueElements pPropertyValue;
	private PojoDefinitionElements pPojoDefinition;
	private PojoUsageElements pPojoUsage;
	private ColumnUsageElements pColumnUsage;
	private IdentifierUsageElements pIdentifierUsage;
	private ConstantUsageElements pConstantUsage;
	private MappingUsageElements pMappingUsage;
	private PojoUsageExtElements pPojoUsageExt;
	private ColumnUsageExtElements pColumnUsageExt;
	private IdentifierUsageExtElements pIdentifierUsageExt;
	private ConstantUsageExtElements pConstantUsageExt;
	private MappingUsageExtElements pMappingUsageExt;
	private TableDefinitionElements pTableDefinition;
	private TableUsageElements pTableUsage;
	private MetaStatementElements pMetaStatement;
	private SqlElements pSql;
	private SqlFragmentElements pSqlFragment;
	private SqlValueElements pSqlValue;
	private MetaSqlElements pMetaSql;
	private IfSqlElements pIfSql;
	private IfSqlFragmentElements pIfSqlFragment;
	private IfSqlValueElements pIfSqlValue;
	private IfMetaSqlElements pIfMetaSql;
	private IfSqlCondElements pIfSqlCond;
	private IfSqlBoolElements pIfSqlBool;
	private OrdSqlElements pOrdSql;
	private OrdSql2Elements pOrdSql2;
	private OrdSqlValueElements pOrdSqlValue;
	private ColumnElements pColumn;
	private ConstantElements pConstant;
	private IdentifierElements pIdentifier;
	private DatabaseColumnElements pDatabaseColumn;
	private DatabaseTableElements pDatabaseTable;
	private MappingRuleElements pMappingRule;
	private MappingElements pMapping;
	private MappingItemElements pMappingItem;
	private MappingColumnElements pMappingColumn;
	private OptionalFeatureElements pOptionalFeature;
	private TerminalRule tON_OFF;
	private TerminalRule tSTATEMEN_TYPE;
	private TerminalRule tMAPPING_TYPE;
	private TerminalRule tOPTION_TYPE;
	private TerminalRule tIDENT_DOT;
	private TerminalRule tIDENT;
	private TerminalRule tNUMBER;
	private TerminalRule tESC_CHAR;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tCOLON;
	private TerminalRule tSEMICOLON;
	private TerminalRule tSTRING;
	private TerminalRule tCOMMA;
	private TerminalRule tMINUS;
	private TerminalRule tPLUS;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	private TerminalRule tLBRACE;
	private TerminalRule tRBRACE;
	private TerminalRule tQUESTI;
	private TerminalRule tNOT;
	private TerminalRule tBAND;
	private TerminalRule tBOR;
	private TerminalRule tHASH;
	private TerminalRule tAT;
	private TerminalRule tCARET;
	private TerminalRule tEQUALS;
	private TerminalRule tLESS_THAN;
	private TerminalRule tMORE_THAN;
	private TerminalRule tPERCENT;
	private TerminalRule tREST;
	private FeatureValueElements pFeatureValue;
	private PojoTypeElements pPojoType;
	private PackageDeclarationElements pPackageDeclaration;
	private AbstractPojoEntityElements pAbstractPojoEntity;
	private ImportElements pImport;
	private ImplementsElements pImplements;
	private ExtendsElements pExtends;
	private PojoEntityModifier1Elements pPojoEntityModifier1;
	private PojoEntityModifier2Elements pPojoEntityModifier2;
	private PojoEntityElements pPojoEntity;
	private PojoPropertyModifierElements pPojoPropertyModifier;
	private PojoPropertyElements pPojoProperty;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	@Inject
	public ProcessorDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sqlproc.dsl.ProcessorDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Artifacts:
	//	WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS* | pojos+=PojoDefinition
	//	WS* | usages+=PojoUsage WS* | properties+=Property WS* | tables+=TableDefinition WS* | tableUsages+=TableUsage WS* |
	//	pojoPackages+=PackageDeclaration WS* | usagesExt+=PojoUsageExt WS*)+;
	public ArtifactsElements getArtifactsAccess() {
		return (pArtifacts != null) ? pArtifacts : (pArtifacts = new ArtifactsElements());
	}
	
	public ParserRule getArtifactsRule() {
		return getArtifactsAccess().getRule();
	}

	//SqlTypeAssignement:
	//	typeName=IDENT (LPAREN size=NUMBER RPAREN)? "->" type=PojoType;
	public SqlTypeAssignementElements getSqlTypeAssignementAccess() {
		return (pSqlTypeAssignement != null) ? pSqlTypeAssignement : (pSqlTypeAssignement = new SqlTypeAssignementElements());
	}
	
	public ParserRule getSqlTypeAssignementRule() {
		return getSqlTypeAssignementAccess().getRule();
	}

	//ColumnTypeAssignement:
	//	dbColumn=IDENT "->" type=PojoType;
	public ColumnTypeAssignementElements getColumnTypeAssignementAccess() {
		return (pColumnTypeAssignement != null) ? pColumnTypeAssignement : (pColumnTypeAssignement = new ColumnTypeAssignementElements());
	}
	
	public ParserRule getColumnTypeAssignementRule() {
		return getColumnTypeAssignementAccess().getRule();
	}

	//ShowColumnTypeAssignement:
	//	dbColumn=IDENT "->" type=PropertyValue;
	public ShowColumnTypeAssignementElements getShowColumnTypeAssignementAccess() {
		return (pShowColumnTypeAssignement != null) ? pShowColumnTypeAssignement : (pShowColumnTypeAssignement = new ShowColumnTypeAssignementElements());
	}
	
	public ParserRule getShowColumnTypeAssignementRule() {
		return getShowColumnTypeAssignementAccess().getRule();
	}

	//TableAssignement:
	//	dbTable=IDENT "->" newName=IDENT;
	public TableAssignementElements getTableAssignementAccess() {
		return (pTableAssignement != null) ? pTableAssignement : (pTableAssignement = new TableAssignementElements());
	}
	
	public ParserRule getTableAssignementRule() {
		return getTableAssignementAccess().getRule();
	}

	//JoinTableAssignement:
	//	dbTable=IDENT ("->" dbTables+=IDENT)+;
	public JoinTableAssignementElements getJoinTableAssignementAccess() {
		return (pJoinTableAssignement != null) ? pJoinTableAssignement : (pJoinTableAssignement = new JoinTableAssignementElements());
	}
	
	public ParserRule getJoinTableAssignementRule() {
		return getJoinTableAssignementAccess().getRule();
	}

	//ColumnAssignement:
	//	dbColumn=IDENT "->" newName=IDENT;
	public ColumnAssignementElements getColumnAssignementAccess() {
		return (pColumnAssignement != null) ? pColumnAssignement : (pColumnAssignement = new ColumnAssignementElements());
	}
	
	public ParserRule getColumnAssignementRule() {
		return getColumnAssignementAccess().getRule();
	}

	//ImportAssignement:
	//	dbColumn=IDENT "->" pkTable=IDENT ("->" pkColumn=IDENT)?;
	public ImportAssignementElements getImportAssignementAccess() {
		return (pImportAssignement != null) ? pImportAssignement : (pImportAssignement = new ImportAssignementElements());
	}
	
	public ParserRule getImportAssignementRule() {
		return getImportAssignementAccess().getRule();
	}

	//ExportAssignement:
	//	dbColumn=IDENT "->" fkTable=IDENT ("->" fkColumn=IDENT)?;
	public ExportAssignementElements getExportAssignementAccess() {
		return (pExportAssignement != null) ? pExportAssignement : (pExportAssignement = new ExportAssignementElements());
	}
	
	public ParserRule getExportAssignementRule() {
		return getExportAssignementAccess().getRule();
	}

	//InheritanceAssignement:
	//	discriminator=IDENT "->" dbTable=IDENT ("->" dbColumns+=IDENT)+;
	public InheritanceAssignementElements getInheritanceAssignementAccess() {
		return (pInheritanceAssignement != null) ? pInheritanceAssignement : (pInheritanceAssignement = new InheritanceAssignementElements());
	}
	
	public ParserRule getInheritanceAssignementRule() {
		return getInheritanceAssignementAccess().getRule();
	}

	//ManyToManyAssignement:
	//	pkColumn=IDENT "->" pkTable=IDENT ("->" fkColumn=IDENT)?;
	public ManyToManyAssignementElements getManyToManyAssignementAccess() {
		return (pManyToManyAssignement != null) ? pManyToManyAssignement : (pManyToManyAssignement = new ManyToManyAssignementElements());
	}
	
	public ParserRule getManyToManyAssignementRule() {
		return getManyToManyAssignementAccess().getRule();
	}

	//Property:
	//	(name="resolve-pojo-on" | name="resolve-pojo-off" | name="database-" database=DatabaseProperty | name="pojogen-"
	//	pojogen=PojogenProperty) SEMICOLON;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//DatabaseProperty:
	//	name="is-online" | name="is-offline" | name="has-url" WS+ dbUrl=PropertyValue | name="login-username" WS+
	//	dbUsername=PropertyValue | name="login-password" WS+ dbPassword=PropertyValue | name="active-schema" WS+
	//	dbSchema=PropertyValue | name="jdbc-driver" WS+ dbDriver=PropertyValue | name="ddl-create" WS+
	//	dbExecuteBefore=PropertyValue | name="ddl-drop" WS+ dbExecuteAfter=PropertyValue;
	public DatabasePropertyElements getDatabasePropertyAccess() {
		return (pDatabaseProperty != null) ? pDatabaseProperty : (pDatabaseProperty = new DatabasePropertyElements());
	}
	
	public ParserRule getDatabasePropertyRule() {
		return getDatabasePropertyAccess().getRule();
	}

	//PojogenProperty:
	//	name="types-sqltypes" (WS+ sqlTypes+=SqlTypeAssignement)+ | name="types-in-table" WS+ dbTable=IDENT (WS+
	//	sqlTypes+=SqlTypeAssignement)+ | name="types-for-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
	//	| name="show-type-for-column" WS+ dbTable=IDENT WS+ columnType=ShowColumnTypeAssignement | name="ignore-tables" (WS+
	//	dbTables+=IDENT)+ | name="only-tables" (WS+ dbTables+=IDENT)+ | name="join-tables" (WS+
	//	joinTables+=JoinTableAssignement)+ | name="ignore-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ |
	//	name="required-columns" WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+ | name="not-required-columns" WS+ dbTable=IDENT (WS+
	//	dbColumns+=IDENT)+ | name="create-columns" WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+ |
	//	name="rename-tables" (WS+ tables+=TableAssignement)+ | name="rename-columns" WS+ dbTable=IDENT (WS+
	//	columns+=ColumnAssignement)+ | name="ignore-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
	//	| name="ignore-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	//	| name="inherit-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	//	| name="create-one-to-many" WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
	//	| name="create-many-to-one" WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	//	| name="table-many-to-many" WS+ dbTable=IDENT (WS+ many2s+=ManyToManyAssignement)+ | name="inherit-discriminator" WS+
	//	dbTable=IDENT WS+ dbColumn=IDENT (WS+ inheritance+=InheritanceAssignement)+ | name="generate-methods" (WS+
	//	methods+=IDENT)+ | name="implements-interfaces" (WS+ toImplements+=[jvmTypes::JvmType|QualifiedName])+ |
	//	name="extends-class" WS+ toExtends=[jvmTypes::JvmType|QualifiedName] | name="generate-wrappers";
	public PojogenPropertyElements getPojogenPropertyAccess() {
		return (pPojogenProperty != null) ? pPojogenProperty : (pPojogenProperty = new PojogenPropertyElements());
	}
	
	public ParserRule getPojogenPropertyRule() {
		return getPojogenPropertyAccess().getRule();
	}

	//PropertyValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
	//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR |
	//	ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING |
	//	COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS |
	//	LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PojoDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"pojo" name=IDENT class=(IDENT | IDENT_DOT) SEMICOLON;
	public PojoDefinitionElements getPojoDefinitionAccess() {
		return (pPojoDefinition != null) ? pPojoDefinition : (pPojoDefinition = new PojoDefinitionElements());
	}
	
	public ParserRule getPojoDefinitionRule() {
		return getPojoDefinitionAccess().getRule();
	}

	//PojoUsage:
	//	ColumnUsage | IdentifierUsage | ConstantUsage | MappingUsage;
	public PojoUsageElements getPojoUsageAccess() {
		return (pPojoUsage != null) ? pPojoUsage : (pPojoUsage = new PojoUsageElements());
	}
	
	public ParserRule getPojoUsageRule() {
		return getPojoUsageAccess().getRule();
	}

	//ColumnUsage hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"col" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
	public ColumnUsageElements getColumnUsageAccess() {
		return (pColumnUsage != null) ? pColumnUsage : (pColumnUsage = new ColumnUsageElements());
	}
	
	public ParserRule getColumnUsageRule() {
		return getColumnUsageAccess().getRule();
	}

	//IdentifierUsage hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"ident" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
	public IdentifierUsageElements getIdentifierUsageAccess() {
		return (pIdentifierUsage != null) ? pIdentifierUsage : (pIdentifierUsage = new IdentifierUsageElements());
	}
	
	public ParserRule getIdentifierUsageRule() {
		return getIdentifierUsageAccess().getRule();
	}

	//ConstantUsage hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"const" statement=[MetaStatement|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
	public ConstantUsageElements getConstantUsageAccess() {
		return (pConstantUsage != null) ? pConstantUsage : (pConstantUsage = new ConstantUsageElements());
	}
	
	public ParserRule getConstantUsageRule() {
		return getConstantUsageAccess().getRule();
	}

	//MappingUsage hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"out" statement=[MappingRule|IDENT] pojo=[PojoDefinition|IDENT] SEMICOLON;
	public MappingUsageElements getMappingUsageAccess() {
		return (pMappingUsage != null) ? pMappingUsage : (pMappingUsage = new MappingUsageElements());
	}
	
	public ParserRule getMappingUsageRule() {
		return getMappingUsageAccess().getRule();
	}

	//PojoUsageExt:
	//	ColumnUsageExt | IdentifierUsageExt | ConstantUsageExt | MappingUsageExt;
	public PojoUsageExtElements getPojoUsageExtAccess() {
		return (pPojoUsageExt != null) ? pPojoUsageExt : (pPojoUsageExt = new PojoUsageExtElements());
	}
	
	public ParserRule getPojoUsageExtRule() {
		return getPojoUsageExtAccess().getRule();
	}

	//ColumnUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"colx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
	public ColumnUsageExtElements getColumnUsageExtAccess() {
		return (pColumnUsageExt != null) ? pColumnUsageExt : (pColumnUsageExt = new ColumnUsageExtElements());
	}
	
	public ParserRule getColumnUsageExtRule() {
		return getColumnUsageExtAccess().getRule();
	}

	//IdentifierUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"identx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
	public IdentifierUsageExtElements getIdentifierUsageExtAccess() {
		return (pIdentifierUsageExt != null) ? pIdentifierUsageExt : (pIdentifierUsageExt = new IdentifierUsageExtElements());
	}
	
	public ParserRule getIdentifierUsageExtRule() {
		return getIdentifierUsageExtAccess().getRule();
	}

	//ConstantUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"constx" statement=[MetaStatement|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
	public ConstantUsageExtElements getConstantUsageExtAccess() {
		return (pConstantUsageExt != null) ? pConstantUsageExt : (pConstantUsageExt = new ConstantUsageExtElements());
	}
	
	public ParserRule getConstantUsageExtRule() {
		return getConstantUsageExtAccess().getRule();
	}

	//MappingUsageExt hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"outx" statement=[MappingRule|IDENT] pojo=[PojoEntity|IDENT] SEMICOLON;
	public MappingUsageExtElements getMappingUsageExtAccess() {
		return (pMappingUsageExt != null) ? pMappingUsageExt : (pMappingUsageExt = new MappingUsageExtElements());
	}
	
	public ParserRule getMappingUsageExtRule() {
		return getMappingUsageExtAccess().getRule();
	}

	//TableDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"table" name=IDENT table=IDENT SEMICOLON;
	public TableDefinitionElements getTableDefinitionAccess() {
		return (pTableDefinition != null) ? pTableDefinition : (pTableDefinition = new TableDefinitionElements());
	}
	
	public ParserRule getTableDefinitionRule() {
		return getTableDefinitionAccess().getRule();
	}

	//TableUsage hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"dbcol" statement=[MetaStatement|IDENT] table=[TableDefinition|IDENT] ("prefix" prefix=IDENT)? SEMICOLON;
	public TableUsageElements getTableUsageAccess() {
		return (pTableUsage != null) ? pTableUsage : (pTableUsage = new TableUsageElements());
	}
	
	public ParserRule getTableUsageRule() {
		return getTableUsageAccess().getRule();
	}

	//MetaStatement:
	//	name=IDENT LPAREN type=STATEMEN_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS statement=Sql SEMICOLON;
	public MetaStatementElements getMetaStatementAccess() {
		return (pMetaStatement != null) ? pMetaStatement : (pMetaStatement = new MetaStatementElements());
	}
	
	public ParserRule getMetaStatementRule() {
		return getMetaStatementAccess().getRule();
	}

	//Sql:
	//	sqls+=SqlFragment+;
	public SqlElements getSqlAccess() {
		return (pSql != null) ? pSql : (pSql = new SqlElements());
	}
	
	public ParserRule getSqlRule() {
		return getSqlAccess().getRule();
	}

	//SqlFragment:
	//	value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE | PERCENT
	//	(PERCENT dbtab=DatabaseTable | dbcol=DatabaseColumn);
	public SqlFragmentElements getSqlFragmentAccess() {
		return (pSqlFragment != null) ? pSqlFragment : (pSqlFragment = new SqlFragmentElements());
	}
	
	public ParserRule getSqlFragmentRule() {
		return getSqlFragmentAccess().getRule();
	}

	////~(COLON | STRING | AT | LBRACE | SEMICOLON)
	//SqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
	//	| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
	//	OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI |
	//	NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
	//	MAPPING_TYPE | OPTION_TYPE)*;
	public SqlValueElements getSqlValueAccess() {
		return (pSqlValue != null) ? pSqlValue : (pSqlValue = new SqlValueElements());
	}
	
	public ParserRule getSqlValueRule() {
		return getSqlValueAccess().getRule();
	}

	//MetaSql:
	//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
	//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
	//	ord=OrdSql;
	public MetaSqlElements getMetaSqlAccess() {
		return (pMetaSql != null) ? pMetaSql : (pMetaSql = new MetaSqlElements());
	}
	
	public ParserRule getMetaSqlRule() {
		return getMetaSqlAccess().getRule();
	}

	//IfSql:
	//	sqls+=IfSqlFragment+;
	public IfSqlElements getIfSqlAccess() {
		return (pIfSql != null) ? pIfSql : (pIfSql = new IfSqlElements());
	}
	
	public ParserRule getIfSqlRule() {
		return getIfSqlAccess().getRule();
	}

	//IfSqlFragment:
	//	value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | PERCENT (PERCENT
	//	dbtab=DatabaseTable | dbcol=DatabaseColumn) | LBRACE meta=IfMetaSql RBRACE;
	public IfSqlFragmentElements getIfSqlFragmentAccess() {
		return (pIfSqlFragment != null) ? pIfSqlFragment : (pIfSqlFragment = new IfSqlFragmentElements());
	}
	
	public ParserRule getIfSqlFragmentRule() {
		return getIfSqlFragmentAccess().getRule();
	}

	////~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
	//IfSqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
	//	HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE | MAPPING_TYPE |
	//	OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI
	//	| NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
	//	MAPPING_TYPE | OPTION_TYPE)*;
	public IfSqlValueElements getIfSqlValueAccess() {
		return (pIfSqlValue != null) ? pIfSqlValue : (pIfSqlValue = new IfSqlValueElements());
	}
	
	public ParserRule getIfSqlValueRule() {
		return getIfSqlValueAccess().getRule();
	}

	//IfMetaSql:
	//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
	//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*;
	public IfMetaSqlElements getIfMetaSqlAccess() {
		return (pIfMetaSql != null) ? pIfMetaSql : (pIfMetaSql = new IfMetaSqlElements());
	}
	
	public ParserRule getIfMetaSqlRule() {
		return getIfMetaSqlAccess().getRule();
	}

	//IfSqlCond:
	//	WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*;
	public IfSqlCondElements getIfSqlCondAccess() {
		return (pIfSqlCond != null) ? pIfSqlCond : (pIfSqlCond = new IfSqlCondElements());
	}
	
	public ParserRule getIfSqlCondRule() {
		return getIfSqlCondAccess().getRule();
	}

	//IfSqlBool:
	//	not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN;
	public IfSqlBoolElements getIfSqlBoolAccess() {
		return (pIfSqlBool != null) ? pIfSqlBool : (pIfSqlBool = new IfSqlBoolElements());
	}
	
	public ParserRule getIfSqlBoolRule() {
		return getIfSqlBoolAccess().getRule();
	}

	//OrdSql:
	//	sqls+=OrdSql2+;
	public OrdSqlElements getOrdSqlAccess() {
		return (pOrdSql != null) ? pOrdSql : (pOrdSql = new OrdSqlElements());
	}
	
	public ParserRule getOrdSqlRule() {
		return getOrdSqlAccess().getRule();
	}

	//OrdSql2:
	//	value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier | PERCENT dbcol=DatabaseColumn;
	public OrdSql2Elements getOrdSql2Access() {
		return (pOrdSql2 != null) ? pOrdSql2 : (pOrdSql2 = new OrdSql2Elements());
	}
	
	public ParserRule getOrdSql2Rule() {
		return getOrdSql2Access().getRule();
	}

	////~(COLON | STRING | PERCENT | RBRACE)
	//OrdSqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
	//	BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR | ON_OFF | STATEMEN_TYPE |
	//	MAPPING_TYPE | OPTION_TYPE) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN |
	//	RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | AND | OR | ESC_CHAR
	//	| ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)*;
	public OrdSqlValueElements getOrdSqlValueAccess() {
		return (pOrdSqlValue != null) ? pOrdSqlValue : (pOrdSqlValue = new OrdSqlValueElements());
	}
	
	public ParserRule getOrdSqlValueRule() {
		return getOrdSqlValueAccess().getRule();
	}

	//Column:
	//	name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Constant:
	//	case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET => type=IDENT? (CARET vals+=(IDENT | NUMBER))*)?;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Identifier:
	//	mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET => type=IDENT?
	//	(CARET vals+=(IDENT | NUMBER))*)?;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//DatabaseColumn:
	//	name=(IDENT | IDENT_DOT);
	public DatabaseColumnElements getDatabaseColumnAccess() {
		return (pDatabaseColumn != null) ? pDatabaseColumn : (pDatabaseColumn = new DatabaseColumnElements());
	}
	
	public ParserRule getDatabaseColumnRule() {
		return getDatabaseColumnAccess().getRule();
	}

	//DatabaseTable:
	//	name=(IDENT | IDENT_DOT);
	public DatabaseTableElements getDatabaseTableAccess() {
		return (pDatabaseTable != null) ? pDatabaseTable : (pDatabaseTable = new DatabaseTableElements());
	}
	
	public ParserRule getDatabaseTableRule() {
		return getDatabaseTableAccess().getRule();
	}

	//MappingRule:
	//	name=IDENT LPAREN type=MAPPING_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS mapping=Mapping SEMICOLON;
	public MappingRuleElements getMappingRuleAccess() {
		return (pMappingRule != null) ? pMappingRule : (pMappingRule = new MappingRuleElements());
	}
	
	public ParserRule getMappingRuleRule() {
		return getMappingRuleAccess().getRule();
	}

	//Mapping:
	//	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MappingItem:
	//	col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingColumn)?)?;
	public MappingItemElements getMappingItemAccess() {
		return (pMappingItem != null) ? pMappingItem : (pMappingItem = new MappingItemElements());
	}
	
	public ParserRule getMappingItemRule() {
		return getMappingItemAccess().getRule();
	}

	//MappingColumn:
	//	name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*;
	public MappingColumnElements getMappingColumnAccess() {
		return (pMappingColumn != null) ? pMappingColumn : (pMappingColumn = new MappingColumnElements());
	}
	
	public ParserRule getMappingColumnRule() {
		return getMappingColumnAccess().getRule();
	}

	//OptionalFeature:
	//	name=IDENT LPAREN type=OPTION_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS option=FeatureValue SEMICOLON;
	public OptionalFeatureElements getOptionalFeatureAccess() {
		return (pOptionalFeature != null) ? pOptionalFeature : (pOptionalFeature = new OptionalFeatureElements());
	}
	
	public ParserRule getOptionalFeatureRule() {
		return getOptionalFeatureAccess().getRule();
	}

	//terminal ON_OFF:
	//	"ON" | "OFF";
	public TerminalRule getON_OFFRule() {
		return (tON_OFF != null) ? tON_OFF : (tON_OFF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ON_OFF"));
	} 

	//terminal STATEMEN_TYPE:
	//	"QRY" | "CRUD" | "CALL";
	public TerminalRule getSTATEMEN_TYPERule() {
		return (tSTATEMEN_TYPE != null) ? tSTATEMEN_TYPE : (tSTATEMEN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATEMEN_TYPE"));
	} 

	//terminal MAPPING_TYPE:
	//	"OUT";
	public TerminalRule getMAPPING_TYPERule() {
		return (tMAPPING_TYPE != null) ? tMAPPING_TYPE : (tMAPPING_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAPPING_TYPE"));
	} 

	//terminal OPTION_TYPE:
	//	"OPT" | "LOPT" | "IOPT" | "SOPT" | "BOPT";
	public TerminalRule getOPTION_TYPERule() {
		return (tOPTION_TYPE != null) ? tOPTION_TYPE : (tOPTION_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_TYPE"));
	} 

	////terminal IDENT_TYPE: IDENT LPAREN NUMBER (COMMA NUMBER)? RPAREN;
	//terminal IDENT_DOT:
	//	IDENT ("." IDENT)+;
	public TerminalRule getIDENT_DOTRule() {
		return (tIDENT_DOT != null) ? tIDENT_DOT : (tIDENT_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT_DOT"));
	} 

	//terminal IDENT:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "_" | "=")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal NUMBER:
	//	"0".."9"+;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	////terminal NEGATIVE_NUMBER: '-'('0'..'9')+;
	//terminal ESC_CHAR:
	//	"\\" (COLON | SEMICOLON | STRING | LBRACE | RBRACE | BOR | HASH | AT | PERCENT | "." | "/");
	public TerminalRule getESC_CHARRule() {
		return (tESC_CHAR != null) ? tESC_CHAR : (tESC_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESC_CHAR"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\n" | "\r")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal AND:
	//	"&" "&";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//	"|" "|";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal STRING:
	//	"$";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal LBRACE:
	//	"{";
	public TerminalRule getLBRACERule() {
		return (tLBRACE != null) ? tLBRACE : (tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE"));
	} 

	//terminal RBRACE:
	//	"}";
	public TerminalRule getRBRACERule() {
		return (tRBRACE != null) ? tRBRACE : (tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE"));
	} 

	//terminal QUESTI:
	//	"?";
	public TerminalRule getQUESTIRule() {
		return (tQUESTI != null) ? tQUESTI : (tQUESTI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTI"));
	} 

	//terminal NOT:
	//	"!";
	public TerminalRule getNOTRule() {
		return (tNOT != null) ? tNOT : (tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT"));
	} 

	//terminal BAND:
	//	"&";
	public TerminalRule getBANDRule() {
		return (tBAND != null) ? tBAND : (tBAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BAND"));
	} 

	//terminal BOR:
	//	"|";
	public TerminalRule getBORRule() {
		return (tBOR != null) ? tBOR : (tBOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOR"));
	} 

	//terminal HASH:
	//	"#";
	public TerminalRule getHASHRule() {
		return (tHASH != null) ? tHASH : (tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HASH"));
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return (tAT != null) ? tAT : (tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT"));
	} 

	//terminal CARET:
	//	"^";
	public TerminalRule getCARETRule() {
		return (tCARET != null) ? tCARET : (tCARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CARET"));
	} 

	//terminal EQUALS:
	//	"=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal LESS_THAN:
	//	"<";
	public TerminalRule getLESS_THANRule() {
		return (tLESS_THAN != null) ? tLESS_THAN : (tLESS_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_THAN"));
	} 

	//terminal MORE_THAN:
	//	">";
	public TerminalRule getMORE_THANRule() {
		return (tMORE_THAN != null) ? tMORE_THAN : (tMORE_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MORE_THAN"));
	} 

	//terminal PERCENT:
	//	"%";
	public TerminalRule getPERCENTRule() {
		return (tPERCENT != null) ? tPERCENT : (tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT"));
	} 

	//terminal REST:
	//	!SEMICOLON;
	public TerminalRule getRESTRule() {
		return (tREST != null) ? tREST : (tREST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REST"));
	} 

	//FeatureValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
	//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | PERCENT | AND | OR | ESC_CHAR |
	//	ON_OFF | STATEMEN_TYPE | MAPPING_TYPE | OPTION_TYPE)+;
	public FeatureValueElements getFeatureValueAccess() {
		return (pFeatureValue != null) ? pFeatureValue : (pFeatureValue = new FeatureValueElements());
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}

	//PojoType:
	//	(native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON (COLON
	//	ref=[PojoEntity|IDENT] | type=[jvmTypes::JvmType|QualifiedName])) (LESS_THAN (COLON gref=[PojoEntity|IDENT] |
	//	gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?;
	public PojoTypeElements getPojoTypeAccess() {
		return (pPojoType != null) ? pPojoType : (pPojoType = new PojoTypeElements());
	}
	
	public ParserRule getPojoTypeRule() {
		return getPojoTypeAccess().getRule();
	}

	//PackageDeclaration hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"package" name=(IDENT | IDENT_DOT) ("suffix" suffix=(IDENT | NUMBER))? LBRACE elements+=AbstractPojoEntity* RBRACE;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//AbstractPojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	//	PackageDeclaration | PojoEntity | Import | Implements | Extends;
	public AbstractPojoEntityElements getAbstractPojoEntityAccess() {
		return (pAbstractPojoEntity != null) ? pAbstractPojoEntity : (pAbstractPojoEntity = new AbstractPojoEntityElements());
	}
	
	public ParserRule getAbstractPojoEntityRule() {
		return getAbstractPojoEntityAccess().getRule();
	}

	//Import hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Implements hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"implements" implements=[jvmTypes::JvmType|QualifiedName];
	public ImplementsElements getImplementsAccess() {
		return (pImplements != null) ? pImplements : (pImplements = new ImplementsElements());
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}

	//Extends hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"extends" extends=[jvmTypes::JvmType|QualifiedName];
	public ExtendsElements getExtendsAccess() {
		return (pExtends != null) ? pExtends : (pExtends = new ExtendsElements());
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}

	//PojoEntityModifier1:
	//	final?="final" | abstract?="abstract";
	public PojoEntityModifier1Elements getPojoEntityModifier1Access() {
		return (pPojoEntityModifier1 != null) ? pPojoEntityModifier1 : (pPojoEntityModifier1 = new PojoEntityModifier1Elements());
	}
	
	public ParserRule getPojoEntityModifier1Rule() {
		return getPojoEntityModifier1Access().getRule();
	}

	//PojoEntityModifier2:
	//	"extends" superType=[PojoEntity|IDENT] | "discriminator" discriminator=(IDENT | NUMBER) | "serializable"
	//	sernum=NUMBER;
	public PojoEntityModifier2Elements getPojoEntityModifier2Access() {
		return (pPojoEntityModifier2 != null) ? pPojoEntityModifier2 : (pPojoEntityModifier2 = new PojoEntityModifier2Elements());
	}
	
	public ParserRule getPojoEntityModifier2Rule() {
		return getPojoEntityModifier2Access().getRule();
	}

	//PojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	//	modifiers1+=PojoEntityModifier1* "pojo" name=IDENT modifiers2+=PojoEntityModifier2* LBRACE features+=PojoProperty*
	//	RBRACE;
	public PojoEntityElements getPojoEntityAccess() {
		return (pPojoEntity != null) ? pPojoEntity : (pPojoEntity = new PojoEntityElements());
	}
	
	public ParserRule getPojoEntityRule() {
		return getPojoEntityAccess().getRule();
	}

	//PojoPropertyModifier:
	//	required?="required" | discriminator?="discriminator" | primaryKey?="primaryKey";
	public PojoPropertyModifierElements getPojoPropertyModifierAccess() {
		return (pPojoPropertyModifier != null) ? pPojoPropertyModifier : (pPojoPropertyModifier = new PojoPropertyModifierElements());
	}
	
	public ParserRule getPojoPropertyModifierRule() {
		return getPojoPropertyModifierAccess().getRule();
	}

	//PojoProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	//	name=IDENT (native=("_char" | "_byte" | "_short" | "_int" | "_long" | "_float" | "_double" | "_boolean") | (COLON
	//	(COLON (COLON attrs+=[PojoProperty|IDENT]* | ref=[PojoEntity|IDENT]) | type=[jvmTypes::JvmType|QualifiedName]))
	//	(LESS_THAN (COLON gref=[PojoEntity|IDENT] | gtype=[jvmTypes::JvmType|QualifiedName]) MORE_THAN)?) array?="[]"?
	//	modifiers+=PojoPropertyModifier*;
	public PojoPropertyElements getPojoPropertyAccess() {
		return (pPojoProperty != null) ? pPojoProperty : (pPojoProperty = new PojoPropertyElements());
	}
	
	public ParserRule getPojoPropertyRule() {
		return getPojoPropertyAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	////     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|AND|OR|ESC_CHAR)
	//QualifiedName:
	//	IDENT | IDENT_DOT;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
}
