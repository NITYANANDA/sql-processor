/*
* generated by Xtext
*/

package org.sqlproc.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ProcessorDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cFeaturesOptionalFeatureParserRuleCall_1_0_0_0 = (RuleCall)cFeaturesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_1_0_0 = (RuleCall)cStatementsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cMappingsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMappingsMappingRuleParserRuleCall_1_2_0_0 = (RuleCall)cMappingsAssignment_1_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//Artifact:
		//	WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS*)+;
		public ParserRule getRule() { return rule; }

		//WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS*)+
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//(features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS*)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//features+=OptionalFeature WS*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//features+=OptionalFeature
		public Assignment getFeaturesAssignment_1_0_0() { return cFeaturesAssignment_1_0_0; }

		//OptionalFeature
		public RuleCall getFeaturesOptionalFeatureParserRuleCall_1_0_0_0() { return cFeaturesOptionalFeatureParserRuleCall_1_0_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_0_1() { return cWSTerminalRuleCall_1_0_1; }

		//statements+=MetaStatement WS*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_1_0() { return cStatementsAssignment_1_1_0; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_1_0_0() { return cStatementsMetaStatementParserRuleCall_1_1_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_1_1() { return cWSTerminalRuleCall_1_1_1; }

		//mappings+=MappingRule WS*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//mappings+=MappingRule
		public Assignment getMappingsAssignment_1_2_0() { return cMappingsAssignment_1_2_0; }

		//MappingRule
		public RuleCall getMappingsMappingRuleParserRuleCall_1_2_0_0() { return cMappingsMappingRuleParserRuleCall_1_2_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1_2_1() { return cWSTerminalRuleCall_1_2_1; }
	}

	public class MetaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSTATEMEN_TYPEEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersFilterParserRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementSqlParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//MetaStatement:
		//	name=Name LPAREN type=STATEMEN_TYPE (COMMA filters+=Filter)* RPAREN EQUALS statement=Sql SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=Name LPAREN type=STATEMEN_TYPE (COMMA filters+=Filter)* RPAREN EQUALS statement=Sql SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=STATEMEN_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//STATEMEN_TYPE
		public RuleCall getTypeSTATEMEN_TYPEEnumRuleCall_2_0() { return cTypeSTATEMEN_TYPEEnumRuleCall_2_0; }

		//(COMMA filters+=Filter)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=Filter
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//Filter
		public RuleCall getFiltersFilterParserRuleCall_3_1_0() { return cFiltersFilterParserRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//statement=Sql
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }

		//Sql
		public RuleCall getStatementSqlParserRuleCall_6_0() { return cStatementSqlParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class SqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsSqlFragmentParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//Sql:
		//	sqls+=SqlFragment+;
		public ParserRule getRule() { return rule; }

		//sqls+=SqlFragment+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//SqlFragment
		public RuleCall getSqlsSqlFragmentParserRuleCall_0() { return cSqlsSqlFragmentParserRuleCall_0; }
	}

	public class SqlFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cColAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_1_1_0 = (RuleCall)cColAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCnstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_2_1_0 = (RuleCall)cCnstAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cIdentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_3_1_0 = (RuleCall)cIdentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cMetaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMetaMetaSqlParserRuleCall_4_1_0 = (RuleCall)cMetaAssignment_4_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//SqlFragment:
		//	value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE;
		public ParserRule getRule() { return rule; }

		//value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=SqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SqlValue
		public RuleCall getValueSqlValueParserRuleCall_0_0() { return cValueSqlValueParserRuleCall_0_0; }

		//AT col=Column
		public Group getGroup_1() { return cGroup_1; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0() { return cATTerminalRuleCall_1_0; }

		//col=Column
		public Assignment getColAssignment_1_1() { return cColAssignment_1_1; }

		//Column
		public RuleCall getColColumnParserRuleCall_1_1_0() { return cColColumnParserRuleCall_1_1_0; }

		//STRING cnst=Constant
		public Group getGroup_2() { return cGroup_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_2_1() { return cCnstAssignment_2_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_2_1_0() { return cCnstConstantParserRuleCall_2_1_0; }

		//COLON ident=Identifier
		public Group getGroup_3() { return cGroup_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_0() { return cCOLONTerminalRuleCall_3_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_3_1() { return cIdentAssignment_3_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_3_1_0() { return cIdentIdentifierParserRuleCall_3_1_0; }

		//LBRACE meta=MetaSql RBRACE
		public Group getGroup_4() { return cGroup_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4_0() { return cLBRACETerminalRuleCall_4_0; }

		//meta=MetaSql
		public Assignment getMetaAssignment_4_1() { return cMetaAssignment_4_1; }

		//MetaSql
		public RuleCall getMetaMetaSqlParserRuleCall_4_1_0() { return cMetaMetaSqlParserRuleCall_4_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4_2() { return cRBRACETerminalRuleCall_4_2; }
	}

	public class SqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cMINUSTerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cPLUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cLPARENTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cRPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRBRACETerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBORTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cHASHTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cCARETTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cEQUALSTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cLESS_THANTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cMORE_THANTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cESC_CHARTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cMINUSTerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cPLUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cLPARENTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cRPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRBRACETerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cBORTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cHASHTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cCARETTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		
		////~(COLON | STRING | AT | LBRACE | SEMICOLON)
		//SqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
		//	| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS
		//	| PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
		//	ESC_CHAR)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS |
		//PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
		//ESC_CHAR)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_5() { return cCOMMATerminalRuleCall_0_5; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_6() { return cMINUSTerminalRuleCall_0_6; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_7() { return cPLUSTerminalRuleCall_0_7; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_8() { return cLPARENTerminalRuleCall_0_8; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_9() { return cRPARENTerminalRuleCall_0_9; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_0_10() { return cRBRACETerminalRuleCall_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_11() { return cQUESTITerminalRuleCall_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_12() { return cNOTTerminalRuleCall_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_13() { return cBANDTerminalRuleCall_0_13; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_14() { return cBORTerminalRuleCall_0_14; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_15() { return cHASHTerminalRuleCall_0_15; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_16() { return cCARETTerminalRuleCall_0_16; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_17() { return cEQUALSTerminalRuleCall_0_17; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_18() { return cLESS_THANTerminalRuleCall_0_18; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_19() { return cMORE_THANTerminalRuleCall_0_19; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_20() { return cESC_CHARTerminalRuleCall_0_20; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
		//| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_5() { return cCOMMATerminalRuleCall_1_0_5; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_6() { return cMINUSTerminalRuleCall_1_0_6; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_7() { return cPLUSTerminalRuleCall_1_0_7; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_8() { return cLPARENTerminalRuleCall_1_0_8; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_9() { return cRPARENTerminalRuleCall_1_0_9; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_1_0_10() { return cRBRACETerminalRuleCall_1_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_11() { return cQUESTITerminalRuleCall_1_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_12() { return cNOTTerminalRuleCall_1_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_13() { return cBANDTerminalRuleCall_1_0_13; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_0_14() { return cBORTerminalRuleCall_1_0_14; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_15() { return cHASHTerminalRuleCall_1_0_15; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_16() { return cCARETTerminalRuleCall_1_0_16; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_17() { return cEQUALSTerminalRuleCall_1_0_17; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_18() { return cLESS_THANTerminalRuleCall_1_0_18; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_19() { return cMORE_THANTerminalRuleCall_1_0_19; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_20() { return cESC_CHARTerminalRuleCall_1_0_20; }
	}

	public class MetaSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaSql");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIfsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_1_0 = (RuleCall)cIfsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Assignment cIfsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_2_1_0 = (RuleCall)cIfsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeQUESTITerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondIfSqlCondParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final RuleCall cBORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cIfsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_1_3_0 = (RuleCall)cIfsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cBORTerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Assignment cIfsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_1_4_1_0 = (RuleCall)cIfsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeBANDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cIfsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_1_0 = (RuleCall)cIfsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cIfsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_2_1_0 = (RuleCall)cIfsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeBORTerminalRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cIfsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_1_0 = (RuleCall)cIfsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cIfsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_2_1_0 = (RuleCall)cIfsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypeEQUALSTerminalRuleCall_4_0_0 = (RuleCall)cTypeAssignment_4_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cFtypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFtypeIDENTTerminalRuleCall_4_2_0 = (RuleCall)cFtypeAssignment_4_2.eContents().get(0);
		private final Assignment cIfsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_4_3_0 = (RuleCall)cIfsAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cTypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTypeHASHTerminalRuleCall_5_0_0 = (RuleCall)cTypeAssignment_5_0.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cOrdAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOrdOrdSqlParserRuleCall_5_2_0 = (RuleCall)cOrdAssignment_5_2.eContents().get(0);
		
		//MetaSql:
		//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
		//	ord=OrdSql;
		public ParserRule getRule() { return rule; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
		//ord=OrdSql
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_0() { return cGroup_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_0() { return cWSTerminalRuleCall_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_1() { return cIfsAssignment_0_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_1_0() { return cIfsIfSqlParserRuleCall_0_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_2_0() { return cBORTerminalRuleCall_0_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_2_1() { return cIfsAssignment_0_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_2_1_0() { return cIfsIfSqlParserRuleCall_0_2_1_0; }

		//type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_1() { return cGroup_1; }

		//type=QUESTI
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//QUESTI
		public RuleCall getTypeQUESTITerminalRuleCall_1_0_0() { return cTypeQUESTITerminalRuleCall_1_0_0; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_1_1_0() { return cCondIfSqlCondParserRuleCall_1_1_0; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_2() { return cBORTerminalRuleCall_1_2; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_3() { return cIfsAssignment_1_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_3_0() { return cIfsIfSqlParserRuleCall_1_3_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_4_0() { return cBORTerminalRuleCall_1_4_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_4_1() { return cIfsAssignment_1_4_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_4_1_0() { return cIfsIfSqlParserRuleCall_1_4_1_0; }

		//type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_2() { return cGroup_2; }

		//type=BAND
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//BAND
		public RuleCall getTypeBANDTerminalRuleCall_2_0_0() { return cTypeBANDTerminalRuleCall_2_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_1() { return cIfsAssignment_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_1_0() { return cIfsIfSqlParserRuleCall_2_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_2_2_0() { return cBORTerminalRuleCall_2_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_2_1() { return cIfsAssignment_2_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_2_1_0() { return cIfsIfSqlParserRuleCall_2_2_1_0; }

		//type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_3() { return cGroup_3; }

		//type=BOR
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//BOR
		public RuleCall getTypeBORTerminalRuleCall_3_0_0() { return cTypeBORTerminalRuleCall_3_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_1() { return cIfsAssignment_3_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_1_0() { return cIfsIfSqlParserRuleCall_3_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_3_2_0() { return cBORTerminalRuleCall_3_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_2_1() { return cIfsAssignment_3_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_2_1_0() { return cIfsIfSqlParserRuleCall_3_2_1_0; }

		//type=EQUALS WS* ftype=IDENT ifs+=IfSql
		public Group getGroup_4() { return cGroup_4; }

		//type=EQUALS
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }

		//EQUALS
		public RuleCall getTypeEQUALSTerminalRuleCall_4_0_0() { return cTypeEQUALSTerminalRuleCall_4_0_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_4_1() { return cWSTerminalRuleCall_4_1; }

		//ftype=IDENT
		public Assignment getFtypeAssignment_4_2() { return cFtypeAssignment_4_2; }

		//IDENT
		public RuleCall getFtypeIDENTTerminalRuleCall_4_2_0() { return cFtypeIDENTTerminalRuleCall_4_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_4_3() { return cIfsAssignment_4_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_4_3_0() { return cIfsIfSqlParserRuleCall_4_3_0; }

		//type=HASH NUMBER ord=OrdSql
		public Group getGroup_5() { return cGroup_5; }

		//type=HASH
		public Assignment getTypeAssignment_5_0() { return cTypeAssignment_5_0; }

		//HASH
		public RuleCall getTypeHASHTerminalRuleCall_5_0_0() { return cTypeHASHTerminalRuleCall_5_0_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_5_1() { return cNUMBERTerminalRuleCall_5_1; }

		//ord=OrdSql
		public Assignment getOrdAssignment_5_2() { return cOrdAssignment_5_2; }

		//OrdSql
		public RuleCall getOrdOrdSqlParserRuleCall_5_2_0() { return cOrdOrdSqlParserRuleCall_5_2_0; }
	}

	public class IfSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsIfSqlFragmentParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//IfSql:
		//	sqls+=IfSqlFragment+;
		public ParserRule getRule() { return rule; }

		//sqls+=IfSqlFragment+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//IfSqlFragment
		public RuleCall getSqlsIfSqlFragmentParserRuleCall_0() { return cSqlsIfSqlFragmentParserRuleCall_0; }
	}

	public class IfSqlFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIfSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cColAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_1_1_0 = (RuleCall)cColAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCnstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_2_1_0 = (RuleCall)cCnstAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cIdentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_3_1_0 = (RuleCall)cIdentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cMetaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMetaIfMetaSqlParserRuleCall_4_1_0 = (RuleCall)cMetaAssignment_4_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//IfSqlFragment:
		//	value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=IfMetaSql RBRACE;
		public ParserRule getRule() { return rule; }

		//value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=IfMetaSql RBRACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=IfSqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//IfSqlValue
		public RuleCall getValueIfSqlValueParserRuleCall_0_0() { return cValueIfSqlValueParserRuleCall_0_0; }

		//AT col=Column
		public Group getGroup_1() { return cGroup_1; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0() { return cATTerminalRuleCall_1_0; }

		//col=Column
		public Assignment getColAssignment_1_1() { return cColAssignment_1_1; }

		//Column
		public RuleCall getColColumnParserRuleCall_1_1_0() { return cColColumnParserRuleCall_1_1_0; }

		//STRING cnst=Constant
		public Group getGroup_2() { return cGroup_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_2_1() { return cCnstAssignment_2_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_2_1_0() { return cCnstConstantParserRuleCall_2_1_0; }

		//COLON ident=Identifier
		public Group getGroup_3() { return cGroup_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_0() { return cCOLONTerminalRuleCall_3_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_3_1() { return cIdentAssignment_3_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_3_1_0() { return cIdentIdentifierParserRuleCall_3_1_0; }

		//LBRACE meta=IfMetaSql RBRACE
		public Group getGroup_4() { return cGroup_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4_0() { return cLBRACETerminalRuleCall_4_0; }

		//meta=IfMetaSql
		public Assignment getMetaAssignment_4_1() { return cMetaAssignment_4_1; }

		//IfMetaSql
		public RuleCall getMetaIfMetaSqlParserRuleCall_4_1_0() { return cMetaIfMetaSqlParserRuleCall_4_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4_2() { return cRBRACETerminalRuleCall_4_2; }
	}

	public class IfSqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cHASHTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cCARETTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cEQUALSTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cLESS_THANTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cMORE_THANTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cESC_CHARTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cQUESTITerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cNOTTerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cBANDTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cHASHTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cCARETTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		
		////~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
		//IfSqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//	HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON |
		//	COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
		//	ESC_CHAR)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON |
		//COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
		//ESC_CHAR)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH
		//| CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_5() { return cSEMICOLONTerminalRuleCall_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_7() { return cMINUSTerminalRuleCall_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_8() { return cPLUSTerminalRuleCall_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_9() { return cLPARENTerminalRuleCall_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_10() { return cRPARENTerminalRuleCall_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_11() { return cQUESTITerminalRuleCall_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_12() { return cNOTTerminalRuleCall_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_13() { return cBANDTerminalRuleCall_0_13; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_14() { return cHASHTerminalRuleCall_0_14; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_15() { return cCARETTerminalRuleCall_0_15; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_16() { return cEQUALSTerminalRuleCall_0_16; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_17() { return cLESS_THANTerminalRuleCall_0_17; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_18() { return cMORE_THANTerminalRuleCall_0_18; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_19() { return cESC_CHARTerminalRuleCall_0_19; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
		//HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH
		//| CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_5() { return cSEMICOLONTerminalRuleCall_1_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_6() { return cCOMMATerminalRuleCall_1_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_7() { return cMINUSTerminalRuleCall_1_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_8() { return cPLUSTerminalRuleCall_1_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_9() { return cLPARENTerminalRuleCall_1_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_10() { return cRPARENTerminalRuleCall_1_0_10; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_11() { return cQUESTITerminalRuleCall_1_0_11; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_12() { return cNOTTerminalRuleCall_1_0_12; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_13() { return cBANDTerminalRuleCall_1_0_13; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_14() { return cHASHTerminalRuleCall_1_0_14; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_15() { return cCARETTerminalRuleCall_1_0_15; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_16() { return cEQUALSTerminalRuleCall_1_0_16; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_17() { return cLESS_THANTerminalRuleCall_1_0_17; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_18() { return cMORE_THANTerminalRuleCall_1_0_18; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_19() { return cESC_CHARTerminalRuleCall_1_0_19; }
	}

	public class IfMetaSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfMetaSql");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIfsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_1_0 = (RuleCall)cIfsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Assignment cIfsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_0_2_1_0 = (RuleCall)cIfsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeQUESTITerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondIfSqlCondParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final RuleCall cBORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cIfsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIfsIfSqlParserRuleCall_1_3_0 = (RuleCall)cIfsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cBORTerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Assignment cIfsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_1_4_1_0 = (RuleCall)cIfsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeBANDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cIfsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_1_0 = (RuleCall)cIfsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cIfsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_2_2_1_0 = (RuleCall)cIfsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeBORTerminalRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cIfsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_1_0 = (RuleCall)cIfsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cBORTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cIfsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cIfsIfSqlParserRuleCall_3_2_1_0 = (RuleCall)cIfsAssignment_3_2_1.eContents().get(0);
		
		//IfMetaSql:
		//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*;
		public ParserRule getRule() { return rule; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
		//(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_0() { return cGroup_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_0() { return cWSTerminalRuleCall_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_1() { return cIfsAssignment_0_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_1_0() { return cIfsIfSqlParserRuleCall_0_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_2_0() { return cBORTerminalRuleCall_0_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_0_2_1() { return cIfsAssignment_0_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_0_2_1_0() { return cIfsIfSqlParserRuleCall_0_2_1_0; }

		//type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_1() { return cGroup_1; }

		//type=QUESTI
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//QUESTI
		public RuleCall getTypeQUESTITerminalRuleCall_1_0_0() { return cTypeQUESTITerminalRuleCall_1_0_0; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_1_1_0() { return cCondIfSqlCondParserRuleCall_1_1_0; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_2() { return cBORTerminalRuleCall_1_2; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_3() { return cIfsAssignment_1_3; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_3_0() { return cIfsIfSqlParserRuleCall_1_3_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_4_0() { return cBORTerminalRuleCall_1_4_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_1_4_1() { return cIfsAssignment_1_4_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_1_4_1_0() { return cIfsIfSqlParserRuleCall_1_4_1_0; }

		//type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_2() { return cGroup_2; }

		//type=BAND
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//BAND
		public RuleCall getTypeBANDTerminalRuleCall_2_0_0() { return cTypeBANDTerminalRuleCall_2_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_1() { return cIfsAssignment_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_1_0() { return cIfsIfSqlParserRuleCall_2_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_2_2_0() { return cBORTerminalRuleCall_2_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_2_2_1() { return cIfsAssignment_2_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_2_2_1_0() { return cIfsIfSqlParserRuleCall_2_2_1_0; }

		//type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
		public Group getGroup_3() { return cGroup_3; }

		//type=BOR
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//BOR
		public RuleCall getTypeBORTerminalRuleCall_3_0_0() { return cTypeBORTerminalRuleCall_3_0_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_1() { return cIfsAssignment_3_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_1_0() { return cIfsIfSqlParserRuleCall_3_1_0; }

		//(BOR ifs+=IfSql)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//BOR
		public RuleCall getBORTerminalRuleCall_3_2_0() { return cBORTerminalRuleCall_3_2_0; }

		//ifs+=IfSql
		public Assignment getIfsAssignment_3_2_1() { return cIfsAssignment_3_2_1; }

		//IfSql
		public RuleCall getIfsIfSqlParserRuleCall_3_2_1_0() { return cIfsIfSqlParserRuleCall_3_2_1_0; }
	}

	public class IfSqlCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBool1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBool1IfSqlBoolParserRuleCall_1_0 = (RuleCall)cBool1Assignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cOperAlternatives_3_0_0 = (Alternatives)cOperAssignment_3_0.eContents().get(0);
		private final RuleCall cOperANDTerminalRuleCall_3_0_0_0 = (RuleCall)cOperAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cOperORTerminalRuleCall_3_0_0_1 = (RuleCall)cOperAlternatives_3_0_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cBool2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBool2IfSqlBoolParserRuleCall_3_2_0 = (RuleCall)cBool2Assignment_3_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//IfSqlCond:
		//	WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*;
		public ParserRule getRule() { return rule; }

		//WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//bool1=IfSqlBool
		public Assignment getBool1Assignment_1() { return cBool1Assignment_1; }

		//IfSqlBool
		public RuleCall getBool1IfSqlBoolParserRuleCall_1_0() { return cBool1IfSqlBoolParserRuleCall_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//(oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*
		public Group getGroup_3() { return cGroup_3; }

		//oper+=(AND | OR)
		public Assignment getOperAssignment_3_0() { return cOperAssignment_3_0; }

		//AND | OR
		public Alternatives getOperAlternatives_3_0_0() { return cOperAlternatives_3_0_0; }

		//AND
		public RuleCall getOperANDTerminalRuleCall_3_0_0_0() { return cOperANDTerminalRuleCall_3_0_0_0; }

		//OR
		public RuleCall getOperORTerminalRuleCall_3_0_0_1() { return cOperORTerminalRuleCall_3_0_0_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }

		//bool2+=IfSqlBool
		public Assignment getBool2Assignment_3_2() { return cBool2Assignment_3_2; }

		//IfSqlBool
		public RuleCall getBool2IfSqlBoolParserRuleCall_3_2_0() { return cBool2IfSqlBoolParserRuleCall_3_2_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_3() { return cWSTerminalRuleCall_3_3; }
	}

	public class IfSqlBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSqlBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cCnstAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCnstConstantParserRuleCall_0_2_0 = (RuleCall)cCnstAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_1_0_0 = (RuleCall)cNotAssignment_1_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cIdentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentIdentifierParserRuleCall_1_2_0 = (RuleCall)cIdentAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNotAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_2_0_0 = (RuleCall)cNotAssignment_2_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cCondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCondIfSqlCondParserRuleCall_2_2_0 = (RuleCall)cCondAssignment_2_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//IfSqlBool:
		//	not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN;
		public ParserRule getRule() { return rule; }

		//not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//not?=NOT? STRING cnst=Constant
		public Group getGroup_0() { return cGroup_0; }

		//not?=NOT?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_0_0_0() { return cNotNOTTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//cnst=Constant
		public Assignment getCnstAssignment_0_2() { return cCnstAssignment_0_2; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_0_2_0() { return cCnstConstantParserRuleCall_0_2_0; }

		//not?=NOT? COLON ident=Identifier
		public Group getGroup_1() { return cGroup_1; }

		//not?=NOT?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_1_0_0() { return cNotNOTTerminalRuleCall_1_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1() { return cCOLONTerminalRuleCall_1_1; }

		//ident=Identifier
		public Assignment getIdentAssignment_1_2() { return cIdentAssignment_1_2; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_1_2_0() { return cIdentIdentifierParserRuleCall_1_2_0; }

		//not?=NOT? LPAREN cond=IfSqlCond RPAREN
		public Group getGroup_2() { return cGroup_2; }

		//not?=NOT?
		public Assignment getNotAssignment_2_0() { return cNotAssignment_2_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_2_0_0() { return cNotNOTTerminalRuleCall_2_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_1() { return cLPARENTerminalRuleCall_2_1; }

		//cond=IfSqlCond
		public Assignment getCondAssignment_2_2() { return cCondAssignment_2_2; }

		//IfSqlCond
		public RuleCall getCondIfSqlCondParserRuleCall_2_2_0() { return cCondIfSqlCondParserRuleCall_2_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_3() { return cRPARENTerminalRuleCall_2_3; }
	}

	public class OrdSqlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSql");
		private final Assignment cSqlsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSqlsOrdSql2ParserRuleCall_0 = (RuleCall)cSqlsAssignment.eContents().get(0);
		
		//OrdSql:
		//	sqls+=OrdSql2+;
		public ParserRule getRule() { return rule; }

		//sqls+=OrdSql2+
		public Assignment getSqlsAssignment() { return cSqlsAssignment; }

		//OrdSql2
		public RuleCall getSqlsOrdSql2ParserRuleCall_0() { return cSqlsOrdSql2ParserRuleCall_0; }
	}

	public class OrdSql2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSql2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueOrdSqlValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCnstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCnstConstantParserRuleCall_1_1_0 = (RuleCall)cCnstAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIdentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentIdentifierParserRuleCall_2_1_0 = (RuleCall)cIdentAssignment_2_1.eContents().get(0);
		
		//OrdSql2:
		//	value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier;
		public ParserRule getRule() { return rule; }

		//value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=OrdSqlValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//OrdSqlValue
		public RuleCall getValueOrdSqlValueParserRuleCall_0_0() { return cValueOrdSqlValueParserRuleCall_0_0; }

		//STRING cnst=Constant
		public Group getGroup_1() { return cGroup_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//cnst=Constant
		public Assignment getCnstAssignment_1_1() { return cCnstAssignment_1_1; }

		//Constant
		public RuleCall getCnstConstantParserRuleCall_1_1_0() { return cCnstConstantParserRuleCall_1_1_0; }

		//COLON ident=Identifier
		public Group getGroup_2() { return cGroup_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_0() { return cCOLONTerminalRuleCall_2_0; }

		//ident=Identifier
		public Assignment getIdentAssignment_2_1() { return cIdentAssignment_2_1; }

		//Identifier
		public RuleCall getIdentIdentifierParserRuleCall_2_1_0() { return cIdentIdentifierParserRuleCall_2_1_0; }
	}

	public class OrdSqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdSqlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cLBRACETerminalRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cQUESTITerminalRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cNOTTerminalRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBANDTerminalRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cBORTerminalRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cHASHTerminalRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cATTerminalRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cCARETTerminalRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cEQUALSTerminalRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cLESS_THANTerminalRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cMORE_THANTerminalRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cESC_CHARTerminalRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cRESTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cMINUSTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cPLUSTerminalRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cLPARENTerminalRuleCall_1_0_9 = (RuleCall)cAlternatives_1_0.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_1_0_10 = (RuleCall)cAlternatives_1_0.eContents().get(10);
		private final RuleCall cLBRACETerminalRuleCall_1_0_11 = (RuleCall)cAlternatives_1_0.eContents().get(11);
		private final RuleCall cQUESTITerminalRuleCall_1_0_12 = (RuleCall)cAlternatives_1_0.eContents().get(12);
		private final RuleCall cNOTTerminalRuleCall_1_0_13 = (RuleCall)cAlternatives_1_0.eContents().get(13);
		private final RuleCall cBANDTerminalRuleCall_1_0_14 = (RuleCall)cAlternatives_1_0.eContents().get(14);
		private final RuleCall cBORTerminalRuleCall_1_0_15 = (RuleCall)cAlternatives_1_0.eContents().get(15);
		private final RuleCall cHASHTerminalRuleCall_1_0_16 = (RuleCall)cAlternatives_1_0.eContents().get(16);
		private final RuleCall cATTerminalRuleCall_1_0_17 = (RuleCall)cAlternatives_1_0.eContents().get(17);
		private final RuleCall cCARETTerminalRuleCall_1_0_18 = (RuleCall)cAlternatives_1_0.eContents().get(18);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_19 = (RuleCall)cAlternatives_1_0.eContents().get(19);
		private final RuleCall cLESS_THANTerminalRuleCall_1_0_20 = (RuleCall)cAlternatives_1_0.eContents().get(20);
		private final RuleCall cMORE_THANTerminalRuleCall_1_0_21 = (RuleCall)cAlternatives_1_0.eContents().get(21);
		private final RuleCall cESC_CHARTerminalRuleCall_1_0_22 = (RuleCall)cAlternatives_1_0.eContents().get(22);
		
		////~(COLON | STRING | RBRACE)
		//OrdSqlValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//	BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS
		//	| SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS
		//	| LESS_THAN | MORE_THAN | ESC_CHAR)*;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS
		//| SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS
		//| LESS_THAN | MORE_THAN | ESC_CHAR)*
		public Group getGroup() { return cGroup; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0_0() { return cRESTTerminalRuleCall_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_0_1() { return cIDENT_DOTTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0_2() { return cIDENTTerminalRuleCall_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_3() { return cNUMBERTerminalRuleCall_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_4() { return cWSTerminalRuleCall_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_5() { return cSEMICOLONTerminalRuleCall_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_7() { return cMINUSTerminalRuleCall_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_8() { return cPLUSTerminalRuleCall_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_9() { return cLPARENTerminalRuleCall_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_10() { return cRPARENTerminalRuleCall_0_10; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_0_11() { return cLBRACETerminalRuleCall_0_11; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_0_12() { return cQUESTITerminalRuleCall_0_12; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0_13() { return cNOTTerminalRuleCall_0_13; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_0_14() { return cBANDTerminalRuleCall_0_14; }

		//BOR
		public RuleCall getBORTerminalRuleCall_0_15() { return cBORTerminalRuleCall_0_15; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_0_16() { return cHASHTerminalRuleCall_0_16; }

		//AT
		public RuleCall getATTerminalRuleCall_0_17() { return cATTerminalRuleCall_0_17; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_0_18() { return cCARETTerminalRuleCall_0_18; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_19() { return cEQUALSTerminalRuleCall_0_19; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0_20() { return cLESS_THANTerminalRuleCall_0_20; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_0_21() { return cMORE_THANTerminalRuleCall_0_21; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_0_22() { return cESC_CHARTerminalRuleCall_0_22; }

		//=> (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT
		//| BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)*
		public Group getGroup_1() { return cGroup_1; }

		//REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
		//BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//REST
		public RuleCall getRESTTerminalRuleCall_1_0_0() { return cRESTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1_0_1() { return cIDENT_DOTTerminalRuleCall_1_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0_2() { return cIDENTTerminalRuleCall_1_0_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_0_3() { return cNUMBERTerminalRuleCall_1_0_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_4() { return cWSTerminalRuleCall_1_0_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_5() { return cSEMICOLONTerminalRuleCall_1_0_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_6() { return cCOMMATerminalRuleCall_1_0_6; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_7() { return cMINUSTerminalRuleCall_1_0_7; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_8() { return cPLUSTerminalRuleCall_1_0_8; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_9() { return cLPARENTerminalRuleCall_1_0_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_10() { return cRPARENTerminalRuleCall_1_0_10; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_1_0_11() { return cLBRACETerminalRuleCall_1_0_11; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_1_0_12() { return cQUESTITerminalRuleCall_1_0_12; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_1_0_13() { return cNOTTerminalRuleCall_1_0_13; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_1_0_14() { return cBANDTerminalRuleCall_1_0_14; }

		//BOR
		public RuleCall getBORTerminalRuleCall_1_0_15() { return cBORTerminalRuleCall_1_0_15; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_1_0_16() { return cHASHTerminalRuleCall_1_0_16; }

		//AT
		public RuleCall getATTerminalRuleCall_1_0_17() { return cATTerminalRuleCall_1_0_17; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0_18() { return cCARETTerminalRuleCall_1_0_18; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_19() { return cEQUALSTerminalRuleCall_1_0_19; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_1_0_20() { return cLESS_THANTerminalRuleCall_1_0_20; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_1_0_21() { return cMORE_THANTerminalRuleCall_1_0_21; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_1_0_22() { return cESC_CHARTerminalRuleCall_1_0_22; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final RuleCall cNameNUMBERTerminalRuleCall_0_0_2 = (RuleCall)cNameAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCARETTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cValsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cValsAlternatives_1_2_1_0 = (Alternatives)cValsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_1_2_1_0_0 = (RuleCall)cValsAlternatives_1_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_1_2_1_0_1 = (RuleCall)cValsAlternatives_1_2_1_0.eContents().get(1);
		
		//Column:
		//	name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//name=(IDENT | IDENT_DOT | NUMBER)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT | IDENT_DOT | NUMBER
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_0_1; }

		//NUMBER
		public RuleCall getNameNUMBERTerminalRuleCall_0_0_2() { return cNameNUMBERTerminalRuleCall_0_0_2; }

		//(=> CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_1() { return cGroup_1; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_1_0() { return cCARETTerminalRuleCall_1_0; }

		//type=IDENT
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_1_1_0() { return cTypeIDENTTerminalRuleCall_1_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_1_2_0() { return cCARETTerminalRuleCall_1_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_1_2_1() { return cValsAssignment_1_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_1_2_1_0() { return cValsAlternatives_1_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_1_2_1_0_0() { return cValsIDENTTerminalRuleCall_1_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_1_2_1_0_1() { return cValsNUMBERTerminalRuleCall_1_2_1_0_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCaseAlternatives_0_0 = (Alternatives)cCaseAssignment_0.eContents().get(0);
		private final RuleCall cCasePLUSTerminalRuleCall_0_0_0 = (RuleCall)cCaseAlternatives_0_0.eContents().get(0);
		private final RuleCall cCaseMINUSTerminalRuleCall_0_0_1 = (RuleCall)cCaseAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cValsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cValsAlternatives_2_2_1_0 = (Alternatives)cValsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_2_2_1_0_0 = (RuleCall)cValsAlternatives_2_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_2_2_1_0_1 = (RuleCall)cValsAlternatives_2_2_1_0.eContents().get(1);
		
		//Constant:
		//	case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//case=(PLUS | MINUS)?
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }

		//PLUS | MINUS
		public Alternatives getCaseAlternatives_0_0() { return cCaseAlternatives_0_0; }

		//PLUS
		public RuleCall getCasePLUSTerminalRuleCall_0_0_0() { return cCasePLUSTerminalRuleCall_0_0_0; }

		//MINUS
		public RuleCall getCaseMINUSTerminalRuleCall_0_0_1() { return cCaseMINUSTerminalRuleCall_0_0_1; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0_0() { return cNameIDENTTerminalRuleCall_1_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_1_0_1() { return cNameIDENT_DOTTerminalRuleCall_1_0_1; }

		//(=> CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_2() { return cGroup_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_2_0() { return cCARETTerminalRuleCall_2_0; }

		//type=IDENT
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_2_1_0() { return cTypeIDENTTerminalRuleCall_2_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_2_2_0() { return cCARETTerminalRuleCall_2_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_2_2_1() { return cValsAssignment_2_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_2_2_1_0() { return cValsAlternatives_2_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_2_2_1_0_0() { return cValsIDENTTerminalRuleCall_2_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_2_2_1_0_1() { return cValsNUMBERTerminalRuleCall_2_2_1_0_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModeAlternatives_0_0 = (Alternatives)cModeAssignment_0.eContents().get(0);
		private final RuleCall cModeEQUALSTerminalRuleCall_0_0_0 = (RuleCall)cModeAlternatives_0_0.eContents().get(0);
		private final RuleCall cModeLESS_THANTerminalRuleCall_0_0_1 = (RuleCall)cModeAlternatives_0_0.eContents().get(1);
		private final RuleCall cModeMORE_THANTerminalRuleCall_0_0_2 = (RuleCall)cModeAlternatives_0_0.eContents().get(2);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCaseAlternatives_1_0 = (Alternatives)cCaseAssignment_1.eContents().get(0);
		private final RuleCall cCasePLUSTerminalRuleCall_1_0_0 = (RuleCall)cCaseAlternatives_1_0.eContents().get(0);
		private final RuleCall cCaseMINUSTerminalRuleCall_1_0_1 = (RuleCall)cCaseAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cNameNUMBERTerminalRuleCall_2_0_2 = (RuleCall)cNameAlternatives_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCARETTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cValsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Alternatives cValsAlternatives_3_2_1_0 = (Alternatives)cValsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_3_2_1_0_0 = (RuleCall)cValsAlternatives_3_2_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_3_2_1_0_1 = (RuleCall)cValsAlternatives_3_2_1_0.eContents().get(1);
		
		//Identifier:
		//	mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET
		//	vals+=(IDENT | NUMBER))*)?;
		public ParserRule getRule() { return rule; }

		//mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET
		//vals+=(IDENT | NUMBER))*)?
		public Group getGroup() { return cGroup; }

		//mode=(EQUALS | LESS_THAN | MORE_THAN)?
		public Assignment getModeAssignment_0() { return cModeAssignment_0; }

		//EQUALS | LESS_THAN | MORE_THAN
		public Alternatives getModeAlternatives_0_0() { return cModeAlternatives_0_0; }

		//EQUALS
		public RuleCall getModeEQUALSTerminalRuleCall_0_0_0() { return cModeEQUALSTerminalRuleCall_0_0_0; }

		//LESS_THAN
		public RuleCall getModeLESS_THANTerminalRuleCall_0_0_1() { return cModeLESS_THANTerminalRuleCall_0_0_1; }

		//MORE_THAN
		public RuleCall getModeMORE_THANTerminalRuleCall_0_0_2() { return cModeMORE_THANTerminalRuleCall_0_0_2; }

		//case=(PLUS | MINUS)?
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//PLUS | MINUS
		public Alternatives getCaseAlternatives_1_0() { return cCaseAlternatives_1_0; }

		//PLUS
		public RuleCall getCasePLUSTerminalRuleCall_1_0_0() { return cCasePLUSTerminalRuleCall_1_0_0; }

		//MINUS
		public RuleCall getCaseMINUSTerminalRuleCall_1_0_1() { return cCaseMINUSTerminalRuleCall_1_0_1; }

		//name=(IDENT | IDENT_DOT | NUMBER)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT | IDENT_DOT | NUMBER
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0_0() { return cNameIDENTTerminalRuleCall_2_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_2_0_1() { return cNameIDENT_DOTTerminalRuleCall_2_0_1; }

		//NUMBER
		public RuleCall getNameNUMBERTerminalRuleCall_2_0_2() { return cNameNUMBERTerminalRuleCall_2_0_2; }

		//(=> CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_3_0() { return cCARETTerminalRuleCall_3_0; }

		//type=IDENT
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_3_1_0() { return cTypeIDENTTerminalRuleCall_3_1_0; }

		//(=> CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//=> CARET
		public RuleCall getCARETTerminalRuleCall_3_2_0() { return cCARETTerminalRuleCall_3_2_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_3_2_1() { return cValsAssignment_3_2_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_3_2_1_0() { return cValsAlternatives_3_2_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_3_2_1_0_0() { return cValsIDENTTerminalRuleCall_3_2_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_3_2_1_0_1() { return cValsNUMBERTerminalRuleCall_3_2_1_0_1; }
	}

	public class MappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeMAPPING_TYPEEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersFilterParserRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cMappingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingMappingParserRuleCall_6_0 = (RuleCall)cMappingAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//MappingRule:
		//	name=Name LPAREN type=MAPPING_TYPE (COMMA filters+=Filter)* RPAREN EQUALS mapping=Mapping SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=Name LPAREN type=MAPPING_TYPE (COMMA filters+=Filter)* RPAREN EQUALS mapping=Mapping SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=MAPPING_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//MAPPING_TYPE
		public RuleCall getTypeMAPPING_TYPEEnumRuleCall_2_0() { return cTypeMAPPING_TYPEEnumRuleCall_2_0; }

		//(COMMA filters+=Filter)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=Filter
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//Filter
		public RuleCall getFiltersFilterParserRuleCall_3_1_0() { return cFiltersFilterParserRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//mapping=Mapping
		public Assignment getMappingAssignment_6() { return cMappingAssignment_6; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_6_0() { return cMappingMappingParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cMappingItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingItemsMappingItemParserRuleCall_1_0 = (RuleCall)cMappingItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMappingItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMappingItemsMappingItemParserRuleCall_2_1_0 = (RuleCall)cMappingItemsAssignment_2_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Mapping:
		//	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;
		public ParserRule getRule() { return rule; }

		//WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//mappingItems+=MappingItem
		public Assignment getMappingItemsAssignment_1() { return cMappingItemsAssignment_1; }

		//MappingItem
		public RuleCall getMappingItemsMappingItemParserRuleCall_1_0() { return cMappingItemsMappingItemParserRuleCall_1_0; }

		//(WS+ mappingItems+=MappingItem)*
		public Group getGroup_2() { return cGroup_2; }

		//WS+
		public RuleCall getWSTerminalRuleCall_2_0() { return cWSTerminalRuleCall_2_0; }

		//mappingItems+=MappingItem
		public Assignment getMappingItemsAssignment_2_1() { return cMappingItemsAssignment_2_1; }

		//MappingItem
		public RuleCall getMappingItemsMappingItemParserRuleCall_2_1_0() { return cMappingItemsMappingItemParserRuleCall_2_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
	}

	public class MappingItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cColAlternatives_0_0 = (Alternatives)cColAssignment_0.eContents().get(0);
		private final RuleCall cColIDENTTerminalRuleCall_0_0_0 = (RuleCall)cColAlternatives_0_0.eContents().get(0);
		private final RuleCall cColNUMBERTerminalRuleCall_0_0_1 = (RuleCall)cColAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cAttrAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttrMappingIdentifierParserRuleCall_1_2_1_0 = (RuleCall)cAttrAssignment_1_2_1.eContents().get(0);
		
		//MappingItem:
		//	col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingIdentifier)?)?;
		public ParserRule getRule() { return rule; }

		//col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingIdentifier)?)?
		public Group getGroup() { return cGroup; }

		//col=(IDENT | NUMBER)
		public Assignment getColAssignment_0() { return cColAssignment_0; }

		//IDENT | NUMBER
		public Alternatives getColAlternatives_0_0() { return cColAlternatives_0_0; }

		//IDENT
		public RuleCall getColIDENTTerminalRuleCall_0_0_0() { return cColIDENTTerminalRuleCall_0_0_0; }

		//NUMBER
		public RuleCall getColNUMBERTerminalRuleCall_0_0_1() { return cColNUMBERTerminalRuleCall_0_0_1; }

		//(STRING type=IDENT? (STRING attr=MappingIdentifier)?)?
		public Group getGroup_1() { return cGroup_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//type=IDENT?
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_1_1_0() { return cTypeIDENTTerminalRuleCall_1_1_0; }

		//(STRING attr=MappingIdentifier)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2_0() { return cSTRINGTerminalRuleCall_1_2_0; }

		//attr=MappingIdentifier
		public Assignment getAttrAssignment_1_2_1() { return cAttrAssignment_1_2_1; }

		//MappingIdentifier
		public RuleCall getAttrMappingIdentifierParserRuleCall_1_2_1_0() { return cAttrMappingIdentifierParserRuleCall_1_2_1_0; }
	}

	public class MappingIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIDENT_DOTTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCARETTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValsAlternatives_1_1_0 = (Alternatives)cValsAssignment_1_1.eContents().get(0);
		private final RuleCall cValsIDENTTerminalRuleCall_1_1_0_0 = (RuleCall)cValsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cValsNUMBERTerminalRuleCall_1_1_0_1 = (RuleCall)cValsAlternatives_1_1_0.eContents().get(1);
		
		//MappingIdentifier:
		//	name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*;
		public ParserRule getRule() { return rule; }

		//name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*
		public Group getGroup() { return cGroup; }

		//name=(IDENT | IDENT_DOT)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENT | IDENT_DOT
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }

		//IDENT_DOT
		public RuleCall getNameIDENT_DOTTerminalRuleCall_0_0_1() { return cNameIDENT_DOTTerminalRuleCall_0_0_1; }

		//(CARET vals+=(IDENT | NUMBER))*
		public Group getGroup_1() { return cGroup_1; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_1_0() { return cCARETTerminalRuleCall_1_0; }

		//vals+=(IDENT | NUMBER)
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//IDENT | NUMBER
		public Alternatives getValsAlternatives_1_1_0() { return cValsAlternatives_1_1_0; }

		//IDENT
		public RuleCall getValsIDENTTerminalRuleCall_1_1_0_0() { return cValsIDENTTerminalRuleCall_1_1_0_0; }

		//NUMBER
		public RuleCall getValsNUMBERTerminalRuleCall_1_1_0_1() { return cValsNUMBERTerminalRuleCall_1_1_0_1; }
	}

	public class OptionalFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOPTION_TYPEEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFiltersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFiltersFilterParserRuleCall_3_1_0 = (RuleCall)cFiltersAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEQUALSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cOptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionFeatureValueParserRuleCall_6_0 = (RuleCall)cOptionAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//OptionalFeature:
		//	name=Name LPAREN type=OPTION_TYPE (COMMA filters+=Filter)* RPAREN EQUALS option=FeatureValue SEMICOLON;
		public ParserRule getRule() { return rule; }

		//name=Name LPAREN type=OPTION_TYPE (COMMA filters+=Filter)* RPAREN EQUALS option=FeatureValue SEMICOLON
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//type=OPTION_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OPTION_TYPE
		public RuleCall getTypeOPTION_TYPEEnumRuleCall_2_0() { return cTypeOPTION_TYPEEnumRuleCall_2_0; }

		//(COMMA filters+=Filter)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//filters+=Filter
		public Assignment getFiltersAssignment_3_1() { return cFiltersAssignment_3_1; }

		//Filter
		public RuleCall getFiltersFilterParserRuleCall_3_1_0() { return cFiltersFilterParserRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_5() { return cEQUALSTerminalRuleCall_5; }

		//option=FeatureValue
		public Assignment getOptionAssignment_6() { return cOptionAssignment_6; }

		//FeatureValue
		public RuleCall getOptionFeatureValueParserRuleCall_6_0() { return cOptionFeatureValueParserRuleCall_6_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
	}

	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRESTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDENT_DOTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCOLONTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMINUSTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPLUSTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLPARENTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRPARENTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLBRACETerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRBRACETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cQUESTITerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNOTTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cBANDTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cBORTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cHASHTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cATTerminalRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cCARETTerminalRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cEQUALSTerminalRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLESS_THANTerminalRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cMORE_THANTerminalRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cESC_CHARTerminalRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		
		//FeatureValue:
		//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)+;
		public ParserRule getRule() { return rule; }

		//(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
		//QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//REST
		public RuleCall getRESTTerminalRuleCall_0() { return cRESTTerminalRuleCall_0; }

		//IDENT_DOT
		public RuleCall getIDENT_DOTTerminalRuleCall_1() { return cIDENT_DOTTerminalRuleCall_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_3() { return cNUMBERTerminalRuleCall_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_5() { return cCOLONTerminalRuleCall_5; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7() { return cCOMMATerminalRuleCall_7; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_8() { return cMINUSTerminalRuleCall_8; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_9() { return cPLUSTerminalRuleCall_9; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_10() { return cLPARENTerminalRuleCall_10; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_11() { return cRPARENTerminalRuleCall_11; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_12() { return cLBRACETerminalRuleCall_12; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_13() { return cRBRACETerminalRuleCall_13; }

		//QUESTI
		public RuleCall getQUESTITerminalRuleCall_14() { return cQUESTITerminalRuleCall_14; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_15() { return cNOTTerminalRuleCall_15; }

		//BAND
		public RuleCall getBANDTerminalRuleCall_16() { return cBANDTerminalRuleCall_16; }

		//BOR
		public RuleCall getBORTerminalRuleCall_17() { return cBORTerminalRuleCall_17; }

		//HASH
		public RuleCall getHASHTerminalRuleCall_18() { return cHASHTerminalRuleCall_18; }

		//AT
		public RuleCall getATTerminalRuleCall_19() { return cATTerminalRuleCall_19; }

		//CARET
		public RuleCall getCARETTerminalRuleCall_20() { return cCARETTerminalRuleCall_20; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_21() { return cEQUALSTerminalRuleCall_21; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_22() { return cLESS_THANTerminalRuleCall_22; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_23() { return cMORE_THANTerminalRuleCall_23; }

		//ESC_CHAR
		public RuleCall getESC_CHARTerminalRuleCall_24() { return cESC_CHARTerminalRuleCall_24; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Name:
		//	{Name} name=IDENT;
		public ParserRule getRule() { return rule; }

		//{Name} name=IDENT
		public Group getGroup() { return cGroup; }

		//{Name}
		public Action getNameAction_0() { return cNameAction_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }
	}

	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Filter:
		//	{Filter} name=IDENT;
		public ParserRule getRule() { return rule; }

		//{Filter} name=IDENT
		public Group getGroup() { return cGroup; }

		//{Filter}
		public Action getFilterAction_0() { return cFilterAction_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }
	}
	
	
	public class STATEMEN_TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "STATEMEN_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cQRYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cQRYQRYKeyword_0_0 = (Keyword)cQRYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCRUDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCRUDCRUDKeyword_1_0 = (Keyword)cCRUDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCALLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCALLCALLKeyword_2_0 = (Keyword)cCALLEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum STATEMEN_TYPE:
		//	QRY | CRUD | CALL;
		public EnumRule getRule() { return rule; }

		//QRY | CRUD | CALL
		public Alternatives getAlternatives() { return cAlternatives; }

		//QRY
		public EnumLiteralDeclaration getQRYEnumLiteralDeclaration_0() { return cQRYEnumLiteralDeclaration_0; }

		//"QRY"
		public Keyword getQRYQRYKeyword_0_0() { return cQRYQRYKeyword_0_0; }

		//CRUD
		public EnumLiteralDeclaration getCRUDEnumLiteralDeclaration_1() { return cCRUDEnumLiteralDeclaration_1; }

		//"CRUD"
		public Keyword getCRUDCRUDKeyword_1_0() { return cCRUDCRUDKeyword_1_0; }

		//CALL
		public EnumLiteralDeclaration getCALLEnumLiteralDeclaration_2() { return cCALLEnumLiteralDeclaration_2; }

		//"CALL"
		public Keyword getCALLCALLKeyword_2_0() { return cCALLCALLKeyword_2_0; }
	}

	public class MAPPING_TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MAPPING_TYPE");
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOUTOUTKeyword_0 = (Keyword)cOUTEnumLiteralDeclaration.eContents().get(0);
		
		//enum MAPPING_TYPE:
		//	OUT;
		public EnumRule getRule() { return rule; }

		//OUT
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration() { return cOUTEnumLiteralDeclaration; }

		//"OUT"
		public Keyword getOUTOUTKeyword_0() { return cOUTOUTKeyword_0; }
	}

	public class OPTION_TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOPTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOPTOPTKeyword_0_0 = (Keyword)cOPTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOPTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOPTLOPTKeyword_1_0 = (Keyword)cLOPTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIOPTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIOPTIOPTKeyword_2_0 = (Keyword)cIOPTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSOPTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSOPTSOPTKeyword_3_0 = (Keyword)cSOPTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOPTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOPTBOPTKeyword_4_0 = (Keyword)cBOPTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OPTION_TYPE:
		//	OPT | LOPT | IOPT | SOPT | BOPT;
		public EnumRule getRule() { return rule; }

		//OPT | LOPT | IOPT | SOPT | BOPT
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPT
		public EnumLiteralDeclaration getOPTEnumLiteralDeclaration_0() { return cOPTEnumLiteralDeclaration_0; }

		//"OPT"
		public Keyword getOPTOPTKeyword_0_0() { return cOPTOPTKeyword_0_0; }

		//LOPT
		public EnumLiteralDeclaration getLOPTEnumLiteralDeclaration_1() { return cLOPTEnumLiteralDeclaration_1; }

		//"LOPT"
		public Keyword getLOPTLOPTKeyword_1_0() { return cLOPTLOPTKeyword_1_0; }

		//IOPT
		public EnumLiteralDeclaration getIOPTEnumLiteralDeclaration_2() { return cIOPTEnumLiteralDeclaration_2; }

		//"IOPT"
		public Keyword getIOPTIOPTKeyword_2_0() { return cIOPTIOPTKeyword_2_0; }

		//SOPT
		public EnumLiteralDeclaration getSOPTEnumLiteralDeclaration_3() { return cSOPTEnumLiteralDeclaration_3; }

		//"SOPT"
		public Keyword getSOPTSOPTKeyword_3_0() { return cSOPTSOPTKeyword_3_0; }

		//BOPT
		public EnumLiteralDeclaration getBOPTEnumLiteralDeclaration_4() { return cBOPTEnumLiteralDeclaration_4; }

		//"BOPT"
		public Keyword getBOPTBOPTKeyword_4_0() { return cBOPTBOPTKeyword_4_0; }
	}
	
	private ArtifactElements pArtifact;
	private MetaStatementElements pMetaStatement;
	private SqlElements pSql;
	private SqlFragmentElements pSqlFragment;
	private SqlValueElements pSqlValue;
	private MetaSqlElements pMetaSql;
	private IfSqlElements pIfSql;
	private IfSqlFragmentElements pIfSqlFragment;
	private IfSqlValueElements pIfSqlValue;
	private IfMetaSqlElements pIfMetaSql;
	private IfSqlCondElements pIfSqlCond;
	private IfSqlBoolElements pIfSqlBool;
	private OrdSqlElements pOrdSql;
	private OrdSql2Elements pOrdSql2;
	private OrdSqlValueElements pOrdSqlValue;
	private ColumnElements pColumn;
	private ConstantElements pConstant;
	private IdentifierElements pIdentifier;
	private MappingRuleElements pMappingRule;
	private MappingElements pMapping;
	private MappingItemElements pMappingItem;
	private MappingIdentifierElements pMappingIdentifier;
	private OptionalFeatureElements pOptionalFeature;
	private FeatureValueElements pFeatureValue;
	private NameElements pName;
	private FilterElements pFilter;
	private STATEMEN_TYPEElements unknownRuleSTATEMEN_TYPE;
	private MAPPING_TYPEElements unknownRuleMAPPING_TYPE;
	private OPTION_TYPEElements unknownRuleOPTION_TYPE;
	private TerminalRule tIDENT_DOT;
	private TerminalRule tIDENT;
	private TerminalRule tNUMBER;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tESC_CHAR;
	private TerminalRule tCOLON;
	private TerminalRule tSEMICOLON;
	private TerminalRule tSTRING;
	private TerminalRule tCOMMA;
	private TerminalRule tMINUS;
	private TerminalRule tPLUS;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	private TerminalRule tLBRACE;
	private TerminalRule tRBRACE;
	private TerminalRule tQUESTI;
	private TerminalRule tNOT;
	private TerminalRule tBAND;
	private TerminalRule tBOR;
	private TerminalRule tHASH;
	private TerminalRule tAT;
	private TerminalRule tCARET;
	private TerminalRule tEQUALS;
	private TerminalRule tLESS_THAN;
	private TerminalRule tMORE_THAN;
	private TerminalRule tREST;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public ProcessorDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Artifact:
	//	WS* (features+=OptionalFeature WS* | statements+=MetaStatement WS* | mappings+=MappingRule WS*)+;
	public ArtifactElements getArtifactAccess() {
		return (pArtifact != null) ? pArtifact : (pArtifact = new ArtifactElements());
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//MetaStatement:
	//	name=Name LPAREN type=STATEMEN_TYPE (COMMA filters+=Filter)* RPAREN EQUALS statement=Sql SEMICOLON;
	public MetaStatementElements getMetaStatementAccess() {
		return (pMetaStatement != null) ? pMetaStatement : (pMetaStatement = new MetaStatementElements());
	}
	
	public ParserRule getMetaStatementRule() {
		return getMetaStatementAccess().getRule();
	}

	//Sql:
	//	sqls+=SqlFragment+;
	public SqlElements getSqlAccess() {
		return (pSql != null) ? pSql : (pSql = new SqlElements());
	}
	
	public ParserRule getSqlRule() {
		return getSqlAccess().getRule();
	}

	//SqlFragment:
	//	value=SqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=MetaSql RBRACE;
	public SqlFragmentElements getSqlFragmentAccess() {
		return (pSqlFragment != null) ? pSqlFragment : (pSqlFragment = new SqlFragmentElements());
	}
	
	public ParserRule getSqlFragmentRule() {
		return getSqlFragmentAccess().getRule();
	}

	////~(COLON | STRING | AT | LBRACE | SEMICOLON)
	//SqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS | PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR
	//	| HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | COMMA | MINUS
	//	| PLUS | LPAREN | RPAREN | RBRACE | QUESTI | NOT | BAND | BOR | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
	//	ESC_CHAR)*;
	public SqlValueElements getSqlValueAccess() {
		return (pSqlValue != null) ? pSqlValue : (pSqlValue = new SqlValueElements());
	}
	
	public ParserRule getSqlValueRule() {
		return getSqlValueAccess().getRule();
	}

	//MetaSql:
	//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
	//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=EQUALS WS* ftype=IDENT ifs+=IfSql | type=HASH NUMBER
	//	ord=OrdSql;
	public MetaSqlElements getMetaSqlAccess() {
		return (pMetaSql != null) ? pMetaSql : (pMetaSql = new MetaSqlElements());
	}
	
	public ParserRule getMetaSqlRule() {
		return getMetaSqlAccess().getRule();
	}

	//IfSql:
	//	sqls+=IfSqlFragment+;
	public IfSqlElements getIfSqlAccess() {
		return (pIfSql != null) ? pIfSql : (pIfSql = new IfSqlElements());
	}
	
	public ParserRule getIfSqlRule() {
		return getIfSqlAccess().getRule();
	}

	//IfSqlFragment:
	//	value=IfSqlValue | AT col=Column | STRING cnst=Constant | COLON ident=Identifier | LBRACE meta=IfMetaSql RBRACE;
	public IfSqlFragmentElements getIfSqlFragmentAccess() {
		return (pIfSqlFragment != null) ? pIfSqlFragment : (pIfSqlFragment = new IfSqlFragmentElements());
	}
	
	public ParserRule getIfSqlFragmentRule() {
		return getIfSqlFragmentAccess().getRule();
	}

	////~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
	//IfSqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND |
	//	HASH | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON |
	//	COMMA | MINUS | PLUS | LPAREN | RPAREN | QUESTI | NOT | BAND | HASH | CARET | EQUALS | LESS_THAN | MORE_THAN |
	//	ESC_CHAR)*;
	public IfSqlValueElements getIfSqlValueAccess() {
		return (pIfSqlValue != null) ? pIfSqlValue : (pIfSqlValue = new IfSqlValueElements());
	}
	
	public ParserRule getIfSqlValueRule() {
		return getIfSqlValueAccess().getRule();
	}

	//IfMetaSql:
	//	WS ifs+=IfSql (BOR ifs+=IfSql)* | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)* | type=BAND ifs+=IfSql
	//	(BOR ifs+=IfSql)* | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*;
	public IfMetaSqlElements getIfMetaSqlAccess() {
		return (pIfMetaSql != null) ? pIfMetaSql : (pIfMetaSql = new IfMetaSqlElements());
	}
	
	public ParserRule getIfMetaSqlRule() {
		return getIfMetaSqlAccess().getRule();
	}

	//IfSqlCond:
	//	WS* bool1=IfSqlBool WS* (oper+=(AND | OR) WS* bool2+=IfSqlBool WS*)*;
	public IfSqlCondElements getIfSqlCondAccess() {
		return (pIfSqlCond != null) ? pIfSqlCond : (pIfSqlCond = new IfSqlCondElements());
	}
	
	public ParserRule getIfSqlCondRule() {
		return getIfSqlCondAccess().getRule();
	}

	//IfSqlBool:
	//	not?=NOT? STRING cnst=Constant | not?=NOT? COLON ident=Identifier | not?=NOT? LPAREN cond=IfSqlCond RPAREN;
	public IfSqlBoolElements getIfSqlBoolAccess() {
		return (pIfSqlBool != null) ? pIfSqlBool : (pIfSqlBool = new IfSqlBoolElements());
	}
	
	public ParserRule getIfSqlBoolRule() {
		return getIfSqlBoolAccess().getRule();
	}

	//OrdSql:
	//	sqls+=OrdSql2+;
	public OrdSqlElements getOrdSqlAccess() {
		return (pOrdSql != null) ? pOrdSql : (pOrdSql = new OrdSqlElements());
	}
	
	public ParserRule getOrdSqlRule() {
		return getOrdSqlAccess().getRule();
	}

	//OrdSql2:
	//	value=OrdSqlValue | STRING cnst=Constant | COLON ident=Identifier;
	public OrdSql2Elements getOrdSql2Access() {
		return (pOrdSql2 != null) ? pOrdSql2 : (pOrdSql2 = new OrdSql2Elements());
	}
	
	public ParserRule getOrdSql2Rule() {
		return getOrdSql2Access().getRule();
	}

	////~(COLON | STRING | RBRACE)
	//OrdSqlValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT |
	//	BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR) => (REST | IDENT_DOT | IDENT | NUMBER | WS
	//	| SEMICOLON | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS
	//	| LESS_THAN | MORE_THAN | ESC_CHAR)*;
	public OrdSqlValueElements getOrdSqlValueAccess() {
		return (pOrdSqlValue != null) ? pOrdSqlValue : (pOrdSqlValue = new OrdSqlValueElements());
	}
	
	public ParserRule getOrdSqlValueRule() {
		return getOrdSqlValueAccess().getRule();
	}

	//Column:
	//	name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Constant:
	//	case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT) (CARET type=IDENT (CARET vals+=(IDENT | NUMBER))*)?;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Identifier:
	//	mode=(EQUALS | LESS_THAN | MORE_THAN)? case=(PLUS | MINUS)? name=(IDENT | IDENT_DOT | NUMBER) (CARET type=IDENT (CARET
	//	vals+=(IDENT | NUMBER))*)?;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//MappingRule:
	//	name=Name LPAREN type=MAPPING_TYPE (COMMA filters+=Filter)* RPAREN EQUALS mapping=Mapping SEMICOLON;
	public MappingRuleElements getMappingRuleAccess() {
		return (pMappingRule != null) ? pMappingRule : (pMappingRule = new MappingRuleElements());
	}
	
	public ParserRule getMappingRuleRule() {
		return getMappingRuleAccess().getRule();
	}

	//Mapping:
	//	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MappingItem:
	//	col=(IDENT | NUMBER) (STRING type=IDENT? (STRING attr=MappingIdentifier)?)?;
	public MappingItemElements getMappingItemAccess() {
		return (pMappingItem != null) ? pMappingItem : (pMappingItem = new MappingItemElements());
	}
	
	public ParserRule getMappingItemRule() {
		return getMappingItemAccess().getRule();
	}

	//MappingIdentifier:
	//	name=(IDENT | IDENT_DOT) (CARET vals+=(IDENT | NUMBER))*;
	public MappingIdentifierElements getMappingIdentifierAccess() {
		return (pMappingIdentifier != null) ? pMappingIdentifier : (pMappingIdentifier = new MappingIdentifierElements());
	}
	
	public ParserRule getMappingIdentifierRule() {
		return getMappingIdentifierAccess().getRule();
	}

	//OptionalFeature:
	//	name=Name LPAREN type=OPTION_TYPE (COMMA filters+=Filter)* RPAREN EQUALS option=FeatureValue SEMICOLON;
	public OptionalFeatureElements getOptionalFeatureAccess() {
		return (pOptionalFeature != null) ? pOptionalFeature : (pOptionalFeature = new OptionalFeatureElements());
	}
	
	public ParserRule getOptionalFeatureRule() {
		return getOptionalFeatureAccess().getRule();
	}

	//FeatureValue:
	//	(REST | IDENT_DOT | IDENT | NUMBER | WS | COLON | STRING | COMMA | MINUS | PLUS | LPAREN | RPAREN | LBRACE | RBRACE |
	//	QUESTI | NOT | BAND | BOR | HASH | AT | CARET | EQUALS | LESS_THAN | MORE_THAN | ESC_CHAR)+;
	public FeatureValueElements getFeatureValueAccess() {
		return (pFeatureValue != null) ? pFeatureValue : (pFeatureValue = new FeatureValueElements());
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}

	//Name:
	//	{Name} name=IDENT;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//Filter:
	//	{Filter} name=IDENT;
	public FilterElements getFilterAccess() {
		return (pFilter != null) ? pFilter : (pFilter = new FilterElements());
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}

	//enum STATEMEN_TYPE:
	//	QRY | CRUD | CALL;
	public STATEMEN_TYPEElements getSTATEMEN_TYPEAccess() {
		return (unknownRuleSTATEMEN_TYPE != null) ? unknownRuleSTATEMEN_TYPE : (unknownRuleSTATEMEN_TYPE = new STATEMEN_TYPEElements());
	}
	
	public EnumRule getSTATEMEN_TYPERule() {
		return getSTATEMEN_TYPEAccess().getRule();
	}

	//enum MAPPING_TYPE:
	//	OUT;
	public MAPPING_TYPEElements getMAPPING_TYPEAccess() {
		return (unknownRuleMAPPING_TYPE != null) ? unknownRuleMAPPING_TYPE : (unknownRuleMAPPING_TYPE = new MAPPING_TYPEElements());
	}
	
	public EnumRule getMAPPING_TYPERule() {
		return getMAPPING_TYPEAccess().getRule();
	}

	//enum OPTION_TYPE:
	//	OPT | LOPT | IOPT | SOPT | BOPT;
	public OPTION_TYPEElements getOPTION_TYPEAccess() {
		return (unknownRuleOPTION_TYPE != null) ? unknownRuleOPTION_TYPE : (unknownRuleOPTION_TYPE = new OPTION_TYPEElements());
	}
	
	public EnumRule getOPTION_TYPERule() {
		return getOPTION_TYPEAccess().getRule();
	}

	//terminal IDENT_DOT:
	//	IDENT ("." IDENT)+;
	public TerminalRule getIDENT_DOTRule() {
		return (tIDENT_DOT != null) ? tIDENT_DOT : (tIDENT_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT_DOT"));
	} 

	//terminal IDENT:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "_" | "=")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal NUMBER:
	//	"0".."9"+;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\n" | "\r")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal AND:
	//	"&" "&";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//	"|" "|";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal ESC_CHAR:
	//	"\\" (COLON | SEMICOLON | STRING | LBRACE | RBRACE | BOR | HASH | AT);
	public TerminalRule getESC_CHARRule() {
		return (tESC_CHAR != null) ? tESC_CHAR : (tESC_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESC_CHAR"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal STRING:
	//	"$";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal LBRACE:
	//	"{";
	public TerminalRule getLBRACERule() {
		return (tLBRACE != null) ? tLBRACE : (tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE"));
	} 

	//terminal RBRACE:
	//	"}";
	public TerminalRule getRBRACERule() {
		return (tRBRACE != null) ? tRBRACE : (tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE"));
	} 

	//terminal QUESTI:
	//	"?";
	public TerminalRule getQUESTIRule() {
		return (tQUESTI != null) ? tQUESTI : (tQUESTI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTI"));
	} 

	//terminal NOT:
	//	"!";
	public TerminalRule getNOTRule() {
		return (tNOT != null) ? tNOT : (tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT"));
	} 

	//terminal BAND:
	//	"&";
	public TerminalRule getBANDRule() {
		return (tBAND != null) ? tBAND : (tBAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BAND"));
	} 

	//terminal BOR:
	//	"|";
	public TerminalRule getBORRule() {
		return (tBOR != null) ? tBOR : (tBOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOR"));
	} 

	//terminal HASH:
	//	"#";
	public TerminalRule getHASHRule() {
		return (tHASH != null) ? tHASH : (tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HASH"));
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return (tAT != null) ? tAT : (tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT"));
	} 

	//terminal CARET:
	//	"^";
	public TerminalRule getCARETRule() {
		return (tCARET != null) ? tCARET : (tCARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CARET"));
	} 

	//terminal EQUALS:
	//	"=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal LESS_THAN:
	//	"<";
	public TerminalRule getLESS_THANRule() {
		return (tLESS_THAN != null) ? tLESS_THAN : (tLESS_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_THAN"));
	} 

	//terminal MORE_THAN:
	//	">";
	public TerminalRule getMORE_THANRule() {
		return (tMORE_THAN != null) ? tMORE_THAN : (tMORE_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MORE_THAN"));
	} 

	////     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN)
	//terminal REST:
	//	!SEMICOLON;
	public TerminalRule getRESTRule() {
		return (tREST != null) ? tREST : (tREST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REST"));
	} 
}
