grammar org.sqlproc.dsl.ProcessorDsl hidden(ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate processorDsl "http://www.sqlproc.org/dsl/ProcessorDsl"

Artifacts:
    WS* (features+=OptionalFeature WS*|statements+=MetaStatement WS*|mappings+=MappingRule WS*)+;

MetaStatement:
	name=IDENT LPAREN type=STATEMEN_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS statement=Sql SEMICOLON;

Sql: (sqls+=SqlFragment)+;

SqlFragment:
	value=SqlValue
    | AT col=Column
    | STRING cnst=Constant
    | COLON ident=Identifier
    | LBRACE meta=MetaSql RBRACE
    ;

SqlValue: //~(COLON | STRING | AT | LBRACE | SEMICOLON)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|COMMA|MINUS|PLUS|LPAREN|RPAREN|RBRACE|QUESTI|NOT|BAND|BOR|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|COMMA|MINUS|PLUS|LPAREN|RPAREN|RBRACE|QUESTI|NOT|BAND|BOR|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)*);


MetaSql:
    WS ifs+=IfSql (BOR ifs+=IfSql)*
    | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=EQUALS WS* ftype=IDENT ifs+=IfSql
    | type=HASH NUMBER ord=OrdSql
    ;

IfSql: (sqls+=IfSqlFragment)+;

IfSqlFragment:
	value=IfSqlValue
    | AT col=Column
    | STRING cnst=Constant
    | COLON ident=Identifier
    | LBRACE meta=IfMetaSql RBRACE
    ;

IfSqlValue: //~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|QUESTI|NOT|BAND|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|QUESTI|NOT|BAND|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)*);

IfMetaSql:
    WS ifs+=IfSql (BOR ifs+=IfSql)*
    | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
    ;

IfSqlCond:
    WS* bool1=IfSqlBool WS* (oper+=(AND|OR) WS* bool2+=IfSqlBool WS*)*;

IfSqlBool:
    (not?=NOT)? STRING cnst=Constant
    | (not?=NOT)? COLON ident=Identifier
    | (not?=NOT)? LPAREN cond=IfSqlCond RPAREN
    ;

OrdSql: (sqls+=OrdSql2)+;

OrdSql2:
    value=OrdSqlValue
    | STRING cnst=Constant
    | COLON ident=Identifier
    ;

OrdSqlValue: //~(COLON | STRING | RBRACE)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)*);

Column:
    name=(IDENT|IDENT_DOT|NUMBER)
    (=> CARET type=IDENT (=> CARET vals+=(IDENT|NUMBER))*)?;

Constant:
    (case=(PLUS|MINUS))? name=(IDENT|IDENT_DOT)
    (=> CARET type=IDENT (=> CARET vals+=(IDENT|NUMBER))*)?;

Identifier:
    (mode=(EQUALS|LESS_THAN|MORE_THAN))? (case=(PLUS|MINUS))? name=(IDENT|IDENT_DOT|NUMBER)
    (=> CARET type=IDENT (=> CARET vals+=(IDENT|NUMBER))*)?;

MappingRule:
	name=IDENT LPAREN type=MAPPING_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS mapping=Mapping SEMICOLON;

Mapping:
	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;

MappingItem:
	col=(IDENT|NUMBER) (STRING (type=IDENT)? (STRING attr=MappingIdentifier)?)?;

MappingIdentifier:
    name=(IDENT|IDENT_DOT) (CARET vals+=(IDENT|NUMBER))*;

OptionalFeature:
	name=IDENT LPAREN type=OPTION_TYPE (COMMA filters+=IDENT)* RPAREN EQUALS option=FeatureValue SEMICOLON;

FeatureValue:
  (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|ESC_CHAR)+;


enum STATEMEN_TYPE: QRY|CRUD|CALL;
enum MAPPING_TYPE: OUT;
enum OPTION_TYPE: OPT|LOPT|IOPT|SOPT|BOPT;
		
terminal IDENT_DOT: IDENT ('.' IDENT)+;
terminal IDENT: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'=')*;
terminal NUMBER: ('0'..'9')+;

terminal ML_COMMENT : '/*' -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;
terminal WS:    (' '|'\t'|'\n'|'\r')+ ;
terminal AND:   '&' '&' ;
terminal OR:    '|' '|' ;
terminal ESC_CHAR:  '\\' (COLON | SEMICOLON | STRING | LBRACE | RBRACE | BOR | HASH | AT);

terminal COLON:    ':' ;
terminal SEMICOLON:';' ;
terminal STRING:   '$' ;
terminal COMMA:    ',' ;
terminal MINUS:    '-' ;
terminal PLUS:     '+' ;
terminal LPAREN:   '(' ;
terminal RPAREN:   ')' ;
terminal LBRACE:   '{' ;
terminal RBRACE:   '}' ;
terminal QUESTI:   '?' ;
terminal NOT:      '!' ;
terminal BAND:     '&' ;
terminal BOR:      '|' ;
terminal HASH:     '#' ;
terminal AT:	   '@';
terminal CARET:    '^';
terminal EQUALS:   '=' ;
terminal LESS_THAN:'<' ;
terminal MORE_THAN:'>' ;

terminal REST: !(SEMICOLON);

//     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN)