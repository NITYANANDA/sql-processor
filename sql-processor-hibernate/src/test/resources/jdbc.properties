SET_LIKE_STRING=like
SET_WILDCARD_CHARACTER=%
SET_SURROUND_QUERY_LIKE=true
SET_SURROUND_QUERY_MIN_LEN=2
SET_ID=id
HSQLDB_SET_SEQ1=call NEXT VALUE FOR SQLPROC_SEQUENCE
ORACLE_SET_SEQ1=select SQLPROC_SEQUENCE.nextval from dual
HSQLDB_SET_SEL1=call identity()
ORACLE_SET_SEL1=select last_insert_id()

QRY_ANSI_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  order by p.ID
OUT_ANSI_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_ANSI_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @first, p.NAME_LAST @last, p.SSN_NUMBER @ssn, p.SSN_COUNTRY @country, \
  p.BIRTHDATE @birthDate, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, \
  p.LASTUPDATED @lastUpdated, p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  order by p.ID
OUT_ANSI_BASIC_2=first$$name.first last$$name.last ssn$$ssn.number \
  country$$ssn.country birthDate$date createdDate$date \
  lastUpdated$date

QRY_ANSI_BASIC_3= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, \
  p.LASTUPDATED @lastUpdated^date, p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  order by p.ID
  

QRY_SQL_EXT_BASIC= \
  select p.ID, $-name.first first, :+name.last last \
  from PERSON p \
  where 1=1 \
  order by id
HSQLDB_QRY_SQL_EXT_BASIC= \
  select p.ID, $-name.first first, cast(:+name.last as varchar(100)) last \
  from PERSON p \
  where 1=1 \
  order by id
OUT_SQL_EXT_BASIC=id$Long$id first$string$name.first last$string$name.last

QRY_SQL_EXT_BASIC_2= \
  select p.ID @id, $-name.first @name.first^string, :+name.last @name.last \
  from PERSON p \
  where 1=1 \
  order by id
HSQLDB_QRY_SQL_EXT_BASIC_2= \
  select p.ID @id, $-name.first @name.first^string, cast(:+name.last as varchar(100)) @name.last \
  from PERSON p \
  where 1=1 \
  order by id


QRY_BASIC= \
  select ID, NAME_FIRST first, NAME_LAST last, SSN_NUMBER ssn, SSN_COUNTRY country, \
  BIRTHDATE, SEX, CREATEDDATE, CREATEDBY, LASTUPDATED, LASTUPDATEDBY, VERSION \
  from PERSON p \
  {#1 order by ID}
OUT_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  {#1 order by id}


QRY_FORM_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {& p.NAME_FIRST = :name.first | p.NAME_LAST = :name.last | p.SSN_NUMBER = :ssn.number} \
  {& p.SSN_COUNTRY = :ssn.country | p.BIRTHDATE = :birthDate | p.SEX = :sex.value} \
  {& p.CREATEDDATE = :createdDate | p.LASTUPDATEDBY = :lastUpdatedBy | p.LASTUPDATED = :lastUpdated} \
  {& p.CREATEDBY = :createdBy} \
  {& p.VERSION = :version} \
  {#1 order by id}
OUT_FORM_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_FORM_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p {= where \
   {& p.id = :id} \
   {& p.NAME_FIRST = :name.first | p.NAME_LAST = :name.last | p.SSN_NUMBER = :ssn.number} \
   {& p.SSN_COUNTRY = :ssn.country | p.BIRTHDATE = :birthDate | p.SEX = :sex.value} \
   {& p.CREATEDDATE = :createdDate | p.LASTUPDATEDBY = :lastUpdatedBy | p.LASTUPDATED = :lastUpdated} \
   {& p.CREATEDBY = :createdBy} \
   {& p.VERSION = :version} \
  } \
  {#1 order by id}


QRY_FORM_OR_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {| p.NAME_FIRST = :name.first | p.NAME_LAST = :name.last | p.SSN_NUMBER = :ssn.number} \
  {| p.SSN_COUNTRY = :ssn.country | p.BIRTHDATE = :birthDate | p.SEX = :sex.value} \
  {| p.CREATEDDATE = :createdDate | p.LASTUPDATEDBY = :lastUpdatedBy | p.LASTUPDATED = :lastUpdated} \
  {#1 order by id}
OUT_FORM_OR_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_FORM_OR_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p {= where \
   {& p.id = :id} \
   {| p.NAME_FIRST = :name.first | p.NAME_LAST = :name.last | p.SSN_NUMBER = :ssn.number} \
   {| p.SSN_COUNTRY = :ssn.country | p.BIRTHDATE = :birthDate | p.SEX = :sex.value} \
   {| p.CREATEDDATE = :createdDate | p.LASTUPDATEDBY = :lastUpdatedBy | p.LASTUPDATED = :lastUpdated} \
  } \
  {#1 order by id}


QRY_CONSTANT_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id = $id} \
  {& p.NAME_FIRST = $name.first | p.NAME_LAST = $name.last | p.SSN_NUMBER = $ssn.number} \
  {& p.SSN_COUNTRY = $ssn.country | p.BIRTHDATE = $birthDate | p.SEX = $sex.value} \
  {& p.CREATEDDATE = $createdDate | p.LASTUPDATEDBY = $lastUpdatedBy | p.LASTUPDATED = $lastUpdated} \
  {& p.CREATEDBY = $createdBy} \
  {& p.VERSION = $version} \
  {#1 order by id}
OUT_CONSTANT_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_CONSTANT_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p {= where \
   {& p.id = $id} \
   {& p.NAME_FIRST = $name.first | p.NAME_LAST = $name.last | p.SSN_NUMBER = $ssn.number} \
   {& p.SSN_COUNTRY = $ssn.country | p.BIRTHDATE = $birthDate | p.SEX = $sex.value} \
   {& p.CREATEDDATE = $createdDate | p.LASTUPDATEDBY = $lastUpdatedBy | p.LASTUPDATED = $lastUpdated} \
   {& p.CREATEDBY = $createdBy} \
   {& p.VERSION = $version} \
  } \
  {#1 order by id}


QRY_CONSTANT_OR_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id = $id} \
  {| p.NAME_FIRST = $name.first | p.NAME_LAST = $name.last | p.SSN_NUMBER = $ssn.number} \
  {| p.SSN_COUNTRY = $ssn.country | p.BIRTHDATE = $birthDate | p.SEX = $sex.value} \
  {| p.CREATEDDATE = $createdDate | p.LASTUPDATEDBY = $lastUpdatedBy | p.LASTUPDATED = $lastUpdated} \
  {#1 order by id}
OUT_CONSTANT_OR_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_CONSTANT_OR_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p {= where \
   {& p.id = $id} \
   {| p.NAME_FIRST = $name.first | p.NAME_LAST = $name.last | p.SSN_NUMBER = $ssn.number} \
   {| p.SSN_COUNTRY = $ssn.country | p.BIRTHDATE = $birthDate | p.SEX = $sex.value} \
   {| p.CREATEDDATE = $createdDate | p.LASTUPDATEDBY = $lastUpdatedBy | p.LASTUPDATED = $lastUpdated} \
  } \
  {#1 order by id}

  
QRY_CONSTANT_IN_ORDER_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id in $idSet} \
  {#1 order by id} \
  {#2 order by NAME_FIRST} \
  {#3 order by NAME_LAST}
OUT_CONSTANT_IN_ORDER_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_CONSTANT_IN_ORDER_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p {= where \
   {& p.id in $idSet} \
  } \
  {#1 order by id} \
  {#2 order by NAME_FIRST} \
  {#3 order by NAME_LAST}

  
QRY_INDENT_AND_CONSTANT_OUT_OF_META_SQL_BASIC= \
  select p.ID, $name.first first, :name.last last \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {#1 order by id}
HSQLDB_QRY_INDENT_AND_CONSTANT_OUT_OF_META_SQL_BASIC= \
  select p.ID, $name.first first, cast(:name.last as varchar(100)) last \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {#1 order by id}
OUT_INDENT_AND_CONSTANT_OUT_OF_META_SQL_BASIC=id$Long$id first$string$name.first last$string$name.last

QRY_INDENT_AND_CONSTANT_OUT_OF_META_SQL_BASIC_2= \
  select p.ID @id, $name.first @name.first^string, :name.last @name.last \
  from PERSON p {= where \
   {& p.id = :id} \
  } \
  {#1 order by id}
HSQLDB_QRY_INDENT_AND_CONSTANT_OUT_OF_META_SQL_BASIC_2= \
  select p.ID @id, $name.first @name.first^string, cast(:name.last as varchar(100)) @name.last \
  from PERSON p {= where \
   {& p.id = :id} \
  } \
  {#1 order by id}
  
  
QRY_SQL_IN_BRACES_BASIC= \
  select p.ID {, $name.first first, p.SSN_NUMBER ssn |, '' first, p.SSN_NUMBER ssn} {, :+name.last last |, '' last} {, p.BIRTHDATE} \
  from PERSON p \
  order by id
HSQLDB_QRY_SQL_IN_BRACES_BASIC= \
  select p.ID {, $name.first first, p.SSN_NUMBER ssn |, '' first, p.SSN_NUMBER ssn} {, cast(:+name.last as varchar(100)) last |, '' last} {, p.BIRTHDATE} \
  from PERSON p \
  order by id
OUT_SQL_IN_BRACES_BASIC=id$Long$id first$string$name.first last$string$name.last birthDate$date$birthDate \
  ssn$string$ssn.number

QRY_SQL_IN_BRACES_BASIC_2= \
  select p.ID @id {, $name.first @first, p.SSN_NUMBER @ssn |, '' @first, p.SSN_NUMBER @ssn} {, :+name.last @last |, '' @last} {, p.BIRTHDATE @birthDate} \
  from PERSON p \
  order by id
HSQLDB_QRY_SQL_IN_BRACES_BASIC_2= \
  select p.ID @id {, $name.first @first, p.SSN_NUMBER @ssn |, '' @first, p.SSN_NUMBER @ssn} {, cast(:+name.last as varchar(100)) @last |, '' @last} {, p.BIRTHDATE @birthDate} \
  from PERSON p \
  order by id
OUT_SQL_IN_BRACES_BASIC_2=first$string$name.first last$$name.last birthDate$date ssn$$ssn.number
  
  
QRY_SQL_IN_BRACES_ADV= \
  select p.ID @id { {, $name.first @first, p.SSN_NUMBER @ssn} {, :+name.last @last}, :lastUpdatedBy @lastUpdatedBy} \
  from PERSON p \
  order by id
HSQLDB_QRY_SQL_IN_BRACES_ADV= \
  select p.ID @id { {, $name.first @first, p.SSN_NUMBER @ssn} {, cast(:+name.last as varchar(100)) @last}, cast(:lastUpdatedBy as varchar(50)) @lastUpdatedBy} \
  from PERSON p \
  order by id
OUT_SQL_IN_BRACES_ADV=first$string$name.first last$$name.last ssn$$ssn.number
  
QRY_SQL_IN_BRACES_ADV_2= \
  select p.ID @id { {, $name.first @name.first^string, p.SSN_NUMBER @ssn.number} {, :+name.last @name.last}, :lastUpdatedBy @lastUpdatedBy} \
  from PERSON p \
  order by id
HSQLDB_QRY_SQL_IN_BRACES_ADV_2= \
  select p.ID @id { {, $name.first @name.first^string, p.SSN_NUMBER @ssn.number} {, cast(:+name.last as varchar(100)) @name.last}, cast(:lastUpdatedBy as varchar(50)) @lastUpdatedBy} \
  from PERSON p \
  order by id

  
QRY_CONDITIONAL_JOIN_ADV= \
  select m.id, m.TITLE, e.ROLE \
  {? :fname | , p.NAME_FIRST first, p.NAME_LAST last | , '' first, '' last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname | left join PERSON p on e.PERSON = p.ID} \
  where 1=1 \
  {& m.id in $idSet} \
  {& UPPER(p.NAME_FIRST) = :+fname} \
  order by id
OUT_CONDITIONAL_JOIN_ADV=id$Long$id first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role

QRY_CONDITIONAL_JOIN_ADV_2= \
  select m.id @id, m.TITLE @mediaTitle, e.ROLE @engagement.role \
  {? :fname | , p.NAME_FIRST @engagement.first, p.NAME_LAST @engagement.last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname | left join PERSON p on e.PERSON = p.ID} \
  {= where \
   {& m.id in $idSet} \
   {& UPPER(p.NAME_FIRST) = :+fname} \
  } \
  order by id

  
QRY_CONDITIONAL_JOIN_2_LEVELS_ADV= \
  select l.id, l.NAME, pm.location \
  {? :media | \
    {? :fname | , m.TITLE, e.ROLE, p.NAME_FIRST first, p.NAME_LAST last \
              | , m.TITLE, e.ROLE, '' first, '' last \
    } \
            |  , '' title, '' role, '' first, '' last \
  } \
  from LIBRARY l left join PHYSICALMEDIA pm on pm.LIBRARY = l.id \
  {? :media | \
    {? :fname | left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.id \
                left join MEDIA m on mpm.MEDIA = m.id \
                left join ENGAGEMENT e on e.MEDIA = m.ID \
                left join PERSON p on e.PERSON = p.ID | \
                left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.id \
                left join MEDIA m on mpm.MEDIA = m.id \
                left join ENGAGEMENT e on e.MEDIA = m.ID \
    } \
  } \
  where 1=1 \
  {& UPPER(m.TITLE) = :+media} \
  {? :media | {& UPPER(p.NAME_FIRST) = :+fname}} \
  order by l.id, pm.location
OUT_CONDITIONAL_JOIN_2_LEVELS_ADV=id$Long$id location$string$location first$string$media.engagement.first \
  last$string$media.engagement.last title$string$media.mediaTitle role$string$media.engagement.role name$string$name
  
QRY_CONDITIONAL_JOIN_2_LEVELS_ADV_2= \
  select l.id @id, l.NAME @name, pm.location @location \
  {? :media | \
    {? :fname | , m.TITLE @title, e.ROLE @role, p.NAME_FIRST @first, p.NAME_LAST @last \
              | , m.TITLE @title, e.ROLE @role \
    } \
  } \
  from LIBRARY l left join PHYSICALMEDIA pm on pm.LIBRARY = l.id \
  {? :media | \
    {? :fname | left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.id \
                left join MEDIA m on mpm.MEDIA = m.id \
                left join ENGAGEMENT e on e.MEDIA = m.ID \
                left join PERSON p on e.PERSON = p.ID | \
                left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.id \
                left join MEDIA m on mpm.MEDIA = m.id \
                left join ENGAGEMENT e on e.MEDIA = m.ID \
    } \
  } \
  {= where \
   {& UPPER(m.TITLE) = :+media} \
   {? :media | {& UPPER(p.NAME_FIRST) = :+fname}} \
  } \
  order by l.id, pm.location
OUT_CONDITIONAL_JOIN_2_LEVELS_ADV_2=first$string$media.engagement.first \
  last$string$media.engagement.last title$string$media.mediaTitle role$string$media.engagement.role
  
    
QRY_CONDITIONAL_WHERE_ADV= \
  select m.id, m.TITLE, e.ROLE \
  {? :fname | , p.NAME_FIRST first, p.NAME_LAST last | , '' first, '' last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname | left join PERSON p on e.PERSON = p.ID} \
  where 1=1 \
  {? :fname | {& UPPER(p.NAME_FIRST) = :+fname}} \
  order by id
OUT_CONDITIONAL_WHERE_ADV=id$Long$id first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role

QRY_CONDITIONAL_WHERE_ADV_2= \
  select m.id @id, m.TITLE @title, e.ROLE @role \
  {? :fname | , p.NAME_FIRST @first, p.NAME_LAST @last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname | left join PERSON p on e.PERSON = p.ID} \
  {= where \
   {? :fname | {& UPPER(p.NAME_FIRST) = :+fname}} \
  } \
  order by id
OUT_CONDITIONAL_WHERE_ADV_2=first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role
  
    
QRY_CONDITIONAL_WHERE_AND_BRACES_ADV= \
  select m.id, m.TITLE, e.ROLE \
  {? :fname || :lname | , p.NAME_FIRST first, p.NAME_LAST last | , '' first, '' last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname || :lname | left join PERSON p on e.PERSON = p.ID} \
  where \
  {? :lname | { UPPER(p.NAME_LAST) = :+lname} | 1=1} \
  {? :lname && :fname | { AND} | { AND}} \
  {? :fname | { UPPER(p.NAME_FIRST) = :+fname} | 1=1} \
  order by id
OUT_CONDITIONAL_WHERE_AND_BRACES_ADV=id$Long$id first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role

QRY_CONDITIONAL_WHERE_AND_BRACES_ADV_2= \
  select m.id @id, m.TITLE @title, e.ROLE @role \
  {? :fname || :lname | , p.NAME_FIRST @first, p.NAME_LAST @last} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? :fname || :lname | left join PERSON p on e.PERSON = p.ID} \
  {= where \
   {? :lname | { AND UPPER(p.NAME_LAST) = :+lname}} \
   {? :fname | { AND UPPER(p.NAME_FIRST) = :+fname}} \
  } \
  order by id
OUT_CONDITIONAL_WHERE_AND_BRACES_ADV_2=first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role


QRY_CONDITIONAL_WHERE_AND_BRACES_MORE_ADV= \
  select m.id, m.TITLE, e.ROLE \
  {? (:fname && :lname) || :ssn | , p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn | , '' first, '' last, '' ssn} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? (:fname && :lname) || :ssn | left join PERSON p on e.PERSON = p.ID} \
  where 1=1 \
  {? :lname && :fname | AND UPPER(p.NAME_LAST) = :+lname AND UPPER(p.NAME_FIRST) = :+fname} \
  {? :ssn | {& p.SSN_NUMBER = :ssn} } \
  order by id
OUT_CONDITIONAL_WHERE_AND_BRACES_MORE_ADV=id$Long$id first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role ssn$string$engagement.ssn

QRY_CONDITIONAL_WHERE_AND_BRACES_MORE_ADV_2= \
  select m.id @id, m.TITLE @title, e.ROLE @role \
  {? (:fname && :lname) || :ssn | , p.NAME_FIRST @first, p.NAME_LAST @last, p.SSN_NUMBER @ssn} \
  from MEDIA m left join ENGAGEMENT e on e.MEDIA = m.ID \
  {? (:fname && :lname) || :ssn | left join PERSON p on e.PERSON = p.ID} \
  {= where \
   {? :lname && :fname | AND UPPER(p.NAME_LAST) = :+lname AND UPPER(p.NAME_FIRST) = :+fname} \
   {? :ssn | {& p.SSN_NUMBER = :ssn} } \
  } \
  order by id
OUT_CONDITIONAL_WHERE_AND_BRACES_MORE_ADV_2=first$string$engagement.first last$string$engagement.last \
  title$string$mediaTitle role$string$engagement.role ssn$string$engagement.ssn

  
QRY_LIKE_BASIC= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {& UPPER(p.NAME_FIRST) like :+name.first} \
  {? :name.last | and UPPER(p.NAME_LAST) like :+name.last} \
  {? :name.last | and (UPPER(p.NAME_FIRST) like :+name.last or UPPER(p.NAME_LAST) like :+name.last)} \
  {#1 order by id}
OUT_LIKE_BASIC=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version

QRY_LIKE_BASIC_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  where 1=1 \
  {& p.id = :id} \
  {& UPPER(p.NAME_FIRST) like :+name.first} \
  {? :name.last | and UPPER(p.NAME_LAST) like :+name.last} \
  {? :name.last | and (UPPER(p.NAME_FIRST) like :+name.last or UPPER(p.NAME_LAST) like :+name.last)} \
  {#1 order by id}
 
 
QRY_ORDER= \
  select p.ID, p.NAME_FIRST first, p.NAME_LAST last, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, \
  p.BIRTHDATE, p.SEX, p.CREATEDDATE, p.CREATEDBY, p.LASTUPDATED, p.LASTUPDATEDBY, p.VERSION \
  from PERSON p \
  {#1 order by id} \
  {#2 first} \
  {#3 last} \
  {#4 ssn} \
  {#5 country}
OUT_ORDER=id$Long$id first$string$name.first last$string$name.last ssn$string$ssn.number \
  country$estring$ssn.country birthDate$date$birthDate sex$estring$sex createdDate$date$createdDate \
  createdBy$string$createdBy lastUpdated$date$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  version$Long$version


QRY_ENUM= \
  select p.ID, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, p.SEX, p.CLOTHES_SIZE clothesSize \
  from PERSON p \
  where 1=1 \
  {& p.SEX = :sex^estring} \
  {& p.SSN_COUNTRY = $ssn.country^estring} \
  {& p.CLOTHES_SIZE = :clothesSize^eint} \
  {#1 order by id}
OUT_ENUM=id$Long ssn$string$ssn.number country$estring$ssn.country sex$estring \
clothesSize$eint

QRY_ENUM_2= \
  select p.ID @id, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, p.SEX @sex, p.CLOTHES_SIZE @clothesSize \
  from PERSON p \
  where 1=1 \
  {& p.SEX = :sex} \
  {& p.SSN_COUNTRY = $ssn.country} \
  {& p.CLOTHES_SIZE = :clothesSize} \
  {#1 order by id}


QRY_ENUM_IN= \
  select p.ID, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, p.SEX, p.CLOTHES_SIZE clothesSize \
  from PERSON p \
  where 1=1 \
  {& p.SEX in :sexs^estring} \
  {& p.SSN_COUNTRY in $ssn.countries^estring} \
  {& p.CLOTHES_SIZE in :clothesSizes^eint} \
  {#1 order by id}
OUT_ENUM_IN=id$Long ssn$string$ssn.number country$estring$ssn.country sex$estring \
clothesSize$eint

QRY_ENUM_IN_2= \
  select p.ID @id, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, p.SEX @sex, p.CLOTHES_SIZE @clothesSize \
  from PERSON p \
  where 1=1 \
  {& p.SEX in :sexs} \
  {& p.SSN_COUNTRY in $ssn.countries} \
  {& p.CLOTHES_SIZE in :clothesSizes} \
  {#1 order by id}


QRY_ENUM_CONDITION= \
  select p.ID, p.SSN_NUMBER ssn, p.SSN_COUNTRY country, p.SEX, p.CLOTHES_SIZE clothesSize \
  from PERSON p \
  where 1=1 \
  {? :sex^estring^MALE | and p.SEX = 'M'} \
  {? $ssn.country^estring^US | and p.SSN_COUNTRY = 'US'} \
  {? :clothesSize^eint^MIDDLE | and p.CLOTHES_SIZE = 1} \
  {#1 order by id}
OUT_ENUM_CONDITION=id$Long ssn$string$ssn.number country$estring$ssn.country sex$estring \
clothesSize$eint

QRY_ENUM_CONDITION_2= \
  select p.ID @id, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, p.SEX @sex, p.CLOTHES_SIZE @clothesSize \
  from PERSON p \
  where 1=1 \
  {? :sex^estring^MALE | and p.SEX = 'M'} \
  {? $ssn.country^estring^US | and p.SSN_COUNTRY = 'US'} \
  {? :clothesSize^eint^MIDDLE | and p.CLOTHES_SIZE = 1} \
  {#1 order by id}


QRY_SIMPLE_ESCAPED= \
  select p.ID @id, p.NAME_LAST @name.last, \
  '\\:\\$\\@}|' @name.first^string \
  from PERSON p \
  order by id
  
QRY_IN_META_ESCAPED= \
  select p.ID @id, \
  { $-name.last @name.last^string, '\\:\\$\\@\\}\\|' @name.first^string } \
  from PERSON p \
  order by id
  

QRY_COLLECTIONS_UNDEFINED= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.LASTUPDATEDBY @lastUpdatedBy \
  from PERSON p \
  where 1=1 \
  {& p.ID in :idSet} \
  {& p.LASTUPDATEDBY in :updatedBySet} \
  {& p.NAME_FIRST in :names.firstList | p.NAME_LAST in :names.lastList} \
  {#1 order by id}
  
QRY_COLLECTIONS_STANDARD= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.LASTUPDATEDBY @lastUpdatedBy \
  from PERSON p \
  where 1=1 \
  {& p.ID in :idSet^Long} \
  {& p.LASTUPDATEDBY in :updatedBySet^String} \
  {& p.NAME_FIRST in :names.firstList^String | p.NAME_LAST in :names.lastList^String} \
  {#1 order by id}


QRY_PARAMETERS_MORE= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  where 1=1 \
  {& p.id = :id^long^null} \
  {& p.NAME_FIRST = :name.first^string^null | p.NAME_LAST = :name.last^string^null | p.SSN_NUMBER = :ssn.number^string^null} \
  {& p.SSN_COUNTRY = :ssn.country^estring^null | p.BIRTHDATE = :birthDate^date^null | p.SEX = :sex^estring^null} \
  {& p.CREATEDDATE = :createdDate^datetime^null | p.LASTUPDATEDBY = :lastUpdatedBy^string^null | p.LASTUPDATED = :lastUpdated^datetime^null} \
  {& p.CREATEDBY = :createdBy^string^null} \
  {& p.VERSION = :version^long^null} \
  {#1 order by id}
  
QRY_PARAMETERS_TOP= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  where p.id = :id^long^any \
  {? :createdBy | AND p.CREATEDBY=:createdBy | AND p.CREATEDBY is null } \
  {#1 order by id}
  

QRY_CONDITIONS_MORE= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate, p.CREATEDBY @createdBy, p.LASTUPDATED @lastUpdated^date, \
  p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  where 1=1 \
  {? :id^long^null | AND p.ID is null | AND p.ID = :id} \
  {? :version^long^1 | AND (p.VERSION = 1 OR p.VERSION is null)} \
  {? $lastUpdatedBy^string^pes | AND p.LASTUPDATEDBY = 'dbunit' | AND p.LASTUPDATEDBY like '\\%'} \
  {#1 order by id}
  
QRY_EXC_1= \
  select p.ID @id, p.NAME_FIRST @name.first \
  from PERSON p \
  {= where \
   {& p.id = :id} \
   {& p.NAME_FIRST = :name.first} \
   {& p.SEX = $sex} \
   {& p.NAME_LAST = $name.last} \
  }
  
 
QRY_STANDARD_TYPES= \
  select t.t_int n_int, t.t_int, t.t_long n_long, t.t_long, t.t_byte n_byte, t.t_byte, \
  t.t_short n_short, t.t_short, t.t_float n_float, t.t_float, t.t_double n_double, t.t_double, \
  t.t_char n_char, t.t_char, t.t_string, \
  t.t_time, t.t_date, t.t_datetime, t.t_timestamp, \
  t.t_boolean n_boolean, t.t_boolean, \
  t.t_big_integer, t.t_big_decimal, \
  t.a_byte an_byte, t.a_byte at_byte \
  from TYPES t \
  where id=1
OUT_STANDARD_TYPES=n_int$int t_int$int \
  n_long$long t_long$long \
  n_byte$byte t_byte$byte \
  n_short$short t_short$short \
  n_float$float t_float$float \
  n_double$double t_double$double \
  n_char$char t_char$char \
  t_string$string \
  t_time$time t_date$date t_datetime$datetime t_timestamp$timestamp \
  n_boolean$boolean t_boolean$boolean \
  t_big_integer$bigint t_big_decimal$bigdec \
  an_byte$bytes at_byte$bytes
 
QRY_STANDARD_TYPES_2= \
  select t_int @n_int^int, @t_int^int, t_long @n_long^long, @t_long^long, t_byte @n_byte^byte, @t_byte^byte, \
  t_short @n_short^short, @t_short^short, t_float @n_float^float, @t_float^float, t_double @n_double^double, @t_double^double, \
  t_char @n_char^char, @t_char^char, @t_string^string, \
  @t_time^time, @t_date^date, @t_datetime^datetime, @t_timestamp^timestamp, \
  t_boolean @n_boolean^boolean, @t_boolean^boolean, \
  @t_big_integer^bigint, @t_big_decimal^bigdec, \
  a_byte @an_byte^bytes, a_byte @at_byte^bytes \
  from TYPES \
  where id=1
  
  
QRY_UNDEFINED_TYPES= \
  select t.t_int n_int, t.t_int, t.t_long n_long, t.t_long, t.t_byte n_byte, t.t_byte, \
  t.t_short n_short, t.t_short, t.t_float n_float, t.t_float, t.t_double n_double, t.t_double, \
  t.t_char n_char, t.t_char, t.t_string, \
  t.t_time, t.t_date, t.t_datetime, t.t_timestamp, \
  t.t_boolean n_boolean, t.t_boolean, \
  t.t_big_integer, t.t_big_decimal, \
  t.a_byte an_byte, t.a_byte at_byte, t.a_text, \
  t.a_blob, t.a_clob \
  from TYPES t \
  where id=1
OUT_UNDEFINED_TYPES=n_int t_int \
  n_long t_long \
  n_byte t_byte \
  n_short t_short \
  n_float t_float \
  n_double t_double \
  n_char t_char \
  t_string \
  t_time t_date t_datetime t_timestamp \
  n_boolean t_boolean \
  t_big_integer t_big_decimal \
  an_byte at_byte a_text$text \
  a_blob a_clob

QRY_UNDEFINED_TYPES_2= \
  select t_int @n_int, @t_int, t_long @n_long, @t_long, t_byte @n_byte, @t_byte, \
  t_short @n_short, @t_short, t_float @n_float, @t_float, t_double @n_double, @t_double, \
  t_char @n_char, @t_char, @t_string, \
  @t_time, @t_date, @t_datetime, @t_timestamp, \
  t_boolean @n_boolean, @t_boolean, \
  @t_big_integer, @t_big_decimal, \
  a_byte @an_byte, a_byte @at_byte, @a_text^text, \
  @a_blob, @a_clob \
  from TYPES t \
  where id=1
 
 
QRY_UNDEFINED_PARAMETERS= \
  select t.t_int n_int, t.t_int, t.t_long n_long, t.t_long, t.t_byte n_byte, t.t_byte, \
  t.t_short n_short, t.t_short, t.t_float n_float, t.t_float, t.t_double n_double, t.t_double, \
  t.t_char n_char, t.t_char, t.t_string, \
  t.t_time, t.t_date, t.t_datetime, t.t_timestamp, \
  t.t_boolean n_boolean, t.t_boolean, \
  t.t_big_integer, t.t_big_decimal, \
  t.a_byte an_byte, t.a_byte at_byte, t.a_text, \
  t.a_blob, t.a_clob \
  from TYPES t \
  where 1=1 \
  {& t_int = :t_int} \
  {& t_long = :t_long} \
  {& t_byte = :t_byte} \
  {& a_byte = :an_byte} \
  {& t_short = :t_short} \
  {& t_float = :t_float} \
  {& t_double = :t_double} \
  {& t_char = :t_char} \
  {& t_string = :t_string} \
  {& t_boolean = :t_boolean} \
  {& t_date = :t_date} \
  {& t_time = :t_time} \
  {& t_datetime = :t_datetime} \
  {& t_timestamp = :t_timestamp}
OUT_UNDEFINED_PARAMETERS=n_int$int t_int$int \
  n_long$long t_long$long \
  n_byte$byte t_byte$byte \
  n_short$short t_short$short \
  n_float$float t_float$float \
  n_double$double t_double$double \
  n_char$char t_char$char \
  t_string$string \
  t_time$time t_date$date t_datetime$datetime t_timestamp$timestamp \
  n_boolean$boolean t_boolean$boolean \
  t_big_integer$bigint t_big_decimal$bigdec \
  an_byte$bytes at_byte$bytes a_text$text \
  a_blob$blob a_clob$clob

 
QRY_STANDARD_PARAMETERS= \
  select t.t_int n_int, t.t_int, t.t_long n_long, t.t_long, t.t_byte n_byte, t.t_byte, \
  t.t_short n_short, t.t_short, t.t_float n_float, t.t_float, t.t_double n_double, t.t_double, \
  t.t_char n_char, t.t_char, t.t_string, \
  t.t_time, t.t_date, t.t_datetime, t.t_timestamp, \
  t.t_boolean n_boolean, t.t_boolean, \
  t.t_big_integer, t.t_big_decimal, \
  t.a_byte an_byte, t.a_byte at_byte, t.a_text, \
  t.a_blob, t.a_clob \
  from TYPES t \
  where 1=1 \
  {& t_int = :t_int^int} \
  {& t_long = :t_long^long} \
  {& t_byte = :t_byte^byte} \
  {& a_byte = :an_byte^bytes} \
  {& t_short = :t_short^short} \
  {& t_float = :t_float^float} \
  {& t_double = :t_double^double} \
  {& t_char = :t_char^char} \
  {& t_string = :t_string^string} \
  {& t_boolean = :t_boolean^boolean} \
  {& t_date = :t_date^date} \
  {& t_time = :t_time^time} \
  {& t_datetime = :t_datetime^datetime} \
  {& t_timestamp = :t_timestamp^timestamp}
OUT_STANDARD_PARAMETERS=#OUT_UNDEFINED_PARAMETERS

 
QRY_FROM_TO_PARAMETERS= \
  select t.t_int n_int, t.t_int, t.t_long n_long, t.t_long, t.t_byte n_byte, t.t_byte, \
  t.t_short n_short, t.t_short, t.t_float n_float, t.t_float, t.t_double n_double, t.t_double, \
  t.t_char n_char, t.t_char, t.t_string, \
  t.t_time, t.t_date, t.t_datetime, t.t_timestamp, \
  t.t_boolean n_boolean, t.t_boolean, \
  t.t_big_integer, t.t_big_decimal, \
  t.a_byte an_byte, t.a_byte at_byte, t.a_text, \
  t.a_blob, t.a_clob \
  from TYPES t \
  where 1=1 \
  {& t_date >= :t_datetime^fromdate} \
  {& t_date < :t_timestamp^todate}
OUT_FROM_TO_PARAMETERS=#OUT_UNDEFINED_PARAMETERS

 
QRY_CUSTOM_TYPE_IN_OUT= \
  select c.ID @id, c.ADRESS @address, c.PHONE_NUMBER @phone^phone \
  from CONTACT c \
  {= where c.ID = :id} \
  {= where c.PHONE_NUMBER = :phone^phone} \
  {#1 order by c.ID}
  
CRUD_CUSTOM_TYPE_INSERT= \
  insert into CONTACT (ID, ADRESS, CITY, ZIP, STATE, UUID,  CREATEDDATE, CREATEDBY, VERSION, PHONE_NUMBER) \
  {= values (:id^long^seq=SEQ1, :address, :city, :zip, :state, :uuid, :createdDate^stamp, :createdBy, :version, :phone^phone) }
  
CRUD_CUSTOM_TYPE_INSERT_2= \
  insert into CONTACT (ADRESS, CITY, ZIP, STATE, UUID,  CREATEDDATE, CREATEDBY, VERSION, PHONE_NUMBER) \
  {= values (:id^long^idsel, :address, :city, :zip, :state, :uuid, :createdDate^stamp, :createdBy, :version, :phone^phone) }
  
CRUD_CUSTOM_TYPE_GET= \
  select c.ID @id, c.ADRESS @address, c.PHONE_NUMBER @phone^phone \
  from CONTACT c \
  {= where c.ID = :id} \
  {= where c.PHONE_NUMBER = :phone^phone}


QRY_BASIC_LEFT_JOIN_NO_ID= \
  select pm.LOCATION @location, pm.STATUS @status, pm.UUID @uuid \
  from PHYSICALMEDIA pm \
  {#1 order by pm.ID}
  
QRY_BASIC_LEFT_JOIN_NO_ID_2= \
  select pm.LOCATION, pm.STATUS, pm.UUID \
  from PHYSICALMEDIA pm \
  {#1 order by pm.ID}
OUT_BASIC_LEFT_JOIN_NO_ID_2=location status uuid

QRY_BASIC_LEFT_JOIN= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @media.id^long^id, pm.LOCATION @media.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_2= \
  select l.NAME @name, l.ID @id^long^id, pm.LOCATION @media.location, pm.ID @media.id^long^id \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_2_LEFT_JOIN= \
  select l.NAME @name, l.ID @id^long^id, pm.LOCATION @media.location, pm.ID @media.id^long^id \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  {#1 order by l.ID, pm.ID, m.ID}

QRY_BASIC_2_LEFT_JOIN_2= \
  select l.NAME @name, l.ID @id^long^id, pm.LOCATION @media.location, pm.ID @media.id^long^id, \
  m.TITLE @media.media==movie.title, m.ID @media.media.id^long^id \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  {#1 order by l.ID, pm.ID, m.ID}

QRY_BASIC_2_LEFT_JOIN_3= \
  select pm.LOCATION @media.location, m.ID @media.media==movie.id^long^id, l.NAME @name, l.ID @id^long^id, \
  pm.ID @media.id^long^id, m.TITLE @media.media.title \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  {#1 order by l.ID, pm.ID, m.ID}

QRY_BASIC_2_LEFT_JOIN_4= \
  select pm.LOCATION @location, m.ID @mid, l.NAME @name, l.ID @lid, pm.ID @pid, m.TITLE @title \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  {#1 order by l.ID, pm.ID, m.ID}

OUT_BASIC_2_LEFT_JOIN_4=location$$media.location mid$$media.media==movie.id name lid$$id \
  pid$$media.id title$$media.media.title

QRY_BASIC_3_LEFT_JOIN= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @media.id^long^id, pm.LOCATION @media.location, \
  m.ID @media.media==movie.id^long^id, m.TITLE @media.media.title^string, \
  e.ID @media.media.engagements.id^long^id, e.ROLE @media.media.engagements.role, \
  p.ID @media.media.engagements.person.id^long^id, p.NAME_LAST @media.media.engagements.person.name.last, \
  p.SEX @media.media.engagements.person.sex, p.CLOTHES_SIZE @media.media.engagements.person.clothesSize \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA left join ENGAGEMENT e on e.MEDIA = m.ID \
  left join PERSON p on p.ID = e.PERSON \
  {#1 order by l.ID, pm.ID, m.ID, e.ID, p.ID}

QRY_BASIC_4_LEFT_JOIN= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @media.id^long^id, pm.LOCATION @media.location, \
  m.ID @media.media==movie.id^long^id, m.TITLE @media.media.title^string, \
  mc.ID @media.media.mediaCharacters.id^long^id, mc.NAME @media.media.mediaCharacters.name, \
  p.ID @media.media.mediaCharacters.playedBy.id^long^id, p.NAME_LAST @media.media.mediaCharacters.playedBy.name.last, \
  p.SEX @media.media.mediaCharacters.playedBy.sex, p.CLOTHES_SIZE @media.media.mediaCharacters.playedBy.clothesSize \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA left join EXISTSINMEDIA_MEDIACHARACTER emm on emm.EXISTSINMEDIA = m.ID \
  left join MEDIACHARACTER mc on mc.ID = emm.MEDIACHARACTER left join MEDIACHARACTER_PLAYEDBY mp on mp.MEDIACHARACTER = mc.ID \
  left join PERSON p on p.ID = mp.PLAYEDBY \
  {#1 order by l.ID, pm.ID, m.ID, mc.ID, p.ID}

QRY_BASIC_4_LEFT_JOIN_2= \
  select l.ID @id, l.NAME @name, pm.ID @media.id, pm.LOCATION @media.location, \
  m.ID @media.media==movie.id, m.TITLE @media.media.title^string, \
  mc.ID @media.media.mediaCharacters.id, mc.NAME @media.media.mediaCharacters.name, \
  p.ID @media.media.mediaCharacters.playedBy.id, p.NAME_LAST @media.media.mediaCharacters.playedBy.name.last, \
  p.SEX @media.media.mediaCharacters.playedBy.sex, p.CLOTHES_SIZE @media.media.mediaCharacters.playedBy.clothesSize \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA left join EXISTSINMEDIA_MEDIACHARACTER emm on emm.EXISTSINMEDIA = m.ID \
  left join MEDIACHARACTER mc on mc.ID = emm.MEDIACHARACTER left join MEDIACHARACTER_PLAYEDBY mp on mp.MEDIACHARACTER = mc.ID \
  left join PERSON p on p.ID = mp.PLAYEDBY \
  {#1 order by l.ID, pm.ID, m.ID, mc.ID, p.ID}

QRY_BASIC_LEFT_JOIN_LIST= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @mediaList.id^long^id, pm.LOCATION @mediaList.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_LIST_2= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @mediaList=alist.id^long^id, pm.LOCATION @mediaList.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_LIST_3= \
  select l.ID @id, l.NAME @name, pm.ID @mediaList=alist.id, pm.LOCATION @mediaList.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_LIST_4= \
  select l.ID @lid, l.NAME @name, pm.ID @pid, pm.LOCATION @location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

OUT_BASIC_LEFT_JOIN_LIST_4=lid$$id name pid$$mediaList=alist.id location$$mediaList.location

CRUD_BASIC_LEFT_JOIN_LIST_5= \
  select l.ID @lid, l.NAME @name, pm.ID @pid, pm.LOCATION @location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

OUT_BASIC_LEFT_JOIN_LIST_5=lid$$id name pid$$mediaList=alist.id location$$mediaList.location

CRUD_BASIC_LEFT_JOIN_LIST_6= \
  select l.ID @id, l.NAME @name, pm.ID @mediaList=alist.id, pm.LOCATION @mediaList.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_SET= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @mediaSet.id^long^id, pm.LOCATION @mediaSet.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_SET_2= \
  select l.ID @id^long^id, l.NAME @name, pm.ID @mediaSet=aset.id^long^id, pm.LOCATION @mediaSet.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_LEFT_JOIN_SET_3= \
  select l.ID @id, l.NAME @name, pm.ID @mediaSet=aset.id, pm.LOCATION @mediaSet.location \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  {#1 order by l.ID, pm.ID}

QRY_BASIC_POLY_JOIN= \
  select l.ID @id^long^id, l.NAME @name, \
  pm.ID @media.id^long^id, pm.LOCATION @media.location, \
  mo.MEDIA @media.media==movie.id^long^id, mo.URLIMDB @media.media.urlIMDB, mo.CATEGORY @media.media.category, \
  bk.MEDIA @media.media==book.id^long^id, bk.ISBN @media.media.isbn, \
  m.TITLE @media.media.title \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  left join MOVIE mo on mo.MEDIA = m.ID \
  left join BOOK bk on bk.MEDIA = m.ID \
  {= where pm.STATUS != :status} \
  {#1 order by l.ID, pm.ID, m.ID}

QRY_BASIC_POLY_JOIN_2= \
  select l.ID @id, l.NAME @name, \
  pm.ID @media.id, pm.LOCATION @media.location, \
  mo.MEDIA @media.media==movie.id, mo.URLIMDB @media.media.urlIMDB, mo.CATEGORY @media.media.category, \
  bk.MEDIA @media.media==book.id, bk.ISBN @media.media.isbn, \
  m.TITLE @media.media.title \
  from LIBRARY l left join PHYSICALMEDIA pm on l.ID = pm.LIBRARY \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  left join MOVIE mo on mo.MEDIA = m.ID \
  left join BOOK bk on bk.MEDIA = m.ID \
  {= where pm.STATUS != :status} \
  {#1 order by l.ID, pm.ID, m.ID}

QRY_BASIC_POLY2_JOIN= \
  select pm.ID @id^long^id, pm.LOCATION @location, \
  mo.MEDIA @media==movie.id^long^id, mo.URLIMDB @media.urlIMDB, mo.CATEGORY @media.category, \
  bk.MEDIA @media==book.id^long^id, bk.ISBN @media.isbn, \
  m.TITLE @media.title \
  from PHYSICALMEDIA pm \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  left join MOVIE mo on mo.MEDIA = m.ID \
  left join BOOK bk on bk.MEDIA = m.ID \
  {= where pm.STATUS = :status} \
  {#1 order by pm.ID, m.ID}

QRY_BASIC_POLY2_JOIN_2= \
  select pm.ID @id, pm.LOCATION @location, \
  mo.MEDIA @media==movie.id, mo.URLIMDB @media.urlIMDB, mo.CATEGORY @media.category, \
  bk.MEDIA @media==book.id, bk.ISBN @media.isbn, \
  m.TITLE @media.title \
  from PHYSICALMEDIA pm \
  left join MEDIA_PHYSICALMEDIA mpm on mpm.PHYSICALMEDIA = pm.ID \
  left join MEDIA m on m.ID = mpm.MEDIA \
  left join MOVIE mo on mo.MEDIA = m.ID \
  left join BOOK bk on bk.MEDIA = m.ID \
  {= where pm.STATUS = :status} \
  {#1 order by pm.ID, m.ID}

QRY_BASIC_JOIN_ONE_TO_ONE_1= \
  select p.ID @id, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, p.VERSION @version, \
  p.CLOTHES_SIZE @clothesSize, \
  c.ID @contact.id, c.ADRESS @contact.address, c.CITY @contact.city, c.ZIP @contact.zip, c.STATE @contact.state, c.UUID @contact.uuid, \
  c.CREATEDDATE @contact.createdDate, c.CREATEDBY @contact.createdBy, c.VERSION @contact.version \
  from PERSON p left join CONTACT c on p.CONTACT = c.ID \
  {= where p.ID = :id} \
  {#1 order by p.ID}

QRY_BASIC_TWO_JOINS= \
  select mo.MEDIA @id, m.TITLE @title, en.ID @engagements.id, en.ROLE @engagements.role, \
  p1.ID @engagements.person.id, p1.NAME_FIRST @engagements.person.name.first,  p1.NAME_LAST @engagements.person.name.last, \
  mc.ID @mediaCharacters.id, mc.NAME @mediaCharacters.name, \
  p2.ID @mediaCharacters.playedBy.id, p2.NAME_FIRST @mediaCharacters.playedBy.name.first,  p2.NAME_LAST @mediaCharacters.playedBy.name.last \
  from MOVIE mo join MEDIA m on mo.MEDIA = m.ID \
  left join ENGAGEMENT en on en.MEDIA = m.ID \
  left join PERSON p1 on p1.ID = en.PERSON \
  left join EXISTSINMEDIA_MEDIACHARACTER em on em.EXISTSINMEDIA = m.ID \
  left join MEDIACHARACTER mc on mc.ID = em.MEDIACHARACTER \
  left join MEDIACHARACTER_PLAYEDBY pb on pb.MEDIACHARACTER = mc.ID \
  left join PERSON p2 on p2.ID = pb.PLAYEDBY \
  {#1 order by m.ID}


CRUD_INSERT_PERSON= \
  insert into PERSON (ID, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  values (:id, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize)
  
CRUD_INSERT_PERSON_2= \
  insert into PERSON (ID, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  values (:id^long^seq=SEQ1, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp^any, :createdBy, :version, :clothesSize)
  
CRUD_INSERT_PERSON_3= \
  insert into PERSON (ID, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  {= values (:id^long^seq=SEQ1, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize) }
  
CRUD_INSERT_PERSON_4= \
  insert into PERSON (ID, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  {= values (:id^long^seq=SQLPROC_SEQUENCE, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize) }
  
CRUD_INSERT_PERSON_5= \
  insert into PERSON (SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  {= values (:id^long^idsel, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize) }
  
CRUD_INSERT_PERSON_6= \
  insert into PERSON (SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  {= values (:id^long^idsel=SEL1, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize) }
  
CRUD_INSERT_PERSON_7= \
  insert into PERSON (ID, SSN_NUMBER, SSN_COUNTRY, NAME_FIRST, NAME_LAST, BIRTHDATE,  SEX, CREATEDDATE, CREATEDBY, VERSION, CLOTHES_SIZE) \
  {= values (:id^long^seq, :ssn.number, :ssn.country, :name.first, :name.last, :birthDate^date, :sex, :createdDate^stamp, :createdBy, :version, :clothesSize) }
  
QRY_CRUD_PERSON_SELECT= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, \
  p.LASTUPDATED @lastUpdated^date, p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  {= where \
   {& p.ID = :id} \
  } \
  order by id

CRUD_UPDATE_PERSON= \
  update PERSON p \
  SET p.NAME_FIRST = :name.first, p.CREATEDDATE = :createdDate^date^any \
  {= where p.ID = :id }

CRUD_UPDATE_PERSON_2= \
  update PERSON p \
  {= set p.NAME_FIRST = :name.first, p.CREATEDDATE = :createdDate^date} \
  {= where p.ID = :id }

CRUD_DELETE_PERSON= \
  delete from PERSON \
  {= where ID = :id }

CRUD_DELETE_PERSON_2= \
  delete from PERSON \
  {= where \
   {& ID = :id} \
   {? :lastUpdatedBy | AND LASTUPDATEDBY = :lastUpdatedBy | AND LASTUPDATEDBY is null} \
  }

CRUD_DELETE_PERSON_3= \
  delete from PERSON \
  {= where \
   {& ID = :id^long^notnull} \
   {? :lastUpdatedBy | AND LASTUPDATEDBY = :lastUpdatedBy | AND LASTUPDATEDBY is null} \
  }

CRUD_GET_PERSON= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, \
  p.LASTUPDATED @lastUpdated^date, p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  {= where p.ID = :id}

CRUD_GET_PERSON_2= \
  select p.ID @id, p.NAME_FIRST @name.first, p.NAME_LAST @name.last, p.SSN_NUMBER @ssn.number, p.SSN_COUNTRY @ssn.country, \
  p.BIRTHDATE @birthDate^date, p.SEX @sex, p.CREATEDDATE @createdDate^date, p.CREATEDBY @createdBy, \
  p.LASTUPDATED @lastUpdated^date, p.LASTUPDATEDBY @lastUpdatedBy, p.VERSION @version \
  from PERSON p \
  {= where p.NAME_FIRST = :name.first AND p.NAME_LAST = :name.last}
  
  
## simple procedure, no result set
CALL_INSERT_PERSON_CALL_2= \
  call new_person(:<id^long, :birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :=sex^estring)
  
CALL_INSERT_PERSON_CALL= \
  call new_person(:<id, :birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :=sex)


## procedure with result set
CALL_INSERT_PERSON_CALL_RESULT_SET_2= \
  call new_person_ret(:birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :sex)
OUT_INSERT_PERSON_CALL_RESULT_SET_2=id birthDate lastUpdated lastUpdatedBy \
  createdDate createdBy version contact$$contact.id ssn_number$$ssn.number \
  ssn_country$$ssn.country name_first$$name.first name_last$$name.last sex clothes_size$$clothesSize

CALL_INSERT_PERSON_CALL_RESULT_SET= \
  call new_person_ret(:birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :sex)
OUT_INSERT_PERSON_CALL_RESULT_SET=id$Long$id birthDate$date$birthDate lastUpdated$stamp$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  createdDate$stamp$createdDate createdBy$string$createdBy version$Long$version contact$Long$contact.id ssn_number$string$ssn.number \
  ssn_country$estring$ssn.country name_first$string$name.first name_last$string$name.last sex$estring$sex clothes_size$eint$clothesSize


## oracle function with result set
ORACLE_CALL_INSERT_PERSON_CALL_RESULT_SET_2= \
  :<1^oracle_cursor = call new_person_ret(:birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :sex)
ORACLE_OUT_INSERT_PERSON_CALL_RESULT_SET_2=id birthDate lastUpdated lastUpdatedBy \
  createdDate createdBy version contact$$contact.id ssn_number$$ssn.number \
  ssn_country$$ssn.country name_first$$name.first name_last$$name.last sex clothes_size$$clothesSize

ORACLE_CALL_INSERT_PERSON_CALL_RESULT_SET= \
  :<1^oracle_cursor = call new_person_ret(:birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :sex)
ORACLE_OUT_INSERT_PERSON_CALL_RESULT_SET=id$Long$id birthDate$date$birthDate lastUpdated$stamp$lastUpdated lastUpdatedBy$string$lastUpdatedBy \
  createdDate$stamp$createdDate createdBy$string$createdBy version$Long$version contact$Long$contact.id ssn_number$string$ssn.number \
  ssn_country$estring$ssn.country name_first$string$name.first name_last$string$name.last sex$estring$sex clothes_size$eint$clothesSize


## oracle procedure with result set
ORACLE_CALL_INSERT_PERSON_CALL_RESULT_SET_PROC= \
  call new_person_ret_proc(:<1^oracle_cursor, :birthDate^date, :ssn.number, :ssn.country, :name.first, :name.last, :sex)
ORACLE_OUT_INSERT_PERSON_CALL_RESULT_SET_PROC=id birthDate lastUpdated lastUpdatedBy \
  createdDate createdBy version contact$$contact.id ssn_number$$ssn.number \
  ssn_country$$ssn.country name_first$$name.first name_last$$name.last sex clothes_size$$clothesSize

  
## simple function, no result set
HSQLDB_CALL_SIMPLE_FUNCION= \
  call an_hour_before(:time)
HSQLDB_OUT_SIMPLE_FUNCION=1$stamp
  
CALL_SIMPLE_FUNCION= \
  :<1^stamp = call an_hour_before(:time)
  
CALL_SIMPLE_FUNCION_TO_IN_FORM= \
  :<time2 = call an_hour_before(:time)
  
